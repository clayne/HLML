/*
===========================================================================

hlml.
Copyright (c) Dan Moody 2018 - Present.

This file is part of hlml.

hlml is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

hlml is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with hlml.  If not, see <http://www.gnu.org/licenses/>.

===========================================================================
*/
#pragma once

#include "hlml_version.h"

// TODO(DM): remove include in this header
#include <math.h>

// constants generated by wolfram alpha
#if 0
#define HLML_PI			3.141592653589793238462643383279502884197169399375105820974
#define HLML_TAU		6.283185307179586476925286766559005768394338798750211641949
#else
#define HLML_PI			3.14159265358979323846
#define HLML_TAU		6.28318530717958647693
#endif

#define HLML_EPSILON	1e-5

inline bool floateq( const float lhs, const float rhs, const float epsilon = HLML_EPSILON ) {
	return fabsf( lhs - rhs ) < epsilon;
}

inline bool doubleeq( const double lhs, const double rhs, const double epsilon = HLML_EPSILON ) {
	return fabs( lhs - rhs ) < epsilon;
}

inline double degrees( const double radians ) {
	return radians * 180.0 / HLML_PI;
}

inline double radians( const double degrees ) {
	return degrees * HLML_PI / 180.0;
}

inline float degreesf( const float radians ) {
	return radians * 180.0f / static_cast<float>( HLML_PI );
}

inline float radiansf( const float degrees ) {
	return degrees * static_cast<float>( HLML_PI ) / 180.0f;
}

inline double min( const double x, const double y ) {
	return ( x < y ) ? x : y;
}

inline double max( const double x, const double y ) {
	return ( x > y ) ? x : y;
}

inline float minf( const float x, const float y ) {
	return ( x < y ) ? x : y;
}

inline float maxf( const float x, const float y ) {
	return ( x > y ) ? x : y;
}

inline double clamp( const double x, const double low, const double high ) {
	return min( max( x, low ), high );
}

inline float clampf( const float x, const float low, const float high ) {
	return minf( maxf( x, low ), high );
}

inline double saturate( const double x ) {
	return clamp( x, 0.0, 1.0 );
}

inline float saturatef( const float x ) {
	return clampf( x, 0.0f, 1.0f );
}