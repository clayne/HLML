/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "bool2.h"
#include "bool3.h"
#include "bool4.h"

#include "int2.h"
#include "int3.h"
#include "int4.h"

#include "uint2.h"
#include "uint3.h"
#include "uint4.h"

#include "float2.h"
#include "float3.h"
#include "float4.h"

#include "double2.h"
#include "double3.h"
#include "double4.h"

#include "hlml_functions_vector.h"

// bool2
inline bool operator==( const bool2& lhs, const bool2& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y );
}

inline bool operator!=( const bool2& lhs, const bool2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise added by the corresponding component of the right-hand bool2.
inline bool2 operator+( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

/// \relates bool2
/// \brief Adds each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator+=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs + scalar );
}

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise subtracted by the corresponding component of the right-hand bool2.
inline bool2 operator-( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

/// \relates bool2
/// \brief Subtracts each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator-=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs - scalar );
}

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise multiplied by the corresponding component of the right-hand bool2.
inline bool2 operator*( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

/// \relates bool2
/// \brief Multiplies each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator*=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs * scalar );
}

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise divided by the corresponding component of the right-hand bool2.
inline bool2 operator/( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

/// \relates bool2
/// \brief Divides each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator/=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs / scalar );
}

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}


// bool3
inline bool operator==( const bool3& lhs, const bool3& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z );
}

inline bool operator!=( const bool3& lhs, const bool3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise added by the corresponding component of the right-hand bool3.
inline bool3 operator+( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

/// \relates bool3
/// \brief Adds each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator+=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs + scalar );
}

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise subtracted by the corresponding component of the right-hand bool3.
inline bool3 operator-( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

/// \relates bool3
/// \brief Subtracts each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator-=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs - scalar );
}

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise multiplied by the corresponding component of the right-hand bool3.
inline bool3 operator*( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

/// \relates bool3
/// \brief Multiplies each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator*=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs * scalar );
}

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise divided by the corresponding component of the right-hand bool3.
inline bool3 operator/( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

/// \relates bool3
/// \brief Divides each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator/=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs / scalar );
}

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}


// bool4
inline bool operator==( const bool4& lhs, const bool4& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z ) && ( lhs.w == rhs.w );
}

inline bool operator!=( const bool4& lhs, const bool4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise added by the corresponding component of the right-hand bool4.
inline bool4 operator+( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

/// \relates bool4
/// \brief Adds each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator+=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs + scalar );
}

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise subtracted by the corresponding component of the right-hand bool4.
inline bool4 operator-( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

/// \relates bool4
/// \brief Subtracts each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator-=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs - scalar );
}

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise multiplied by the corresponding component of the right-hand bool4.
inline bool4 operator*( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

/// \relates bool4
/// \brief Multiplies each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator*=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs * scalar );
}

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise divided by the corresponding component of the right-hand bool4.
inline bool4 operator/( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

/// \relates bool4
/// \brief Divides each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator/=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs / scalar );
}

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}


// int2
inline bool operator==( const int2& lhs, const int2& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y );
}

inline bool operator!=( const int2& lhs, const int2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise added by the corresponding component of the right-hand int2.
inline int2 operator+( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

/// \relates int2
/// \brief Adds each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator+=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs + scalar );
}

inline int2 operator+( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

/// \relates int2
/// \brief Adds each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator+=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise subtracted by the corresponding component of the right-hand int2.
inline int2 operator-( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

/// \relates int2
/// \brief Subtracts each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator-=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs - scalar );
}

inline int2 operator-( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

/// \relates int2
/// \brief Subtracts each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator-=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise multiplied by the corresponding component of the right-hand int2.
inline int2 operator*( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

/// \relates int2
/// \brief Multiplies each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator*=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs * scalar );
}

inline int2 operator*( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

/// \relates int2
/// \brief Multiplies each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator*=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise divided by the corresponding component of the right-hand int2.
inline int2 operator/( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

/// \relates int2
/// \brief Divides each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator/=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs / scalar );
}

inline int2 operator/( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

/// \relates int2
/// \brief Divides each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator/=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates int2
/// \brief Prefix increment operator.  Adds one to each component of the given int2 before evaluation.
inline int2& operator++( int2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
/// \relates int2
/// \brief Postfix increment operator.  Adds one to each component of the given int2 after evaluation.
inline int2& operator++( int2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
/// \relates int2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given int2 before evaluation.
inline int2& operator--( int2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
/// \relates int2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given int2 after evaluation.
inline int2& operator--( int2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

inline int2 operator&( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y
	};
}

inline int2 operator&=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int2 operator|( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y
	};
}

inline int2 operator|=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int2 operator^( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y
	};
}

inline int2 operator^=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int2 operator<<( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y
	};
}

inline int2 operator<<=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int2 operator>>( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y
	};
}

inline int2 operator>>=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates int2
/// \brief Performs a unary bitwise operation on all components of the given int2.
inline int2 operator~( const int2& lhs )
{
	return HLML_CONSTRUCT( int2 ) {
		~lhs.x,
		~lhs.y
	};
}

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}


// int3
inline bool operator==( const int3& lhs, const int3& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z );
}

inline bool operator!=( const int3& lhs, const int3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise added by the corresponding component of the right-hand int3.
inline int3 operator+( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

/// \relates int3
/// \brief Adds each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator+=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs + scalar );
}

inline int3 operator+( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

/// \relates int3
/// \brief Adds each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator+=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise subtracted by the corresponding component of the right-hand int3.
inline int3 operator-( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

/// \relates int3
/// \brief Subtracts each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator-=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs - scalar );
}

inline int3 operator-( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

/// \relates int3
/// \brief Subtracts each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator-=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise multiplied by the corresponding component of the right-hand int3.
inline int3 operator*( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

/// \relates int3
/// \brief Multiplies each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator*=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs * scalar );
}

inline int3 operator*( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

/// \relates int3
/// \brief Multiplies each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator*=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise divided by the corresponding component of the right-hand int3.
inline int3 operator/( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

/// \relates int3
/// \brief Divides each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator/=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs / scalar );
}

inline int3 operator/( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

/// \relates int3
/// \brief Divides each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator/=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates int3
/// \brief Prefix increment operator.  Adds one to each component of the given int3 before evaluation.
inline int3& operator++( int3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
/// \relates int3
/// \brief Postfix increment operator.  Adds one to each component of the given int3 after evaluation.
inline int3& operator++( int3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
/// \relates int3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given int3 before evaluation.
inline int3& operator--( int3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
/// \relates int3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given int3 after evaluation.
inline int3& operator--( int3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

inline int3 operator&( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z
	};
}

inline int3 operator&=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int3 operator|( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z
	};
}

inline int3 operator|=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int3 operator^( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z
	};
}

inline int3 operator^=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int3 operator<<( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z
	};
}

inline int3 operator<<=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int3 operator>>( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z
	};
}

inline int3 operator>>=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates int3
/// \brief Performs a unary bitwise operation on all components of the given int3.
inline int3 operator~( const int3& lhs )
{
	return HLML_CONSTRUCT( int3 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z
	};
}

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}


// int4
inline bool operator==( const int4& lhs, const int4& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z ) && ( lhs.w == rhs.w );
}

inline bool operator!=( const int4& lhs, const int4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise added by the corresponding component of the right-hand int4.
inline int4 operator+( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

/// \relates int4
/// \brief Adds each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator+=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs + scalar );
}

inline int4 operator+( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

/// \relates int4
/// \brief Adds each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator+=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise subtracted by the corresponding component of the right-hand int4.
inline int4 operator-( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

/// \relates int4
/// \brief Subtracts each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator-=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs - scalar );
}

inline int4 operator-( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

/// \relates int4
/// \brief Subtracts each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator-=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise multiplied by the corresponding component of the right-hand int4.
inline int4 operator*( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

/// \relates int4
/// \brief Multiplies each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator*=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs * scalar );
}

inline int4 operator*( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

/// \relates int4
/// \brief Multiplies each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator*=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise divided by the corresponding component of the right-hand int4.
inline int4 operator/( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

/// \relates int4
/// \brief Divides each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator/=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs / scalar );
}

inline int4 operator/( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

/// \relates int4
/// \brief Divides each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator/=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates int4
/// \brief Prefix increment operator.  Adds one to each component of the given int4 before evaluation.
inline int4& operator++( int4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
/// \relates int4
/// \brief Postfix increment operator.  Adds one to each component of the given int4 after evaluation.
inline int4& operator++( int4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
/// \relates int4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given int4 before evaluation.
inline int4& operator--( int4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
/// \relates int4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given int4 after evaluation.
inline int4& operator--( int4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

inline int4 operator&( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z,
		lhs.w & rhs.w
	};
}

inline int4 operator&=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int4 operator|( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z,
		lhs.w | rhs.w
	};
}

inline int4 operator|=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int4 operator^( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z,
		lhs.w ^ rhs.w
	};
}

inline int4 operator^=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int4 operator<<( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z,
		lhs.w << rhs.w
	};
}

inline int4 operator<<=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int4 operator>>( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z,
		lhs.w >> rhs.w
	};
}

inline int4 operator>>=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates int4
/// \brief Performs a unary bitwise operation on all components of the given int4.
inline int4 operator~( const int4& lhs )
{
	return HLML_CONSTRUCT( int4 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z,
		~lhs.w
	};
}

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}


// uint2
inline bool operator==( const uint2& lhs, const uint2& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y );
}

inline bool operator!=( const uint2& lhs, const uint2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise added by the corresponding component of the right-hand uint2.
inline uint2 operator+( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

/// \relates uint2
/// \brief Adds each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator+=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs + scalar );
}

inline uint2 operator+( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

/// \relates uint2
/// \brief Adds each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator+=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise subtracted by the corresponding component of the right-hand uint2.
inline uint2 operator-( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

/// \relates uint2
/// \brief Subtracts each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator-=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs - scalar );
}

inline uint2 operator-( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

/// \relates uint2
/// \brief Subtracts each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator-=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise multiplied by the corresponding component of the right-hand uint2.
inline uint2 operator*( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

/// \relates uint2
/// \brief Multiplies each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator*=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs * scalar );
}

inline uint2 operator*( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

/// \relates uint2
/// \brief Multiplies each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator*=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise divided by the corresponding component of the right-hand uint2.
inline uint2 operator/( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

/// \relates uint2
/// \brief Divides each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator/=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs / scalar );
}

inline uint2 operator/( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

/// \relates uint2
/// \brief Divides each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator/=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates uint2
/// \brief Prefix increment operator.  Adds one to each component of the given uint2 before evaluation.
inline uint2& operator++( uint2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
/// \relates uint2
/// \brief Postfix increment operator.  Adds one to each component of the given uint2 after evaluation.
inline uint2& operator++( uint2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
/// \relates uint2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given uint2 before evaluation.
inline uint2& operator--( uint2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
/// \relates uint2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given uint2 after evaluation.
inline uint2& operator--( uint2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

inline uint2 operator&( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y
	};
}

inline uint2 operator&=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint2 operator|( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y
	};
}

inline uint2 operator|=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint2 operator^( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y
	};
}

inline uint2 operator^=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint2 operator<<( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y
	};
}

inline uint2 operator<<=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint2 operator>>( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y
	};
}

inline uint2 operator>>=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates uint2
/// \brief Performs a unary bitwise operation on all components of the given uint2.
inline uint2 operator~( const uint2& lhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		~lhs.x,
		~lhs.y
	};
}

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}


// uint3
inline bool operator==( const uint3& lhs, const uint3& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z );
}

inline bool operator!=( const uint3& lhs, const uint3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise added by the corresponding component of the right-hand uint3.
inline uint3 operator+( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

/// \relates uint3
/// \brief Adds each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator+=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs + scalar );
}

inline uint3 operator+( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

/// \relates uint3
/// \brief Adds each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator+=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise subtracted by the corresponding component of the right-hand uint3.
inline uint3 operator-( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

/// \relates uint3
/// \brief Subtracts each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator-=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs - scalar );
}

inline uint3 operator-( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

/// \relates uint3
/// \brief Subtracts each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator-=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise multiplied by the corresponding component of the right-hand uint3.
inline uint3 operator*( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

/// \relates uint3
/// \brief Multiplies each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator*=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs * scalar );
}

inline uint3 operator*( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

/// \relates uint3
/// \brief Multiplies each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator*=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise divided by the corresponding component of the right-hand uint3.
inline uint3 operator/( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

/// \relates uint3
/// \brief Divides each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator/=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs / scalar );
}

inline uint3 operator/( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

/// \relates uint3
/// \brief Divides each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator/=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates uint3
/// \brief Prefix increment operator.  Adds one to each component of the given uint3 before evaluation.
inline uint3& operator++( uint3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
/// \relates uint3
/// \brief Postfix increment operator.  Adds one to each component of the given uint3 after evaluation.
inline uint3& operator++( uint3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
/// \relates uint3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given uint3 before evaluation.
inline uint3& operator--( uint3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
/// \relates uint3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given uint3 after evaluation.
inline uint3& operator--( uint3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

inline uint3 operator&( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z
	};
}

inline uint3 operator&=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint3 operator|( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z
	};
}

inline uint3 operator|=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint3 operator^( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z
	};
}

inline uint3 operator^=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint3 operator<<( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z
	};
}

inline uint3 operator<<=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint3 operator>>( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z
	};
}

inline uint3 operator>>=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates uint3
/// \brief Performs a unary bitwise operation on all components of the given uint3.
inline uint3 operator~( const uint3& lhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z
	};
}

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}


// uint4
inline bool operator==( const uint4& lhs, const uint4& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z ) && ( lhs.w == rhs.w );
}

inline bool operator!=( const uint4& lhs, const uint4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise added by the corresponding component of the right-hand uint4.
inline uint4 operator+( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

/// \relates uint4
/// \brief Adds each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator+=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs + scalar );
}

inline uint4 operator+( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

/// \relates uint4
/// \brief Adds each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator+=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise subtracted by the corresponding component of the right-hand uint4.
inline uint4 operator-( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

/// \relates uint4
/// \brief Subtracts each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator-=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs - scalar );
}

inline uint4 operator-( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

/// \relates uint4
/// \brief Subtracts each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator-=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise multiplied by the corresponding component of the right-hand uint4.
inline uint4 operator*( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

/// \relates uint4
/// \brief Multiplies each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator*=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs * scalar );
}

inline uint4 operator*( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

/// \relates uint4
/// \brief Multiplies each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator*=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise divided by the corresponding component of the right-hand uint4.
inline uint4 operator/( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

/// \relates uint4
/// \brief Divides each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator/=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs / scalar );
}

inline uint4 operator/( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

/// \relates uint4
/// \brief Divides each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator/=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates uint4
/// \brief Prefix increment operator.  Adds one to each component of the given uint4 before evaluation.
inline uint4& operator++( uint4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
/// \relates uint4
/// \brief Postfix increment operator.  Adds one to each component of the given uint4 after evaluation.
inline uint4& operator++( uint4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
/// \relates uint4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given uint4 before evaluation.
inline uint4& operator--( uint4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
/// \relates uint4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given uint4 after evaluation.
inline uint4& operator--( uint4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

inline uint4 operator&( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z,
		lhs.w & rhs.w
	};
}

inline uint4 operator&=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint4 operator|( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z,
		lhs.w | rhs.w
	};
}

inline uint4 operator|=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint4 operator^( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z,
		lhs.w ^ rhs.w
	};
}

inline uint4 operator^=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint4 operator<<( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z,
		lhs.w << rhs.w
	};
}

inline uint4 operator<<=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint4 operator>>( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z,
		lhs.w >> rhs.w
	};
}

inline uint4 operator>>=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates uint4
/// \brief Performs a unary bitwise operation on all components of the given uint4.
inline uint4 operator~( const uint4& lhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z,
		~lhs.w
	};
}

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}


// float2
inline bool operator==( const float2& lhs, const float2& rhs )
{
	return floateq( lhs.x, rhs.x ) && floateq( lhs.y, rhs.y );
}

inline bool operator!=( const float2& lhs, const float2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise added by the corresponding component of the right-hand float2.
inline float2 operator+( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

/// \relates float2
/// \brief Adds each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator+=( float2& lhs, const float scalar )
{
	return ( lhs = lhs + scalar );
}

inline float2 operator+( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

/// \relates float2
/// \brief Adds each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator+=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise subtracted by the corresponding component of the right-hand float2.
inline float2 operator-( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

/// \relates float2
/// \brief Subtracts each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator-=( float2& lhs, const float scalar )
{
	return ( lhs = lhs - scalar );
}

inline float2 operator-( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

/// \relates float2
/// \brief Subtracts each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator-=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise multiplied by the corresponding component of the right-hand float2.
inline float2 operator*( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

/// \relates float2
/// \brief Multiplies each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator*=( float2& lhs, const float scalar )
{
	return ( lhs = lhs * scalar );
}

inline float2 operator*( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

/// \relates float2
/// \brief Multiplies each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator*=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise divided by the corresponding component of the right-hand float2.
inline float2 operator/( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

/// \relates float2
/// \brief Divides each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator/=( float2& lhs, const float scalar )
{
	return ( lhs = lhs / scalar );
}

inline float2 operator/( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

/// \relates float2
/// \brief Divides each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator/=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates float2
/// \brief Prefix increment operator.  Adds one to each component of the given float2 before evaluation.
inline float2& operator++( float2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
/// \relates float2
/// \brief Postfix increment operator.  Adds one to each component of the given float2 after evaluation.
inline float2& operator++( float2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
/// \relates float2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given float2 before evaluation.
inline float2& operator--( float2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
/// \relates float2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given float2 after evaluation.
inline float2& operator--( float2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}


// float3
inline bool operator==( const float3& lhs, const float3& rhs )
{
	return floateq( lhs.x, rhs.x ) && floateq( lhs.y, rhs.y ) && floateq( lhs.z, rhs.z );
}

inline bool operator!=( const float3& lhs, const float3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise added by the corresponding component of the right-hand float3.
inline float3 operator+( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

/// \relates float3
/// \brief Adds each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator+=( float3& lhs, const float scalar )
{
	return ( lhs = lhs + scalar );
}

inline float3 operator+( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

/// \relates float3
/// \brief Adds each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator+=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise subtracted by the corresponding component of the right-hand float3.
inline float3 operator-( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

/// \relates float3
/// \brief Subtracts each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator-=( float3& lhs, const float scalar )
{
	return ( lhs = lhs - scalar );
}

inline float3 operator-( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

/// \relates float3
/// \brief Subtracts each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator-=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise multiplied by the corresponding component of the right-hand float3.
inline float3 operator*( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

/// \relates float3
/// \brief Multiplies each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator*=( float3& lhs, const float scalar )
{
	return ( lhs = lhs * scalar );
}

inline float3 operator*( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

/// \relates float3
/// \brief Multiplies each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator*=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise divided by the corresponding component of the right-hand float3.
inline float3 operator/( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

/// \relates float3
/// \brief Divides each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator/=( float3& lhs, const float scalar )
{
	return ( lhs = lhs / scalar );
}

inline float3 operator/( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

/// \relates float3
/// \brief Divides each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator/=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates float3
/// \brief Prefix increment operator.  Adds one to each component of the given float3 before evaluation.
inline float3& operator++( float3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
/// \relates float3
/// \brief Postfix increment operator.  Adds one to each component of the given float3 after evaluation.
inline float3& operator++( float3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
/// \relates float3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given float3 before evaluation.
inline float3& operator--( float3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
/// \relates float3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given float3 after evaluation.
inline float3& operator--( float3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}


// float4
inline bool operator==( const float4& lhs, const float4& rhs )
{
	return floateq( lhs.x, rhs.x ) && floateq( lhs.y, rhs.y ) && floateq( lhs.z, rhs.z ) && floateq( lhs.w, rhs.w );
}

inline bool operator!=( const float4& lhs, const float4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise added by the corresponding component of the right-hand float4.
inline float4 operator+( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

/// \relates float4
/// \brief Adds each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator+=( float4& lhs, const float scalar )
{
	return ( lhs = lhs + scalar );
}

inline float4 operator+( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

/// \relates float4
/// \brief Adds each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator+=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise subtracted by the corresponding component of the right-hand float4.
inline float4 operator-( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

/// \relates float4
/// \brief Subtracts each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator-=( float4& lhs, const float scalar )
{
	return ( lhs = lhs - scalar );
}

inline float4 operator-( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

/// \relates float4
/// \brief Subtracts each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator-=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise multiplied by the corresponding component of the right-hand float4.
inline float4 operator*( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

/// \relates float4
/// \brief Multiplies each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator*=( float4& lhs, const float scalar )
{
	return ( lhs = lhs * scalar );
}

inline float4 operator*( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

/// \relates float4
/// \brief Multiplies each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator*=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise divided by the corresponding component of the right-hand float4.
inline float4 operator/( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

/// \relates float4
/// \brief Divides each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator/=( float4& lhs, const float scalar )
{
	return ( lhs = lhs / scalar );
}

inline float4 operator/( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

/// \relates float4
/// \brief Divides each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator/=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates float4
/// \brief Prefix increment operator.  Adds one to each component of the given float4 before evaluation.
inline float4& operator++( float4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
/// \relates float4
/// \brief Postfix increment operator.  Adds one to each component of the given float4 after evaluation.
inline float4& operator++( float4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
/// \relates float4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given float4 before evaluation.
inline float4& operator--( float4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
/// \relates float4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given float4 after evaluation.
inline float4& operator--( float4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}


// double2
inline bool operator==( const double2& lhs, const double2& rhs )
{
	return doubleeq( lhs.x, rhs.x ) && doubleeq( lhs.y, rhs.y );
}

inline bool operator!=( const double2& lhs, const double2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise added by the corresponding component of the right-hand double2.
inline double2 operator+( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

/// \relates double2
/// \brief Adds each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator+=( double2& lhs, const double scalar )
{
	return ( lhs = lhs + scalar );
}

inline double2 operator+( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

/// \relates double2
/// \brief Adds each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator+=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise subtracted by the corresponding component of the right-hand double2.
inline double2 operator-( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

/// \relates double2
/// \brief Subtracts each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator-=( double2& lhs, const double scalar )
{
	return ( lhs = lhs - scalar );
}

inline double2 operator-( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

/// \relates double2
/// \brief Subtracts each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator-=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise multiplied by the corresponding component of the right-hand double2.
inline double2 operator*( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

/// \relates double2
/// \brief Multiplies each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator*=( double2& lhs, const double scalar )
{
	return ( lhs = lhs * scalar );
}

inline double2 operator*( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

/// \relates double2
/// \brief Multiplies each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator*=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise divided by the corresponding component of the right-hand double2.
inline double2 operator/( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

/// \relates double2
/// \brief Divides each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator/=( double2& lhs, const double scalar )
{
	return ( lhs = lhs / scalar );
}

inline double2 operator/( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

/// \relates double2
/// \brief Divides each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator/=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates double2
/// \brief Prefix increment operator.  Adds one to each component of the given double2 before evaluation.
inline double2& operator++( double2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
/// \relates double2
/// \brief Postfix increment operator.  Adds one to each component of the given double2 after evaluation.
inline double2& operator++( double2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
/// \relates double2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given double2 before evaluation.
inline double2& operator--( double2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
/// \relates double2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given double2 after evaluation.
inline double2& operator--( double2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}


// double3
inline bool operator==( const double3& lhs, const double3& rhs )
{
	return doubleeq( lhs.x, rhs.x ) && doubleeq( lhs.y, rhs.y ) && doubleeq( lhs.z, rhs.z );
}

inline bool operator!=( const double3& lhs, const double3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise added by the corresponding component of the right-hand double3.
inline double3 operator+( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

/// \relates double3
/// \brief Adds each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator+=( double3& lhs, const double scalar )
{
	return ( lhs = lhs + scalar );
}

inline double3 operator+( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

/// \relates double3
/// \brief Adds each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator+=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise subtracted by the corresponding component of the right-hand double3.
inline double3 operator-( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

/// \relates double3
/// \brief Subtracts each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator-=( double3& lhs, const double scalar )
{
	return ( lhs = lhs - scalar );
}

inline double3 operator-( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

/// \relates double3
/// \brief Subtracts each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator-=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise multiplied by the corresponding component of the right-hand double3.
inline double3 operator*( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

/// \relates double3
/// \brief Multiplies each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator*=( double3& lhs, const double scalar )
{
	return ( lhs = lhs * scalar );
}

inline double3 operator*( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

/// \relates double3
/// \brief Multiplies each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator*=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise divided by the corresponding component of the right-hand double3.
inline double3 operator/( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

/// \relates double3
/// \brief Divides each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator/=( double3& lhs, const double scalar )
{
	return ( lhs = lhs / scalar );
}

inline double3 operator/( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

/// \relates double3
/// \brief Divides each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator/=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates double3
/// \brief Prefix increment operator.  Adds one to each component of the given double3 before evaluation.
inline double3& operator++( double3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
/// \relates double3
/// \brief Postfix increment operator.  Adds one to each component of the given double3 after evaluation.
inline double3& operator++( double3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
/// \relates double3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given double3 before evaluation.
inline double3& operator--( double3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
/// \relates double3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given double3 after evaluation.
inline double3& operator--( double3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}


// double4
inline bool operator==( const double4& lhs, const double4& rhs )
{
	return doubleeq( lhs.x, rhs.x ) && doubleeq( lhs.y, rhs.y ) && doubleeq( lhs.z, rhs.z ) && doubleeq( lhs.w, rhs.w );
}

inline bool operator!=( const double4& lhs, const double4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise added by the corresponding component of the right-hand double4.
inline double4 operator+( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

/// \relates double4
/// \brief Adds each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator+=( double4& lhs, const double scalar )
{
	return ( lhs = lhs + scalar );
}

inline double4 operator+( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

/// \relates double4
/// \brief Adds each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator+=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs + rhs );
}

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise subtracted by the corresponding component of the right-hand double4.
inline double4 operator-( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

/// \relates double4
/// \brief Subtracts each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator-=( double4& lhs, const double scalar )
{
	return ( lhs = lhs - scalar );
}

inline double4 operator-( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

/// \relates double4
/// \brief Subtracts each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator-=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs - rhs );
}

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise multiplied by the corresponding component of the right-hand double4.
inline double4 operator*( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

/// \relates double4
/// \brief Multiplies each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator*=( double4& lhs, const double scalar )
{
	return ( lhs = lhs * scalar );
}

inline double4 operator*( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

/// \relates double4
/// \brief Multiplies each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator*=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs * rhs );
}

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise divided by the corresponding component of the right-hand double4.
inline double4 operator/( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

/// \relates double4
/// \brief Divides each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator/=( double4& lhs, const double scalar )
{
	return ( lhs = lhs / scalar );
}

inline double4 operator/( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

/// \relates double4
/// \brief Divides each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator/=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
/// \relates double4
/// \brief Prefix increment operator.  Adds one to each component of the given double4 before evaluation.
inline double4& operator++( double4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
/// \relates double4
/// \brief Postfix increment operator.  Adds one to each component of the given double4 after evaluation.
inline double4& operator++( double4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
/// \relates double4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given double4 before evaluation.
inline double4& operator--( double4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
/// \relates double4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given double4 after evaluation.
inline double4& operator--( double4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}


