/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "bool2.h"
#include "bool3.h"
#include "bool4.h"

#include "int2.h"
#include "int3.h"
#include "int4.h"

#include "uint2.h"
#include "uint3.h"
#include "uint4.h"

#include "float2.h"
#include "float3.h"
#include "float4.h"

#include "double2.h"
#include "double3.h"
#include "double4.h"

// int2
inline int2 operator+( const int2& lhs, const int32_t rhs )
{
	return int2(
		lhs[0] + rhs,
		lhs[1] + rhs
	);
}

inline int2 operator+=( int2& lhs, const int32_t rhs )
{
	return ( lhs = lhs + rhs );
}

inline int2 operator+( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1]
	);
}

inline int2 operator+=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs + rhs );
}

inline int2 operator-( const int2& lhs, const int32_t rhs )
{
	return int2(
		lhs[0] - rhs,
		lhs[1] - rhs
	);
}

inline int2 operator-=( int2& lhs, const int32_t rhs )
{
	return ( lhs = lhs - rhs );
}

inline int2 operator-( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1]
	);
}

inline int2 operator-=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs - rhs );
}

inline int2 operator*( const int2& lhs, const int32_t rhs )
{
	return int2(
		lhs[0] * rhs,
		lhs[1] * rhs
	);
}

inline int2 operator*=( int2& lhs, const int32_t rhs )
{
	return ( lhs = lhs * rhs );
}

inline int2 operator*( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1]
	);
}

inline int2 operator*=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs * rhs );
}

inline int2 operator/( const int2& lhs, const int32_t rhs )
{
	return int2(
		lhs[0] / rhs,
		lhs[1] / rhs
	);
}

inline int2 operator/=( int2& lhs, const int32_t rhs )
{
	return ( lhs = lhs / rhs );
}

inline int2 operator/( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1]
	);
}

inline int2 operator/=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline int2& operator++( int2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
inline int2& operator++( int2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
inline int2& operator--( int2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
inline int2& operator--( int2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

inline bool2 operator<( const int2& lhs, const int2& rhs )
{
	return bool2(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1]
	);
}

inline bool2 operator<=( const int2& lhs, const int2& rhs )
{
	return bool2(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1]
	);
}

inline bool2 operator>( const int2& lhs, const int2& rhs )
{
	return bool2(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1]
	);
}

inline bool2 operator>=( const int2& lhs, const int2& rhs )
{
	return bool2(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1]
	);
}

inline int2 operator&( const int2& lhs, const int32_t& rhs )
{
	return int2(
		lhs[0] & rhs,
		lhs[1] & rhs
	);
}

inline int2 operator&=( int2& lhs, const int32_t& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int2 operator&( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] & rhs[0],
		lhs[1] & rhs[1]
	);
}

inline int2 operator&=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int2 operator|( const int2& lhs, const int32_t& rhs )
{
	return int2(
		lhs[0] | rhs,
		lhs[1] | rhs
	);
}

inline int2 operator|=( int2& lhs, const int32_t& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int2 operator|( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] | rhs[0],
		lhs[1] | rhs[1]
	);
}

inline int2 operator|=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int2 operator^( const int2& lhs, const int32_t& rhs )
{
	return int2(
		lhs[0] ^ rhs,
		lhs[1] ^ rhs
	);
}

inline int2 operator^=( int2& lhs, const int32_t& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int2 operator^( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] ^ rhs[0],
		lhs[1] ^ rhs[1]
	);
}

inline int2 operator^=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int2 operator<<( const int2& lhs, const int32_t& rhs )
{
	return int2(
		lhs[0] << rhs,
		lhs[1] << rhs
	);
}

inline int2 operator<<=( int2& lhs, const int32_t& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int2 operator<<( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] << rhs[0],
		lhs[1] << rhs[1]
	);
}

inline int2 operator<<=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int2 operator>>( const int2& lhs, const int32_t& rhs )
{
	return int2(
		lhs[0] >> rhs,
		lhs[1] >> rhs
	);
}

inline int2 operator>>=( int2& lhs, const int32_t& rhs )
{
	return ( lhs = lhs >> rhs );
}

inline int2 operator>>( const int2& lhs, const int2& rhs )
{
	return int2(
		lhs[0] >> rhs[0],
		lhs[1] >> rhs[1]
	);
}

inline int2 operator>>=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates int2
/// \brief Performs a unary bitwise operation on all components of the given int2.
inline int2 operator~( const int2& lhs )
{
	return int2(
		~lhs[0],
		~lhs[1]
	);
}


// int3
inline int3 operator+( const int3& lhs, const int32_t rhs )
{
	return int3(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs
	);
}

inline int3 operator+=( int3& lhs, const int32_t rhs )
{
	return ( lhs = lhs + rhs );
}

inline int3 operator+( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2]
	);
}

inline int3 operator+=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs + rhs );
}

inline int3 operator-( const int3& lhs, const int32_t rhs )
{
	return int3(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs
	);
}

inline int3 operator-=( int3& lhs, const int32_t rhs )
{
	return ( lhs = lhs - rhs );
}

inline int3 operator-( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2]
	);
}

inline int3 operator-=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs - rhs );
}

inline int3 operator*( const int3& lhs, const int32_t rhs )
{
	return int3(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs
	);
}

inline int3 operator*=( int3& lhs, const int32_t rhs )
{
	return ( lhs = lhs * rhs );
}

inline int3 operator*( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2]
	);
}

inline int3 operator*=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs * rhs );
}

inline int3 operator/( const int3& lhs, const int32_t rhs )
{
	return int3(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs
	);
}

inline int3 operator/=( int3& lhs, const int32_t rhs )
{
	return ( lhs = lhs / rhs );
}

inline int3 operator/( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2]
	);
}

inline int3 operator/=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline int3& operator++( int3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
inline int3& operator++( int3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
inline int3& operator--( int3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
inline int3& operator--( int3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

inline bool3 operator<( const int3& lhs, const int3& rhs )
{
	return bool3(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2]
	);
}

inline bool3 operator<=( const int3& lhs, const int3& rhs )
{
	return bool3(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2]
	);
}

inline bool3 operator>( const int3& lhs, const int3& rhs )
{
	return bool3(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2]
	);
}

inline bool3 operator>=( const int3& lhs, const int3& rhs )
{
	return bool3(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2]
	);
}

inline int3 operator&( const int3& lhs, const int32_t& rhs )
{
	return int3(
		lhs[0] & rhs,
		lhs[1] & rhs,
		lhs[2] & rhs
	);
}

inline int3 operator&=( int3& lhs, const int32_t& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int3 operator&( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] & rhs[0],
		lhs[1] & rhs[1],
		lhs[2] & rhs[2]
	);
}

inline int3 operator&=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int3 operator|( const int3& lhs, const int32_t& rhs )
{
	return int3(
		lhs[0] | rhs,
		lhs[1] | rhs,
		lhs[2] | rhs
	);
}

inline int3 operator|=( int3& lhs, const int32_t& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int3 operator|( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] | rhs[0],
		lhs[1] | rhs[1],
		lhs[2] | rhs[2]
	);
}

inline int3 operator|=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int3 operator^( const int3& lhs, const int32_t& rhs )
{
	return int3(
		lhs[0] ^ rhs,
		lhs[1] ^ rhs,
		lhs[2] ^ rhs
	);
}

inline int3 operator^=( int3& lhs, const int32_t& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int3 operator^( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] ^ rhs[0],
		lhs[1] ^ rhs[1],
		lhs[2] ^ rhs[2]
	);
}

inline int3 operator^=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int3 operator<<( const int3& lhs, const int32_t& rhs )
{
	return int3(
		lhs[0] << rhs,
		lhs[1] << rhs,
		lhs[2] << rhs
	);
}

inline int3 operator<<=( int3& lhs, const int32_t& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int3 operator<<( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] << rhs[0],
		lhs[1] << rhs[1],
		lhs[2] << rhs[2]
	);
}

inline int3 operator<<=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int3 operator>>( const int3& lhs, const int32_t& rhs )
{
	return int3(
		lhs[0] >> rhs,
		lhs[1] >> rhs,
		lhs[2] >> rhs
	);
}

inline int3 operator>>=( int3& lhs, const int32_t& rhs )
{
	return ( lhs = lhs >> rhs );
}

inline int3 operator>>( const int3& lhs, const int3& rhs )
{
	return int3(
		lhs[0] >> rhs[0],
		lhs[1] >> rhs[1],
		lhs[2] >> rhs[2]
	);
}

inline int3 operator>>=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates int3
/// \brief Performs a unary bitwise operation on all components of the given int3.
inline int3 operator~( const int3& lhs )
{
	return int3(
		~lhs[0],
		~lhs[1],
		~lhs[2]
	);
}


// int4
inline int4 operator+( const int4& lhs, const int32_t rhs )
{
	return int4(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs,
		lhs[3] + rhs
	);
}

inline int4 operator+=( int4& lhs, const int32_t rhs )
{
	return ( lhs = lhs + rhs );
}

inline int4 operator+( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2],
		lhs[3] + rhs[3]
	);
}

inline int4 operator+=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs + rhs );
}

inline int4 operator-( const int4& lhs, const int32_t rhs )
{
	return int4(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs,
		lhs[3] - rhs
	);
}

inline int4 operator-=( int4& lhs, const int32_t rhs )
{
	return ( lhs = lhs - rhs );
}

inline int4 operator-( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2],
		lhs[3] - rhs[3]
	);
}

inline int4 operator-=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs - rhs );
}

inline int4 operator*( const int4& lhs, const int32_t rhs )
{
	return int4(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs,
		lhs[3] * rhs
	);
}

inline int4 operator*=( int4& lhs, const int32_t rhs )
{
	return ( lhs = lhs * rhs );
}

inline int4 operator*( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2],
		lhs[3] * rhs[3]
	);
}

inline int4 operator*=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs * rhs );
}

inline int4 operator/( const int4& lhs, const int32_t rhs )
{
	return int4(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs,
		lhs[3] / rhs
	);
}

inline int4 operator/=( int4& lhs, const int32_t rhs )
{
	return ( lhs = lhs / rhs );
}

inline int4 operator/( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2],
		lhs[3] / rhs[3]
	);
}

inline int4 operator/=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline int4& operator++( int4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
inline int4& operator++( int4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
inline int4& operator--( int4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
inline int4& operator--( int4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

inline bool4 operator<( const int4& lhs, const int4& rhs )
{
	return bool4(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2],
		lhs[3] < rhs[3]
	);
}

inline bool4 operator<=( const int4& lhs, const int4& rhs )
{
	return bool4(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2],
		lhs[3] <= rhs[3]
	);
}

inline bool4 operator>( const int4& lhs, const int4& rhs )
{
	return bool4(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2],
		lhs[3] > rhs[3]
	);
}

inline bool4 operator>=( const int4& lhs, const int4& rhs )
{
	return bool4(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2],
		lhs[3] >= rhs[3]
	);
}

inline int4 operator&( const int4& lhs, const int32_t& rhs )
{
	return int4(
		lhs[0] & rhs,
		lhs[1] & rhs,
		lhs[2] & rhs,
		lhs[3] & rhs
	);
}

inline int4 operator&=( int4& lhs, const int32_t& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int4 operator&( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] & rhs[0],
		lhs[1] & rhs[1],
		lhs[2] & rhs[2],
		lhs[3] & rhs[3]
	);
}

inline int4 operator&=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs & rhs );
}

inline int4 operator|( const int4& lhs, const int32_t& rhs )
{
	return int4(
		lhs[0] | rhs,
		lhs[1] | rhs,
		lhs[2] | rhs,
		lhs[3] | rhs
	);
}

inline int4 operator|=( int4& lhs, const int32_t& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int4 operator|( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] | rhs[0],
		lhs[1] | rhs[1],
		lhs[2] | rhs[2],
		lhs[3] | rhs[3]
	);
}

inline int4 operator|=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs | rhs );
}

inline int4 operator^( const int4& lhs, const int32_t& rhs )
{
	return int4(
		lhs[0] ^ rhs,
		lhs[1] ^ rhs,
		lhs[2] ^ rhs,
		lhs[3] ^ rhs
	);
}

inline int4 operator^=( int4& lhs, const int32_t& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int4 operator^( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] ^ rhs[0],
		lhs[1] ^ rhs[1],
		lhs[2] ^ rhs[2],
		lhs[3] ^ rhs[3]
	);
}

inline int4 operator^=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline int4 operator<<( const int4& lhs, const int32_t& rhs )
{
	return int4(
		lhs[0] << rhs,
		lhs[1] << rhs,
		lhs[2] << rhs,
		lhs[3] << rhs
	);
}

inline int4 operator<<=( int4& lhs, const int32_t& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int4 operator<<( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] << rhs[0],
		lhs[1] << rhs[1],
		lhs[2] << rhs[2],
		lhs[3] << rhs[3]
	);
}

inline int4 operator<<=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs << rhs );
}

inline int4 operator>>( const int4& lhs, const int32_t& rhs )
{
	return int4(
		lhs[0] >> rhs,
		lhs[1] >> rhs,
		lhs[2] >> rhs,
		lhs[3] >> rhs
	);
}

inline int4 operator>>=( int4& lhs, const int32_t& rhs )
{
	return ( lhs = lhs >> rhs );
}

inline int4 operator>>( const int4& lhs, const int4& rhs )
{
	return int4(
		lhs[0] >> rhs[0],
		lhs[1] >> rhs[1],
		lhs[2] >> rhs[2],
		lhs[3] >> rhs[3]
	);
}

inline int4 operator>>=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates int4
/// \brief Performs a unary bitwise operation on all components of the given int4.
inline int4 operator~( const int4& lhs )
{
	return int4(
		~lhs[0],
		~lhs[1],
		~lhs[2],
		~lhs[3]
	);
}


// uint2
inline uint2 operator+( const uint2& lhs, const uint32_t rhs )
{
	return uint2(
		lhs[0] + rhs,
		lhs[1] + rhs
	);
}

inline uint2 operator+=( uint2& lhs, const uint32_t rhs )
{
	return ( lhs = lhs + rhs );
}

inline uint2 operator+( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1]
	);
}

inline uint2 operator+=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs + rhs );
}

inline uint2 operator-( const uint2& lhs, const uint32_t rhs )
{
	return uint2(
		lhs[0] - rhs,
		lhs[1] - rhs
	);
}

inline uint2 operator-=( uint2& lhs, const uint32_t rhs )
{
	return ( lhs = lhs - rhs );
}

inline uint2 operator-( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1]
	);
}

inline uint2 operator-=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs - rhs );
}

inline uint2 operator*( const uint2& lhs, const uint32_t rhs )
{
	return uint2(
		lhs[0] * rhs,
		lhs[1] * rhs
	);
}

inline uint2 operator*=( uint2& lhs, const uint32_t rhs )
{
	return ( lhs = lhs * rhs );
}

inline uint2 operator*( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1]
	);
}

inline uint2 operator*=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs * rhs );
}

inline uint2 operator/( const uint2& lhs, const uint32_t rhs )
{
	return uint2(
		lhs[0] / rhs,
		lhs[1] / rhs
	);
}

inline uint2 operator/=( uint2& lhs, const uint32_t rhs )
{
	return ( lhs = lhs / rhs );
}

inline uint2 operator/( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1]
	);
}

inline uint2 operator/=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline uint2& operator++( uint2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
inline uint2& operator++( uint2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
inline uint2& operator--( uint2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
inline uint2& operator--( uint2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

inline bool2 operator<( const uint2& lhs, const uint2& rhs )
{
	return bool2(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1]
	);
}

inline bool2 operator<=( const uint2& lhs, const uint2& rhs )
{
	return bool2(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1]
	);
}

inline bool2 operator>( const uint2& lhs, const uint2& rhs )
{
	return bool2(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1]
	);
}

inline bool2 operator>=( const uint2& lhs, const uint2& rhs )
{
	return bool2(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1]
	);
}

inline uint2 operator&( const uint2& lhs, const uint32_t& rhs )
{
	return uint2(
		lhs[0] & rhs,
		lhs[1] & rhs
	);
}

inline uint2 operator&=( uint2& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint2 operator&( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] & rhs[0],
		lhs[1] & rhs[1]
	);
}

inline uint2 operator&=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint2 operator|( const uint2& lhs, const uint32_t& rhs )
{
	return uint2(
		lhs[0] | rhs,
		lhs[1] | rhs
	);
}

inline uint2 operator|=( uint2& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint2 operator|( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] | rhs[0],
		lhs[1] | rhs[1]
	);
}

inline uint2 operator|=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint2 operator^( const uint2& lhs, const uint32_t& rhs )
{
	return uint2(
		lhs[0] ^ rhs,
		lhs[1] ^ rhs
	);
}

inline uint2 operator^=( uint2& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint2 operator^( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] ^ rhs[0],
		lhs[1] ^ rhs[1]
	);
}

inline uint2 operator^=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint2 operator<<( const uint2& lhs, const uint32_t& rhs )
{
	return uint2(
		lhs[0] << rhs,
		lhs[1] << rhs
	);
}

inline uint2 operator<<=( uint2& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint2 operator<<( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] << rhs[0],
		lhs[1] << rhs[1]
	);
}

inline uint2 operator<<=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint2 operator>>( const uint2& lhs, const uint32_t& rhs )
{
	return uint2(
		lhs[0] >> rhs,
		lhs[1] >> rhs
	);
}

inline uint2 operator>>=( uint2& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs >> rhs );
}

inline uint2 operator>>( const uint2& lhs, const uint2& rhs )
{
	return uint2(
		lhs[0] >> rhs[0],
		lhs[1] >> rhs[1]
	);
}

inline uint2 operator>>=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates uint2
/// \brief Performs a unary bitwise operation on all components of the given uint2.
inline uint2 operator~( const uint2& lhs )
{
	return uint2(
		~lhs[0],
		~lhs[1]
	);
}


// uint3
inline uint3 operator+( const uint3& lhs, const uint32_t rhs )
{
	return uint3(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs
	);
}

inline uint3 operator+=( uint3& lhs, const uint32_t rhs )
{
	return ( lhs = lhs + rhs );
}

inline uint3 operator+( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2]
	);
}

inline uint3 operator+=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs + rhs );
}

inline uint3 operator-( const uint3& lhs, const uint32_t rhs )
{
	return uint3(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs
	);
}

inline uint3 operator-=( uint3& lhs, const uint32_t rhs )
{
	return ( lhs = lhs - rhs );
}

inline uint3 operator-( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2]
	);
}

inline uint3 operator-=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs - rhs );
}

inline uint3 operator*( const uint3& lhs, const uint32_t rhs )
{
	return uint3(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs
	);
}

inline uint3 operator*=( uint3& lhs, const uint32_t rhs )
{
	return ( lhs = lhs * rhs );
}

inline uint3 operator*( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2]
	);
}

inline uint3 operator*=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs * rhs );
}

inline uint3 operator/( const uint3& lhs, const uint32_t rhs )
{
	return uint3(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs
	);
}

inline uint3 operator/=( uint3& lhs, const uint32_t rhs )
{
	return ( lhs = lhs / rhs );
}

inline uint3 operator/( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2]
	);
}

inline uint3 operator/=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline uint3& operator++( uint3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
inline uint3& operator++( uint3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
inline uint3& operator--( uint3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
inline uint3& operator--( uint3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

inline bool3 operator<( const uint3& lhs, const uint3& rhs )
{
	return bool3(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2]
	);
}

inline bool3 operator<=( const uint3& lhs, const uint3& rhs )
{
	return bool3(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2]
	);
}

inline bool3 operator>( const uint3& lhs, const uint3& rhs )
{
	return bool3(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2]
	);
}

inline bool3 operator>=( const uint3& lhs, const uint3& rhs )
{
	return bool3(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2]
	);
}

inline uint3 operator&( const uint3& lhs, const uint32_t& rhs )
{
	return uint3(
		lhs[0] & rhs,
		lhs[1] & rhs,
		lhs[2] & rhs
	);
}

inline uint3 operator&=( uint3& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint3 operator&( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] & rhs[0],
		lhs[1] & rhs[1],
		lhs[2] & rhs[2]
	);
}

inline uint3 operator&=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint3 operator|( const uint3& lhs, const uint32_t& rhs )
{
	return uint3(
		lhs[0] | rhs,
		lhs[1] | rhs,
		lhs[2] | rhs
	);
}

inline uint3 operator|=( uint3& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint3 operator|( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] | rhs[0],
		lhs[1] | rhs[1],
		lhs[2] | rhs[2]
	);
}

inline uint3 operator|=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint3 operator^( const uint3& lhs, const uint32_t& rhs )
{
	return uint3(
		lhs[0] ^ rhs,
		lhs[1] ^ rhs,
		lhs[2] ^ rhs
	);
}

inline uint3 operator^=( uint3& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint3 operator^( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] ^ rhs[0],
		lhs[1] ^ rhs[1],
		lhs[2] ^ rhs[2]
	);
}

inline uint3 operator^=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint3 operator<<( const uint3& lhs, const uint32_t& rhs )
{
	return uint3(
		lhs[0] << rhs,
		lhs[1] << rhs,
		lhs[2] << rhs
	);
}

inline uint3 operator<<=( uint3& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint3 operator<<( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] << rhs[0],
		lhs[1] << rhs[1],
		lhs[2] << rhs[2]
	);
}

inline uint3 operator<<=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint3 operator>>( const uint3& lhs, const uint32_t& rhs )
{
	return uint3(
		lhs[0] >> rhs,
		lhs[1] >> rhs,
		lhs[2] >> rhs
	);
}

inline uint3 operator>>=( uint3& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs >> rhs );
}

inline uint3 operator>>( const uint3& lhs, const uint3& rhs )
{
	return uint3(
		lhs[0] >> rhs[0],
		lhs[1] >> rhs[1],
		lhs[2] >> rhs[2]
	);
}

inline uint3 operator>>=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates uint3
/// \brief Performs a unary bitwise operation on all components of the given uint3.
inline uint3 operator~( const uint3& lhs )
{
	return uint3(
		~lhs[0],
		~lhs[1],
		~lhs[2]
	);
}


// uint4
inline uint4 operator+( const uint4& lhs, const uint32_t rhs )
{
	return uint4(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs,
		lhs[3] + rhs
	);
}

inline uint4 operator+=( uint4& lhs, const uint32_t rhs )
{
	return ( lhs = lhs + rhs );
}

inline uint4 operator+( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2],
		lhs[3] + rhs[3]
	);
}

inline uint4 operator+=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs + rhs );
}

inline uint4 operator-( const uint4& lhs, const uint32_t rhs )
{
	return uint4(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs,
		lhs[3] - rhs
	);
}

inline uint4 operator-=( uint4& lhs, const uint32_t rhs )
{
	return ( lhs = lhs - rhs );
}

inline uint4 operator-( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2],
		lhs[3] - rhs[3]
	);
}

inline uint4 operator-=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs - rhs );
}

inline uint4 operator*( const uint4& lhs, const uint32_t rhs )
{
	return uint4(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs,
		lhs[3] * rhs
	);
}

inline uint4 operator*=( uint4& lhs, const uint32_t rhs )
{
	return ( lhs = lhs * rhs );
}

inline uint4 operator*( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2],
		lhs[3] * rhs[3]
	);
}

inline uint4 operator*=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs * rhs );
}

inline uint4 operator/( const uint4& lhs, const uint32_t rhs )
{
	return uint4(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs,
		lhs[3] / rhs
	);
}

inline uint4 operator/=( uint4& lhs, const uint32_t rhs )
{
	return ( lhs = lhs / rhs );
}

inline uint4 operator/( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2],
		lhs[3] / rhs[3]
	);
}

inline uint4 operator/=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline uint4& operator++( uint4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
inline uint4& operator++( uint4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
inline uint4& operator--( uint4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
inline uint4& operator--( uint4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

inline bool4 operator<( const uint4& lhs, const uint4& rhs )
{
	return bool4(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2],
		lhs[3] < rhs[3]
	);
}

inline bool4 operator<=( const uint4& lhs, const uint4& rhs )
{
	return bool4(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2],
		lhs[3] <= rhs[3]
	);
}

inline bool4 operator>( const uint4& lhs, const uint4& rhs )
{
	return bool4(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2],
		lhs[3] > rhs[3]
	);
}

inline bool4 operator>=( const uint4& lhs, const uint4& rhs )
{
	return bool4(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2],
		lhs[3] >= rhs[3]
	);
}

inline uint4 operator&( const uint4& lhs, const uint32_t& rhs )
{
	return uint4(
		lhs[0] & rhs,
		lhs[1] & rhs,
		lhs[2] & rhs,
		lhs[3] & rhs
	);
}

inline uint4 operator&=( uint4& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint4 operator&( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] & rhs[0],
		lhs[1] & rhs[1],
		lhs[2] & rhs[2],
		lhs[3] & rhs[3]
	);
}

inline uint4 operator&=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs & rhs );
}

inline uint4 operator|( const uint4& lhs, const uint32_t& rhs )
{
	return uint4(
		lhs[0] | rhs,
		lhs[1] | rhs,
		lhs[2] | rhs,
		lhs[3] | rhs
	);
}

inline uint4 operator|=( uint4& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint4 operator|( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] | rhs[0],
		lhs[1] | rhs[1],
		lhs[2] | rhs[2],
		lhs[3] | rhs[3]
	);
}

inline uint4 operator|=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs | rhs );
}

inline uint4 operator^( const uint4& lhs, const uint32_t& rhs )
{
	return uint4(
		lhs[0] ^ rhs,
		lhs[1] ^ rhs,
		lhs[2] ^ rhs,
		lhs[3] ^ rhs
	);
}

inline uint4 operator^=( uint4& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint4 operator^( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] ^ rhs[0],
		lhs[1] ^ rhs[1],
		lhs[2] ^ rhs[2],
		lhs[3] ^ rhs[3]
	);
}

inline uint4 operator^=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs ^ rhs );
}

inline uint4 operator<<( const uint4& lhs, const uint32_t& rhs )
{
	return uint4(
		lhs[0] << rhs,
		lhs[1] << rhs,
		lhs[2] << rhs,
		lhs[3] << rhs
	);
}

inline uint4 operator<<=( uint4& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint4 operator<<( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] << rhs[0],
		lhs[1] << rhs[1],
		lhs[2] << rhs[2],
		lhs[3] << rhs[3]
	);
}

inline uint4 operator<<=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs << rhs );
}

inline uint4 operator>>( const uint4& lhs, const uint32_t& rhs )
{
	return uint4(
		lhs[0] >> rhs,
		lhs[1] >> rhs,
		lhs[2] >> rhs,
		lhs[3] >> rhs
	);
}

inline uint4 operator>>=( uint4& lhs, const uint32_t& rhs )
{
	return ( lhs = lhs >> rhs );
}

inline uint4 operator>>( const uint4& lhs, const uint4& rhs )
{
	return uint4(
		lhs[0] >> rhs[0],
		lhs[1] >> rhs[1],
		lhs[2] >> rhs[2],
		lhs[3] >> rhs[3]
	);
}

inline uint4 operator>>=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs >> rhs );
}

/// \relates uint4
/// \brief Performs a unary bitwise operation on all components of the given uint4.
inline uint4 operator~( const uint4& lhs )
{
	return uint4(
		~lhs[0],
		~lhs[1],
		~lhs[2],
		~lhs[3]
	);
}


// float2
inline float2 operator+( const float2& lhs, const float rhs )
{
	return float2(
		lhs[0] + rhs,
		lhs[1] + rhs
	);
}

inline float2 operator+=( float2& lhs, const float rhs )
{
	return ( lhs = lhs + rhs );
}

inline float2 operator+( const float2& lhs, const float2& rhs )
{
	return float2(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1]
	);
}

inline float2 operator+=( float2& lhs, const float2& rhs )
{
	return ( lhs = lhs + rhs );
}

inline float2 operator-( const float2& lhs, const float rhs )
{
	return float2(
		lhs[0] - rhs,
		lhs[1] - rhs
	);
}

inline float2 operator-=( float2& lhs, const float rhs )
{
	return ( lhs = lhs - rhs );
}

inline float2 operator-( const float2& lhs, const float2& rhs )
{
	return float2(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1]
	);
}

inline float2 operator-=( float2& lhs, const float2& rhs )
{
	return ( lhs = lhs - rhs );
}

inline float2 operator*( const float2& lhs, const float rhs )
{
	return float2(
		lhs[0] * rhs,
		lhs[1] * rhs
	);
}

inline float2 operator*=( float2& lhs, const float rhs )
{
	return ( lhs = lhs * rhs );
}

inline float2 operator*( const float2& lhs, const float2& rhs )
{
	return float2(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1]
	);
}

inline float2 operator*=( float2& lhs, const float2& rhs )
{
	return ( lhs = lhs * rhs );
}

inline float2 operator/( const float2& lhs, const float rhs )
{
	return float2(
		lhs[0] / rhs,
		lhs[1] / rhs
	);
}

inline float2 operator/=( float2& lhs, const float rhs )
{
	return ( lhs = lhs / rhs );
}

inline float2 operator/( const float2& lhs, const float2& rhs )
{
	return float2(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1]
	);
}

inline float2 operator/=( float2& lhs, const float2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline float2& operator++( float2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
inline float2& operator++( float2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
inline float2& operator--( float2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
inline float2& operator--( float2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

inline bool2 operator<( const float2& lhs, const float2& rhs )
{
	return bool2(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1]
	);
}

inline bool2 operator<=( const float2& lhs, const float2& rhs )
{
	return bool2(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1]
	);
}

inline bool2 operator>( const float2& lhs, const float2& rhs )
{
	return bool2(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1]
	);
}

inline bool2 operator>=( const float2& lhs, const float2& rhs )
{
	return bool2(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1]
	);
}


// float3
inline float3 operator+( const float3& lhs, const float rhs )
{
	return float3(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs
	);
}

inline float3 operator+=( float3& lhs, const float rhs )
{
	return ( lhs = lhs + rhs );
}

inline float3 operator+( const float3& lhs, const float3& rhs )
{
	return float3(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2]
	);
}

inline float3 operator+=( float3& lhs, const float3& rhs )
{
	return ( lhs = lhs + rhs );
}

inline float3 operator-( const float3& lhs, const float rhs )
{
	return float3(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs
	);
}

inline float3 operator-=( float3& lhs, const float rhs )
{
	return ( lhs = lhs - rhs );
}

inline float3 operator-( const float3& lhs, const float3& rhs )
{
	return float3(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2]
	);
}

inline float3 operator-=( float3& lhs, const float3& rhs )
{
	return ( lhs = lhs - rhs );
}

inline float3 operator*( const float3& lhs, const float rhs )
{
	return float3(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs
	);
}

inline float3 operator*=( float3& lhs, const float rhs )
{
	return ( lhs = lhs * rhs );
}

inline float3 operator*( const float3& lhs, const float3& rhs )
{
	return float3(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2]
	);
}

inline float3 operator*=( float3& lhs, const float3& rhs )
{
	return ( lhs = lhs * rhs );
}

inline float3 operator/( const float3& lhs, const float rhs )
{
	return float3(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs
	);
}

inline float3 operator/=( float3& lhs, const float rhs )
{
	return ( lhs = lhs / rhs );
}

inline float3 operator/( const float3& lhs, const float3& rhs )
{
	return float3(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2]
	);
}

inline float3 operator/=( float3& lhs, const float3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline float3& operator++( float3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
inline float3& operator++( float3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
inline float3& operator--( float3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
inline float3& operator--( float3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

inline bool3 operator<( const float3& lhs, const float3& rhs )
{
	return bool3(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2]
	);
}

inline bool3 operator<=( const float3& lhs, const float3& rhs )
{
	return bool3(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2]
	);
}

inline bool3 operator>( const float3& lhs, const float3& rhs )
{
	return bool3(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2]
	);
}

inline bool3 operator>=( const float3& lhs, const float3& rhs )
{
	return bool3(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2]
	);
}


// float4
inline float4 operator+( const float4& lhs, const float rhs )
{
	return float4(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs,
		lhs[3] + rhs
	);
}

inline float4 operator+=( float4& lhs, const float rhs )
{
	return ( lhs = lhs + rhs );
}

inline float4 operator+( const float4& lhs, const float4& rhs )
{
	return float4(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2],
		lhs[3] + rhs[3]
	);
}

inline float4 operator+=( float4& lhs, const float4& rhs )
{
	return ( lhs = lhs + rhs );
}

inline float4 operator-( const float4& lhs, const float rhs )
{
	return float4(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs,
		lhs[3] - rhs
	);
}

inline float4 operator-=( float4& lhs, const float rhs )
{
	return ( lhs = lhs - rhs );
}

inline float4 operator-( const float4& lhs, const float4& rhs )
{
	return float4(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2],
		lhs[3] - rhs[3]
	);
}

inline float4 operator-=( float4& lhs, const float4& rhs )
{
	return ( lhs = lhs - rhs );
}

inline float4 operator*( const float4& lhs, const float rhs )
{
	return float4(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs,
		lhs[3] * rhs
	);
}

inline float4 operator*=( float4& lhs, const float rhs )
{
	return ( lhs = lhs * rhs );
}

inline float4 operator*( const float4& lhs, const float4& rhs )
{
	return float4(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2],
		lhs[3] * rhs[3]
	);
}

inline float4 operator*=( float4& lhs, const float4& rhs )
{
	return ( lhs = lhs * rhs );
}

inline float4 operator/( const float4& lhs, const float rhs )
{
	return float4(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs,
		lhs[3] / rhs
	);
}

inline float4 operator/=( float4& lhs, const float rhs )
{
	return ( lhs = lhs / rhs );
}

inline float4 operator/( const float4& lhs, const float4& rhs )
{
	return float4(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2],
		lhs[3] / rhs[3]
	);
}

inline float4 operator/=( float4& lhs, const float4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline float4& operator++( float4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
inline float4& operator++( float4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
inline float4& operator--( float4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
inline float4& operator--( float4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

inline bool4 operator<( const float4& lhs, const float4& rhs )
{
	return bool4(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2],
		lhs[3] < rhs[3]
	);
}

inline bool4 operator<=( const float4& lhs, const float4& rhs )
{
	return bool4(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2],
		lhs[3] <= rhs[3]
	);
}

inline bool4 operator>( const float4& lhs, const float4& rhs )
{
	return bool4(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2],
		lhs[3] > rhs[3]
	);
}

inline bool4 operator>=( const float4& lhs, const float4& rhs )
{
	return bool4(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2],
		lhs[3] >= rhs[3]
	);
}


// double2
inline double2 operator+( const double2& lhs, const double rhs )
{
	return double2(
		lhs[0] + rhs,
		lhs[1] + rhs
	);
}

inline double2 operator+=( double2& lhs, const double rhs )
{
	return ( lhs = lhs + rhs );
}

inline double2 operator+( const double2& lhs, const double2& rhs )
{
	return double2(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1]
	);
}

inline double2 operator+=( double2& lhs, const double2& rhs )
{
	return ( lhs = lhs + rhs );
}

inline double2 operator-( const double2& lhs, const double rhs )
{
	return double2(
		lhs[0] - rhs,
		lhs[1] - rhs
	);
}

inline double2 operator-=( double2& lhs, const double rhs )
{
	return ( lhs = lhs - rhs );
}

inline double2 operator-( const double2& lhs, const double2& rhs )
{
	return double2(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1]
	);
}

inline double2 operator-=( double2& lhs, const double2& rhs )
{
	return ( lhs = lhs - rhs );
}

inline double2 operator*( const double2& lhs, const double rhs )
{
	return double2(
		lhs[0] * rhs,
		lhs[1] * rhs
	);
}

inline double2 operator*=( double2& lhs, const double rhs )
{
	return ( lhs = lhs * rhs );
}

inline double2 operator*( const double2& lhs, const double2& rhs )
{
	return double2(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1]
	);
}

inline double2 operator*=( double2& lhs, const double2& rhs )
{
	return ( lhs = lhs * rhs );
}

inline double2 operator/( const double2& lhs, const double rhs )
{
	return double2(
		lhs[0] / rhs,
		lhs[1] / rhs
	);
}

inline double2 operator/=( double2& lhs, const double rhs )
{
	return ( lhs = lhs / rhs );
}

inline double2 operator/( const double2& lhs, const double2& rhs )
{
	return double2(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1]
	);
}

inline double2 operator/=( double2& lhs, const double2& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline double2& operator++( double2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

// postfix
inline double2& operator++( double2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

// prefix
inline double2& operator--( double2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

// postfix
inline double2& operator--( double2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

inline bool2 operator<( const double2& lhs, const double2& rhs )
{
	return bool2(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1]
	);
}

inline bool2 operator<=( const double2& lhs, const double2& rhs )
{
	return bool2(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1]
	);
}

inline bool2 operator>( const double2& lhs, const double2& rhs )
{
	return bool2(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1]
	);
}

inline bool2 operator>=( const double2& lhs, const double2& rhs )
{
	return bool2(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1]
	);
}


// double3
inline double3 operator+( const double3& lhs, const double rhs )
{
	return double3(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs
	);
}

inline double3 operator+=( double3& lhs, const double rhs )
{
	return ( lhs = lhs + rhs );
}

inline double3 operator+( const double3& lhs, const double3& rhs )
{
	return double3(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2]
	);
}

inline double3 operator+=( double3& lhs, const double3& rhs )
{
	return ( lhs = lhs + rhs );
}

inline double3 operator-( const double3& lhs, const double rhs )
{
	return double3(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs
	);
}

inline double3 operator-=( double3& lhs, const double rhs )
{
	return ( lhs = lhs - rhs );
}

inline double3 operator-( const double3& lhs, const double3& rhs )
{
	return double3(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2]
	);
}

inline double3 operator-=( double3& lhs, const double3& rhs )
{
	return ( lhs = lhs - rhs );
}

inline double3 operator*( const double3& lhs, const double rhs )
{
	return double3(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs
	);
}

inline double3 operator*=( double3& lhs, const double rhs )
{
	return ( lhs = lhs * rhs );
}

inline double3 operator*( const double3& lhs, const double3& rhs )
{
	return double3(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2]
	);
}

inline double3 operator*=( double3& lhs, const double3& rhs )
{
	return ( lhs = lhs * rhs );
}

inline double3 operator/( const double3& lhs, const double rhs )
{
	return double3(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs
	);
}

inline double3 operator/=( double3& lhs, const double rhs )
{
	return ( lhs = lhs / rhs );
}

inline double3 operator/( const double3& lhs, const double3& rhs )
{
	return double3(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2]
	);
}

inline double3 operator/=( double3& lhs, const double3& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline double3& operator++( double3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

// postfix
inline double3& operator++( double3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

// prefix
inline double3& operator--( double3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

// postfix
inline double3& operator--( double3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

inline bool3 operator<( const double3& lhs, const double3& rhs )
{
	return bool3(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2]
	);
}

inline bool3 operator<=( const double3& lhs, const double3& rhs )
{
	return bool3(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2]
	);
}

inline bool3 operator>( const double3& lhs, const double3& rhs )
{
	return bool3(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2]
	);
}

inline bool3 operator>=( const double3& lhs, const double3& rhs )
{
	return bool3(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2]
	);
}


// double4
inline double4 operator+( const double4& lhs, const double rhs )
{
	return double4(
		lhs[0] + rhs,
		lhs[1] + rhs,
		lhs[2] + rhs,
		lhs[3] + rhs
	);
}

inline double4 operator+=( double4& lhs, const double rhs )
{
	return ( lhs = lhs + rhs );
}

inline double4 operator+( const double4& lhs, const double4& rhs )
{
	return double4(
		lhs[0] + rhs[0],
		lhs[1] + rhs[1],
		lhs[2] + rhs[2],
		lhs[3] + rhs[3]
	);
}

inline double4 operator+=( double4& lhs, const double4& rhs )
{
	return ( lhs = lhs + rhs );
}

inline double4 operator-( const double4& lhs, const double rhs )
{
	return double4(
		lhs[0] - rhs,
		lhs[1] - rhs,
		lhs[2] - rhs,
		lhs[3] - rhs
	);
}

inline double4 operator-=( double4& lhs, const double rhs )
{
	return ( lhs = lhs - rhs );
}

inline double4 operator-( const double4& lhs, const double4& rhs )
{
	return double4(
		lhs[0] - rhs[0],
		lhs[1] - rhs[1],
		lhs[2] - rhs[2],
		lhs[3] - rhs[3]
	);
}

inline double4 operator-=( double4& lhs, const double4& rhs )
{
	return ( lhs = lhs - rhs );
}

inline double4 operator*( const double4& lhs, const double rhs )
{
	return double4(
		lhs[0] * rhs,
		lhs[1] * rhs,
		lhs[2] * rhs,
		lhs[3] * rhs
	);
}

inline double4 operator*=( double4& lhs, const double rhs )
{
	return ( lhs = lhs * rhs );
}

inline double4 operator*( const double4& lhs, const double4& rhs )
{
	return double4(
		lhs[0] * rhs[0],
		lhs[1] * rhs[1],
		lhs[2] * rhs[2],
		lhs[3] * rhs[3]
	);
}

inline double4 operator*=( double4& lhs, const double4& rhs )
{
	return ( lhs = lhs * rhs );
}

inline double4 operator/( const double4& lhs, const double rhs )
{
	return double4(
		lhs[0] / rhs,
		lhs[1] / rhs,
		lhs[2] / rhs,
		lhs[3] / rhs
	);
}

inline double4 operator/=( double4& lhs, const double rhs )
{
	return ( lhs = lhs / rhs );
}

inline double4 operator/( const double4& lhs, const double4& rhs )
{
	return double4(
		lhs[0] / rhs[0],
		lhs[1] / rhs[1],
		lhs[2] / rhs[2],
		lhs[3] / rhs[3]
	);
}

inline double4 operator/=( double4& lhs, const double4& rhs )
{
	return ( lhs = lhs / rhs );
}

// prefix
inline double4& operator++( double4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

// postfix
inline double4& operator++( double4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

// prefix
inline double4& operator--( double4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

// postfix
inline double4& operator--( double4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

inline bool4 operator<( const double4& lhs, const double4& rhs )
{
	return bool4(
		lhs[0] < rhs[0],
		lhs[1] < rhs[1],
		lhs[2] < rhs[2],
		lhs[3] < rhs[3]
	);
}

inline bool4 operator<=( const double4& lhs, const double4& rhs )
{
	return bool4(
		lhs[0] <= rhs[0],
		lhs[1] <= rhs[1],
		lhs[2] <= rhs[2],
		lhs[3] <= rhs[3]
	);
}

inline bool4 operator>( const double4& lhs, const double4& rhs )
{
	return bool4(
		lhs[0] > rhs[0],
		lhs[1] > rhs[1],
		lhs[2] > rhs[2],
		lhs[3] > rhs[3]
	);
}

inline bool4 operator>=( const double4& lhs, const double4& rhs )
{
	return bool4(
		lhs[0] >= rhs[0],
		lhs[1] >= rhs[1],
		lhs[2] >= rhs[2],
		lhs[3] >= rhs[3]
	);
}


