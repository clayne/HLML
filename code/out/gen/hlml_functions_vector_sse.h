/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include <immintrin.h>

// float2
struct float2_sse_t
{
	__m128 comp[2];
};

/// \relates float2
/// \brief Finds the squared length of each input vector and stores it in its respective component in the output register.
inline void lengthsq_sse( const float2_sse_t* in, __m128* out_results );

/// \relates float2
/// \brief Finds the length of each input vector and stores it in its respective component in the output register.
inline void length_sse( const float2_sse_t* in, __m128* out_results );

/// \relates float2
/// \brief Normalizes each input array element and stores the normalized result in the corresponding element in the output.
inline void normalize_sse( const float2_sse_t* in, float2_sse_t* out );

/// \relates float2
/// \brief Performs a dot-product on each index of the left-hand-side and right-hand-side registers, respectively, and stores the result in its respective component in the output register.
inline void dot_sse( const float2_sse_t* lhs, const float2_sse_t* rhs, __m128* out_results );

/// \relates float2
/// \brief Finds the squared distance between each vector and stores the result in its respective component in the output register.
inline void distancesq_sse( const float2_sse_t* lhs, const float2_sse_t* rhs, __m128* out_results );

/// \relates float2
/// \brief Finds the distance between each vector and stores the result in its respective component in the output register.
inline void distance_sse( const float2_sse_t* lhs, const float2_sse_t* rhs, __m128* out_results );


// float3
struct float3_sse_t
{
	__m128 comp[3];
};

/// \relates float3
/// \brief Finds the squared length of each input vector and stores it in its respective component in the output register.
inline void lengthsq_sse( const float3_sse_t* in, __m128* out_results );

/// \relates float3
/// \brief Finds the length of each input vector and stores it in its respective component in the output register.
inline void length_sse( const float3_sse_t* in, __m128* out_results );

/// \relates float3
/// \brief Normalizes each input array element and stores the normalized result in the corresponding element in the output.
inline void normalize_sse( const float3_sse_t* in, float3_sse_t* out );

/// \relates float3
/// \brief Performs a dot-product on each index of the left-hand-side and right-hand-side registers, respectively, and stores the result in its respective component in the output register.
inline void dot_sse( const float3_sse_t* lhs, const float3_sse_t* rhs, __m128* out_results );

/// \relates float3
/// \brief Stores the cross product of register vectors lhs and rhs into out_results.
inline void cross_sse( const float3_sse_t* lhs, const float3_sse_t* rhs, float3_sse_t* out_results );

/// \relates float3
/// \brief Finds the squared distance between each vector and stores the result in its respective component in the output register.
inline void distancesq_sse( const float3_sse_t* lhs, const float3_sse_t* rhs, __m128* out_results );

/// \relates float3
/// \brief Finds the distance between each vector and stores the result in its respective component in the output register.
inline void distance_sse( const float3_sse_t* lhs, const float3_sse_t* rhs, __m128* out_results );


// float4
struct float4_sse_t
{
	__m128 comp[4];
};

/// \relates float4
/// \brief Finds the squared length of each input vector and stores it in its respective component in the output register.
inline void lengthsq_sse( const float4_sse_t* in, __m128* out_results );

/// \relates float4
/// \brief Finds the length of each input vector and stores it in its respective component in the output register.
inline void length_sse( const float4_sse_t* in, __m128* out_results );

/// \relates float4
/// \brief Normalizes each input array element and stores the normalized result in the corresponding element in the output.
inline void normalize_sse( const float4_sse_t* in, float4_sse_t* out );

/// \relates float4
/// \brief Performs a dot-product on each index of the left-hand-side and right-hand-side registers, respectively, and stores the result in its respective component in the output register.
inline void dot_sse( const float4_sse_t* lhs, const float4_sse_t* rhs, __m128* out_results );

/// \relates float4
/// \brief Stores the cross product of register vectors lhs and rhs into out_results.
inline void cross_sse( const float4_sse_t* lhs, const float4_sse_t* rhs, float4_sse_t* out_results );

/// \relates float4
/// \brief Finds the squared distance between each vector and stores the result in its respective component in the output register.
inline void distancesq_sse( const float4_sse_t* lhs, const float4_sse_t* rhs, __m128* out_results );

/// \relates float4
/// \brief Finds the distance between each vector and stores the result in its respective component in the output register.
inline void distance_sse( const float4_sse_t* lhs, const float4_sse_t* rhs, __m128* out_results );


#include "hlml_functions_vector_sse.inl"
