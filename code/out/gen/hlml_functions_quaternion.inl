/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#include "hlml_functions_vector.h"
#include "hlml_operators_matrix.h"

// float4x4
float quaternion_mul( const float4& lhs, const float4& rhs )
{
	float scalar = lhs.w * rhs.w - dot(float3(lhs), float3(rhs));
	float3 imaginary = float3(rhs) * lhs.w + float3(lhs) * rhs.w + cross(float3(lhs), float3(rhs));
	return float4(imaginary.x, imaginary.y, imaginary.z, scalar.w);
}

float quaternion_mul( const float4& lhs, const float& rhs )
{
	float scalar = lhs.w * rhs;
	float3 imaginary = float3(lhs) * rhs;
	return float4(imaginary.x, imaginary.y, imaginary.z, scalar.w);
}

float quaternion_magnitude( const float4& quat )
{
	return sqrt(( quat.x * quat.x ) + ( quat.y * quat.y ) + ( quat.z * quat.z ) + ( quat.w * quat.w ));
}

float4 quaternion_normalize( const float4& quat )
{
	float3 normV;
	float normS;
	float mag = quaternion_magnitude(quat);
	if (mag != 0)
	{
		float magInverse = 1.0f / mag;
		float3 normV *= magInverse;
		float normS *= magInverse;
	}
	return float4(normV.x, normV.y, normV.z, normS);
}

float4 quaternion_conjugate( const float4& quat )
{
	return float4( ( quat.x * ( -1 ) ), ( quat.y * ( -1 ) ), ( quat.z * ( -1 ) ), quat.w );
}


// double4x4
double quaternion_mul( const double4& lhs, const double4& rhs )
{
	double scalar = lhs.w * rhs.w - dot(double3(lhs), double3(rhs));
	double3 imaginary = double3(rhs) * lhs.w + double3(lhs) * rhs.w + cross(double3(lhs), double3(rhs));
	return double4(imaginary.x, imaginary.y, imaginary.z, scalar.w);
}

double quaternion_mul( const double4& lhs, const double& rhs )
{
	double scalar = lhs.w * rhs;
	double3 imaginary = double3(lhs) * rhs;
	return double4(imaginary.x, imaginary.y, imaginary.z, scalar.w);
}

double quaternion_magnitude( const double4& quat )
{
	return sqrt(( quat.x * quat.x ) + ( quat.y * quat.y ) + ( quat.z * quat.z ) + ( quat.w * quat.w ));
}

double4 quaternion_normalize( const double4& quat )
{
	double3 normV;
	double normS;
	double mag = quaternion_magnitude(quat);
	if (mag != 0)
	{
		double magInverse = 1.0f / mag;
		double3 normV *= magInverse;
		double normS *= magInverse;
	}
	return double4(normV.x, normV.y, normV.z, normS);
}

double4 quaternion_conjugate( const double4& quat )
{
	return double4( ( quat.x * ( -1 ) ), ( quat.y * ( -1 ) ), ( quat.z * ( -1 ) ), quat.w );
}


