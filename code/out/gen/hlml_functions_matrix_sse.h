/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include <immintrin.h>

#include "hlml_functions_vector_sse.h"

/// \brief Changes the sign of the values in the register.
#define _NEGATE_PS( reg ) _mm_sub_ps( HLML_ZERO_SSE, (reg) )

struct float2x2_sse_t;
struct float2x3_sse_t;
struct float2x4_sse_t;
struct float3x2_sse_t;
struct float3x3_sse_t;
struct float3x4_sse_t;
struct float4x2_sse_t;
struct float4x3_sse_t;
struct float4x4_sse_t;

// float2x2
struct float2x2_sse_t
{
	__m128 m[2][2];
};

/// \relates float2x2
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float2x2_sse_t* mat );

/// \relates float2x2
/// \brief Stores a transposed matrix of 2 x 2 __m128 registers in the output given the input 2 x 2 register matrix.
inline void transpose_sse( const float2x2_sse_t* in, float2x2_sse_t* out );

/// \relates float2x2
/// \brief Stores the determinants of a matrix of 2 x 2 __m128 registers.
inline void determinant_sse( const float2x2_sse_t* in, __m128* out_result );

/// \relates float2x2
/// \brief Stores an inverted matrix of 2 x 2 __m128 registers.
inline void inverse_sse( const float2x2_sse_t* in, float2x2_sse_t* out );

/// \relates float2x2
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float2x2_sse_t* lhs, const float2x2_sse_t* rhs, float2x2_sse_t* out );

/// \relates float2x2
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float2x2_sse_t* lhs, const float2x2_sse_t* rhs, float2x2_sse_t* out );

/// \relates float2x2
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float2x2_sse_t* lhs, const float2x2_sse_t* rhs, float2x2_sse_t* out );

/// \relates float2x2
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float2x2_sse_t* lhs, const float2x2_sse_t* rhs, float2x2_sse_t* out );

inline void mul_sse( const float2x2_sse_t* lhs, const float2x2_sse_t* rhs, float2x2_sse_t* out );


// float2x3
struct float2x3_sse_t
{
	__m128 m[2][3];
};

/// \relates float2x3
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float2x3_sse_t* mat );

/// \relates float2x3
/// \brief Stores a transposed matrix of 3 x 2 __m128 registers in the output given the input 2 x 3 register matrix.
inline void transpose_sse( const float2x3_sse_t* in, float3x2_sse_t* out );

/// \relates float2x3
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float2x3_sse_t* lhs, const float2x3_sse_t* rhs, float2x3_sse_t* out );

/// \relates float2x3
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float2x3_sse_t* lhs, const float2x3_sse_t* rhs, float2x3_sse_t* out );

/// \relates float2x3
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float2x3_sse_t* lhs, const float2x3_sse_t* rhs, float2x3_sse_t* out );

/// \relates float2x3
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float2x3_sse_t* lhs, const float2x3_sse_t* rhs, float2x3_sse_t* out );

inline void mul_sse( const float2x3_sse_t* lhs, const float3x2_sse_t* rhs, float2x2_sse_t* out );


// float2x4
struct float2x4_sse_t
{
	__m128 m[2][4];
};

/// \relates float2x4
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float2x4_sse_t* mat );

/// \relates float2x4
/// \brief Stores a transposed matrix of 4 x 2 __m128 registers in the output given the input 2 x 4 register matrix.
inline void transpose_sse( const float2x4_sse_t* in, float4x2_sse_t* out );

/// \relates float2x4
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float2x4_sse_t* lhs, const float2x4_sse_t* rhs, float2x4_sse_t* out );

/// \relates float2x4
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float2x4_sse_t* lhs, const float2x4_sse_t* rhs, float2x4_sse_t* out );

/// \relates float2x4
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float2x4_sse_t* lhs, const float2x4_sse_t* rhs, float2x4_sse_t* out );

/// \relates float2x4
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float2x4_sse_t* lhs, const float2x4_sse_t* rhs, float2x4_sse_t* out );

inline void mul_sse( const float2x4_sse_t* lhs, const float4x2_sse_t* rhs, float2x2_sse_t* out );


// float3x2
struct float3x2_sse_t
{
	__m128 m[3][2];
};

/// \relates float3x2
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float3x2_sse_t* mat );

/// \relates float3x2
/// \brief Stores a transposed matrix of 2 x 3 __m128 registers in the output given the input 3 x 2 register matrix.
inline void transpose_sse( const float3x2_sse_t* in, float2x3_sse_t* out );

/// \relates float3x2
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float3x2_sse_t* lhs, const float3x2_sse_t* rhs, float3x2_sse_t* out );

/// \relates float3x2
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float3x2_sse_t* lhs, const float3x2_sse_t* rhs, float3x2_sse_t* out );

/// \relates float3x2
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float3x2_sse_t* lhs, const float3x2_sse_t* rhs, float3x2_sse_t* out );

/// \relates float3x2
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float3x2_sse_t* lhs, const float3x2_sse_t* rhs, float3x2_sse_t* out );

inline void mul_sse( const float3x2_sse_t* lhs, const float2x3_sse_t* rhs, float3x3_sse_t* out );


// float3x3
struct float3x3_sse_t
{
	__m128 m[3][3];
};

/// \relates float3x3
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float3x3_sse_t* mat );

/// \relates float3x3
/// \brief Stores a transposed matrix of 3 x 3 __m128 registers in the output given the input 3 x 3 register matrix.
inline void transpose_sse( const float3x3_sse_t* in, float3x3_sse_t* out );

/// \relates float3x3
/// \brief Stores the determinants of a matrix of 3 x 3 __m128 registers.
inline void determinant_sse( const float3x3_sse_t* in, __m128* out_result );

/// \relates float3x3
/// \brief Stores an inverted matrix of 3 x 3 __m128 registers.
inline void inverse_sse( const float3x3_sse_t* in, float3x3_sse_t* out );

/// \relates float3x3
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float3x3_sse_t* lhs, const float3x3_sse_t* rhs, float3x3_sse_t* out );

/// \relates float3x3
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float3x3_sse_t* lhs, const float3x3_sse_t* rhs, float3x3_sse_t* out );

/// \relates float3x3
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float3x3_sse_t* lhs, const float3x3_sse_t* rhs, float3x3_sse_t* out );

/// \relates float3x3
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float3x3_sse_t* lhs, const float3x3_sse_t* rhs, float3x3_sse_t* out );

inline void mul_sse( const float3x3_sse_t* lhs, const float3x3_sse_t* rhs, float3x3_sse_t* out );

/// \relates float3x3
/// \brief Stores a last matrix column that has been translated by the given __m128 register vector in the input.
inline void translate_sse( const float2_sse_t* column, const float2_sse_t* vec, float2_sse_t* out_column );

/// \relates float3x3
/// \brief Stores an array of float3x3 diagonals that have been scaled by the given vector in the input.
inline void scale_sse( const float2_sse_t* diagonal, const float2_sse_t* scale, float2_sse_t* out_diagonal );


// float3x4
struct float3x4_sse_t
{
	__m128 m[3][4];
};

/// \relates float3x4
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float3x4_sse_t* mat );

/// \relates float3x4
/// \brief Stores a transposed matrix of 4 x 3 __m128 registers in the output given the input 3 x 4 register matrix.
inline void transpose_sse( const float3x4_sse_t* in, float4x3_sse_t* out );

/// \relates float3x4
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float3x4_sse_t* lhs, const float3x4_sse_t* rhs, float3x4_sse_t* out );

/// \relates float3x4
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float3x4_sse_t* lhs, const float3x4_sse_t* rhs, float3x4_sse_t* out );

/// \relates float3x4
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float3x4_sse_t* lhs, const float3x4_sse_t* rhs, float3x4_sse_t* out );

/// \relates float3x4
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float3x4_sse_t* lhs, const float3x4_sse_t* rhs, float3x4_sse_t* out );

inline void mul_sse( const float3x4_sse_t* lhs, const float4x3_sse_t* rhs, float3x3_sse_t* out );


// float4x2
struct float4x2_sse_t
{
	__m128 m[4][2];
};

/// \relates float4x2
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float4x2_sse_t* mat );

/// \relates float4x2
/// \brief Stores a transposed matrix of 2 x 4 __m128 registers in the output given the input 4 x 2 register matrix.
inline void transpose_sse( const float4x2_sse_t* in, float2x4_sse_t* out );

/// \relates float4x2
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float4x2_sse_t* lhs, const float4x2_sse_t* rhs, float4x2_sse_t* out );

/// \relates float4x2
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float4x2_sse_t* lhs, const float4x2_sse_t* rhs, float4x2_sse_t* out );

/// \relates float4x2
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float4x2_sse_t* lhs, const float4x2_sse_t* rhs, float4x2_sse_t* out );

/// \relates float4x2
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float4x2_sse_t* lhs, const float4x2_sse_t* rhs, float4x2_sse_t* out );

inline void mul_sse( const float4x2_sse_t* lhs, const float2x4_sse_t* rhs, float4x4_sse_t* out );


// float4x3
struct float4x3_sse_t
{
	__m128 m[4][3];
};

/// \relates float4x3
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float4x3_sse_t* mat );

/// \relates float4x3
/// \brief Stores a transposed matrix of 3 x 4 __m128 registers in the output given the input 4 x 3 register matrix.
inline void transpose_sse( const float4x3_sse_t* in, float3x4_sse_t* out );

/// \relates float4x3
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float4x3_sse_t* lhs, const float4x3_sse_t* rhs, float4x3_sse_t* out );

/// \relates float4x3
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float4x3_sse_t* lhs, const float4x3_sse_t* rhs, float4x3_sse_t* out );

/// \relates float4x3
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float4x3_sse_t* lhs, const float4x3_sse_t* rhs, float4x3_sse_t* out );

/// \relates float4x3
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float4x3_sse_t* lhs, const float4x3_sse_t* rhs, float4x3_sse_t* out );

inline void mul_sse( const float4x3_sse_t* lhs, const float3x4_sse_t* rhs, float4x4_sse_t* out );


// float4x4
struct float4x4_sse_t
{
	__m128 m[4][4];
};

/// \relates float4x4
/// \brief Sets a matrix of __m128 registers to identity.
inline void identity_sse( float4x4_sse_t* mat );

/// \relates float4x4
/// \brief Stores a transposed matrix of 4 x 4 __m128 registers in the output given the input 4 x 4 register matrix.
inline void transpose_sse( const float4x4_sse_t* in, float4x4_sse_t* out );

/// \relates float4x4
/// \brief Stores the determinants of a matrix of 4 x 4 __m128 registers.
inline void determinant_sse( const float4x4_sse_t* in, __m128* out_result );

/// \relates float4x4
/// \brief Stores an inverted matrix of 4 x 4 __m128 registers.
inline void inverse_sse( const float4x4_sse_t* in, float4x4_sse_t* out );

/// \relates float4x4
/// \brief Stores a matrix that is the result of the component-wise addition between the lhs and rhs __m128 registers of the input.
inline void comp_add_sse( const float4x4_sse_t* lhs, const float4x4_sse_t* rhs, float4x4_sse_t* out );

/// \relates float4x4
/// \brief Stores a matrix that is the result of the component-wise subtraction between the lhs and rhs __m128 registers of the input.
inline void comp_sub_sse( const float4x4_sse_t* lhs, const float4x4_sse_t* rhs, float4x4_sse_t* out );

/// \relates float4x4
/// \brief Stores a matrix that is the result of the component-wise multiplication between the lhs and rhs __m128 registers of the input.
inline void comp_mul_sse( const float4x4_sse_t* lhs, const float4x4_sse_t* rhs, float4x4_sse_t* out );

/// \relates float4x4
/// \brief Stores a matrix that is the result of the component-wise division between the lhs and rhs __m128 registers of the input.
inline void comp_div_sse( const float4x4_sse_t* lhs, const float4x4_sse_t* rhs, float4x4_sse_t* out );

inline void mul_sse( const float4x4_sse_t* lhs, const float4x4_sse_t* rhs, float4x4_sse_t* out );

/// \relates float4x4
/// \brief Stores a last matrix column that has been translated by the given __m128 register vector in the input.
inline void translate_sse( const float3_sse_t* column, const float3_sse_t* vec, float3_sse_t* out_column );

/// \relates float4x4
/// \brief Stores an array of float4x4 diagonals that have been scaled by the given vector in the input.
inline void scale_sse( const float3_sse_t* diagonal, const float3_sse_t* scale, float3_sse_t* out_diagonal );


#include "hlml_functions_matrix_sse.inl"
