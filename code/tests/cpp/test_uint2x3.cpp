/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

static uint2x3 g_matrixMulLHS_uint2x3    = uint2x3( 		6U, 6U, 6U,
		6U, 6U, 6U
 );

static uint3x2 g_matrixMulRHS_uint2x3    = uint3x2( 		1U, 1U,
		2U, 2U,
		3U, 3U
 );

static uint2x2 g_matrixMulAnswer_uint2x3 = uint2x2( 		36U, 36U,
		36U, 36U
 );


TEMPER_TEST( TestAssignment_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 mat;

	mat.rows[0] = uint3( 999U, 0U, 0U );
	mat.rows[1] = uint3( 0U, 999U, 0U );

	TEMPER_CHECK_TRUE( mat.rows[0].x == 999U );
	TEMPER_CHECK_TRUE( mat.rows[0].y == 0U );
	TEMPER_CHECK_TRUE( mat.rows[0].z == 0U );
	TEMPER_CHECK_TRUE( mat.rows[1].x == 0U );
	TEMPER_CHECK_TRUE( mat.rows[1].y == 999U );
	TEMPER_CHECK_TRUE( mat.rows[1].z == 0U );
}

TEMPER_TEST( TestCtor_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 mat;

	// fill single value
	mat = uint2x3( 999U );
	TEMPER_CHECK_TRUE( mat[0] == uint3( 999U, 0U, 0U ) );
	TEMPER_CHECK_TRUE( mat[1] == uint3( 0U, 999U, 0U ) );

	// row filling
	mat = uint2x3(
		uint3( 0U, 1U, 2U ),
		uint3( 4U, 5U, 6U )
	);
	TEMPER_CHECK_TRUE( mat[0] == uint3( 0U, 1U, 2U ) );
	TEMPER_CHECK_TRUE( mat[1] == uint3( 4U, 5U, 6U ) );

	// all values filled
	mat = uint2x3(
		16U, 15U, 14U,
		12U, 11U, 10U
	);
	TEMPER_CHECK_TRUE( mat[0] == uint3( 16U, 15U, 14U ) );
	TEMPER_CHECK_TRUE( mat[1] == uint3( 12U, 11U, 10U ) );
}

TEMPER_TEST( TestArray_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 mat;
	identity( mat );

	TEMPER_CHECK_TRUE( mat[0] == uint3( 1U, 0U, 0U ) );
	TEMPER_CHECK_TRUE( mat[1] == uint3( 0U, 1U, 0U ) );
}

TEMPER_TEST( TestIncrement_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer;
	uint2x3 mat;

	// prefix
	answer = uint2x3(
		1U, 1U, 1U,
		1U, 1U, 1U
	);

	mat = uint2x3(
		0U, 0U, 0U,
		0U, 0U, 0U

	);
	++mat;
	TEMPER_CHECK_TRUE( mat == answer );

	// postfix
	answer = uint2x3(
		1U, 1U, 1U,
		1U, 1U, 1U
	);

	mat = uint2x3(
		0U, 0U, 0U,
		0U, 0U, 0U

	);
	mat++;
	TEMPER_CHECK_TRUE( mat == answer );
}

TEMPER_TEST( TestDecrement_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer;
	uint2x3 mat;

	// prefix
	answer = uint2x3(
		0U, 0U, 0U,
		0U, 0U, 0U
	);

	mat = uint2x3(
		1U, 1U, 1U,
		1U, 1U, 1U

	);
	--mat;
	TEMPER_CHECK_TRUE( mat == answer );

	// postfix
	answer = uint2x3(
		0U, 0U, 0U,
		0U, 0U, 0U
	);

	mat = uint2x3(
		1U, 1U, 1U,
		1U, 1U, 1U

	);
	mat--;
	TEMPER_CHECK_TRUE( mat == answer );
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Addition_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		7U, 7U, 7U,
		8U, 8U, 8U
	);

	uint2x3 a = uint2x3(
		6U, 6U, 6U,
		6U, 6U, 6U
	);

	uint2x3 b = uint2x3(
		1U, 1U, 1U,
		2U, 2U, 2U
	);

	uint2x3 c = caddm( a, b );

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Subtraction_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		5U, 5U, 5U,
		4U, 4U, 4U
	);

	uint2x3 a = uint2x3(
		6U, 6U, 6U,
		6U, 6U, 6U
	);

	uint2x3 b = uint2x3(
		1U, 1U, 1U,
		2U, 2U, 2U
	);

	uint2x3 c = csubm( a, b );

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Multiplication_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		6U, 6U, 6U,
		12U, 12U, 12U
	);

	uint2x3 a = uint2x3(
		6U, 6U, 6U,
		6U, 6U, 6U
	);

	uint2x3 b = uint2x3(
		1U, 1U, 1U,
		2U, 2U, 2U
	);

	uint2x3 c = cmulm( a, b );

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Division_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		6U, 6U, 6U,
		3U, 3U, 3U
	);

	uint2x3 a = uint2x3(
		6U, 6U, 6U,
		6U, 6U, 6U
	);

	uint2x3 b = uint2x3(
		1U, 1U, 1U,
		2U, 2U, 2U
	);

	uint2x3 c = cdivm( a, b );

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestMultiplyMatrix_Scalar_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x2 answer = g_matrixMulAnswer_uint2x3;

	uint2x3 a = g_matrixMulLHS_uint2x3;
	uint3x2 b = g_matrixMulRHS_uint2x3;
	uint2x2 c = a * b;

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestRelational_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 mat0 =
	{
		1U, 1U, 1U,
		1U, 1U, 1U
	};

	uint2x3 mat1 =
	{
		2U, 2U, 2U,
		2U, 2U, 2U
	};

	uint2x3 mat2 =
	{
		3U, 3U, 3U,
		3U, 3U, 3U
	};

	uint2x3 mat3 =
	{
		4U, 4U, 4U,
		4U, 4U, 4U
	};

	bool2x3 test0  = mat0 <= mat0;
	bool2x3 test1  = mat0 >= mat0;
	bool2x3 test2  = mat0 <  mat1;
	bool2x3 test3  = mat0 <  mat2;
	bool2x3 test4  = mat0 <  mat3;

	bool2x3 test5  = mat1 >  mat0;
	bool2x3 test6  = mat1 <= mat1;
	bool2x3 test7  = mat1 >= mat1;
	bool2x3 test8  = mat1 <  mat2;
	bool2x3 test9  = mat1 <  mat3;

	bool2x3 test10 = mat2 >  mat0;
	bool2x3 test11 = mat2 >  mat1;
	bool2x3 test12 = mat2 <= mat2;
	bool2x3 test13 = mat2 >= mat2;
	bool2x3 test14 = mat2 <  mat3;

	bool2x3 test15 = mat3 >  mat0;
	bool2x3 test16 = mat3 >  mat1;
	bool2x3 test17 = mat3 >  mat2;
	bool2x3 test18 = mat3 <= mat3;
	bool2x3 test19 = mat3 >= mat3;

	TEMPER_CHECK_TRUE( all( test0 ) );
	TEMPER_CHECK_TRUE( all( test1 ) );
	TEMPER_CHECK_TRUE( all( test2 ) );
	TEMPER_CHECK_TRUE( all( test3 ) );
	TEMPER_CHECK_TRUE( all( test4 ) );

	TEMPER_CHECK_TRUE( all( test5 ) );
	TEMPER_CHECK_TRUE( all( test6 ) );
	TEMPER_CHECK_TRUE( all( test7 ) );
	TEMPER_CHECK_TRUE( all( test8 ) );
	TEMPER_CHECK_TRUE( all( test9 ) );

	TEMPER_CHECK_TRUE( all( test10 ) );
	TEMPER_CHECK_TRUE( all( test11 ) );
	TEMPER_CHECK_TRUE( all( test12 ) );
	TEMPER_CHECK_TRUE( all( test13 ) );
	TEMPER_CHECK_TRUE( all( test14 ) );

	TEMPER_CHECK_TRUE( all( test15 ) );
	TEMPER_CHECK_TRUE( all( test16 ) );
	TEMPER_CHECK_TRUE( all( test17 ) );
	TEMPER_CHECK_TRUE( all( test18 ) );
	TEMPER_CHECK_TRUE( all( test19 ) );
}

TEMPER_TEST( TestBitwise_And_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		5U, 5U, 5U,
		5U, 5U, 5U
	);
	uint2x3 a = uint2x3(
		21U, 21U, 21U,
		21U, 21U, 21U
	);
	uint2x3 b = uint2x3(
		7U, 7U, 7U,
		7U, 7U, 7U
	);

	uint2x3 c = a & b;

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestBitwise_Or_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		23U, 23U, 23U,
		23U, 23U, 23U
	);
	uint2x3 a = uint2x3(
		21U, 21U, 21U,
		21U, 21U, 21U
	);
	uint2x3 b = uint2x3(
		7U, 7U, 7U,
		7U, 7U, 7U
	);

	uint2x3 c = a | b;

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestBitwise_Xor_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		18U, 18U, 18U,
		18U, 18U, 18U
	);
	uint2x3 a = uint2x3(
		21U, 21U, 21U,
		21U, 21U, 21U
	);
	uint2x3 b = uint2x3(
		7U, 7U, 7U,
		7U, 7U, 7U
	);

	uint2x3 c = a ^ b;

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestBitwise_ShiftLeft_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		4U, 4U, 4U,
		4U, 4U, 4U
	);
	uint2x3 a = uint2x3(
		1U, 1U, 1U,
		1U, 1U, 1U
	);
	uint2x3 b = uint2x3(
		2U, 2U, 2U,
		2U, 2U, 2U
	);

	uint2x3 c = a << b;

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestBitwise_ShiftRight_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		1U, 1U, 1U,
		1U, 1U, 1U
	);
	uint2x3 a = uint2x3(
		16U, 16U, 16U,
		16U, 16U, 16U
	);
	uint2x3 b = uint2x3(
		4U, 4U, 4U,
		4U, 4U, 4U
	);

	uint2x3 c = a >> b;

	TEMPER_CHECK_TRUE( c == answer );
}

TEMPER_TEST( TestBitwise_Unary_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 answer = uint2x3(
		(uint32_t) -1, (uint32_t) -1, (uint32_t) -1,
		(uint32_t) -1, (uint32_t) -1, (uint32_t) -1
	);
	uint2x3 a = uint2x3(
		0U, 0U, 0U,
		0U, 0U, 0U
	);

	uint2x3 b = ~a;

	TEMPER_CHECK_TRUE( b == answer );
}

TEMPER_TEST( TestIdentity_Scalar_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2x3 id;
	id[0] = uint3( 1U, 0U, 0U );
	id[1] = uint3( 0U, 1U, 0U );

	uint2x3 mat;

	identity( mat );
	TEMPER_CHECK_TRUE( mat == id );
}

TEMPER_TEST( TestTranspose_Scalar_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint3x2 answerTransposed = uint3x2(
		0U, 4U,
		1U, 5U,
		2U, 6U
	);

	uint2x3 mat = uint2x3(
		0U, 1U, 2U,
		4U, 5U, 6U
	);
	uint3x2 trans = transpose( mat );

	TEMPER_CHECK_TRUE( trans == answerTransposed );
}

TEMPER_TEST( TestScale_Scalar_uint2x3, TEMPER_FLAG_SHOULD_RUN )
{
	uint2 scaleVec = { 2U, 2U };
	uint2x3 mat;
	identity( mat );

	uint2x3 scaled = scale( mat, scaleVec );

	TEMPER_CHECK_TRUE( scaled.rows[0].x == 2U );
	TEMPER_CHECK_TRUE( scaled.rows[1].y == 2U );
}

