/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

static float3x3 g_identityMatrix_float3x3;

static float3x3 g_matrixMulLHS_float3x3    = float3x3(
		6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f
	);
static float3x3 g_matrixMulRHS_float3x3    = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f
	);
static float3x3 g_matrixMulAnswer_float3x3 = float3x3(
		36.000000f, 36.000000f, 36.000000f,
		36.000000f, 36.000000f, 36.000000f,
		72.000000f, 72.000000f, 72.000000f
	);

TEMPER_TEST( TestAssignment_float3x3 )
{
	float3x3 mat;

	// fill single value
	mat = float3x3( 999.0f );
	TEMPER_EXPECT_TRUE( mat[0] == float3( 999.000000f, 0.000000f, 0.000000f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float3( 0.000000f, 999.000000f, 0.000000f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float3( 0.000000f, 0.000000f, 999.000000f ) );

	// row filling
	mat = float3x3(
		float3( 0.000000f, 1.000000f, 2.000000f ),
		float3( 4.000000f, 5.000000f, 6.000000f ),
		float3( 8.000000f, 9.000000f, 10.000000f )
	);
	TEMPER_EXPECT_TRUE( mat[0] == float3( 0.000000f, 1.000000f, 2.000000f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float3( 4.000000f, 5.000000f, 6.000000f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float3( 8.000000f, 9.000000f, 10.000000f ) );

	// all values filled
	mat = float3x3(
		16.000000f, 15.000000f, 14.000000f,
		12.000000f, 11.000000f, 10.000000f,
		8.000000f, 7.000000f, 6.000000f
	);
	TEMPER_EXPECT_TRUE( mat[0] == float3( 16.000000f, 15.000000f, 14.000000f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float3( 12.000000f, 11.000000f, 10.000000f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float3( 8.000000f, 7.000000f, 6.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Addition_float3x3 )
{
	float3x3 answer = float3x3(
		7.000000f, 7.000000f, 7.000000f,
		8.000000f, 8.000000f, 8.000000f,
		15.000000f, 15.000000f, 15.000000f
	);

	float3x3 a = float3x3(
		6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f
	);
	float3x3 b = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f
	);
	float3x3 c = a + b;

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Subtraction_float3x3 )
{
	float3x3 answer = float3x3(
		5.000000f, 5.000000f, 5.000000f,
		4.000000f, 4.000000f, 4.000000f,
		9.000000f, 9.000000f, 9.000000f
	);

	float3x3 a = float3x3(
		6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f
	);
	float3x3 b = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f
	);
	float3x3 c = a - b;

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Multiplication_float3x3 )
{
	float3x3 answer = float3x3(
		6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f,
		36.000000f, 36.000000f, 36.000000f
	);

	float3x3 a = float3x3(
		6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f
	);
	float3x3 b = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f
	);
	float3x3 c = comp_mul( a, b );

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Division_float3x3 )
{
	float3x3 answer = float3x3(
		6.000000f, 6.000000f, 6.000000f,
		3.000000f, 3.000000f, 3.000000f,
		4.000000f, 4.000000f, 4.000000f
	);

	float3x3 a = float3x3(
		6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f
	);
	float3x3 b = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f
	);
	float3x3 c = comp_div( a, b );

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestMultiplyMatrix_Scalar_float3x3 )
{
	float3x3 answer = g_matrixMulAnswer_float3x3;

	float3x3 a = g_matrixMulLHS_float3x3;
	float3x3 b = g_matrixMulRHS_float3x3;
	float3x3 c = a * b;

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestMultiplyVector_float3x3 )
{
	float3 answerVec = float3( 16.000000f, 44.000000f, 72.000000f );

	float3x3 a = float3x3(
		1.000000f, 2.000000f, 3.000000f,
		5.000000f, 6.000000f, 7.000000f,
		9.000000f, 10.000000f, 11.000000f
	);
	float3 b = float3( 2.000000f, 1.000000f, 4.000000f );
	float3 c = a * b;

	TEMPER_EXPECT_TRUE( c == answerVec );

	TEMPER_PASS();
}

TEMPER_TEST( TestDivideMatrix_float3x3 )
{
	float3x3 answer = float3x3(
		1.000000f, 0.0f, 0.0f,
		0.0f, 1.000000f, 0.0f,
		0.0f, 0.0f, 1.000000f
	);

	float3x3 a = float3x3(
		6.000000f, 2.000000f, 3.000000f,
		2.000000f, 7.000000f, 5.000000f,
		3.000000f, 5.000000f, 7.000000f
	);
	float3x3 b = float3x3(
		6.000000f, 2.000000f, 3.000000f,
		2.000000f, 7.000000f, 5.000000f,
		3.000000f, 5.000000f, 7.000000f
	);
	float3x3 c = a / b;

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestIncrement_float3x3 )
{
	float3x3 mat;

	// prefix
	mat = float3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	);
	++mat;
	TEMPER_EXPECT_TRUE( mat == float3x3(
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f
	) );

	// postfix
	mat = float3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	);
	mat++;
	TEMPER_EXPECT_TRUE( mat == float3x3(
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f
	) );

	TEMPER_PASS();
}

TEMPER_TEST( TestDecrement_float3x3 )
{
	float3x3 mat;

	// prefix
	mat = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f
	);
	--mat;
	TEMPER_EXPECT_TRUE( mat == float3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	) );

	// postfix
	mat = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f
	);
	mat--;
	TEMPER_EXPECT_TRUE( mat == float3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	) );

	TEMPER_PASS();
}

TEMPER_TEST( TestRelational_float3x3 )
{
	bool3x3 allTrue = bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	);

	float3x3 mat0 = float3x3(
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f
	);
	float3x3 mat1 = float3x3(
		2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f
	);
	float3x3 mat2 = float3x3(
		3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f
	);
	float3x3 mat3 = float3x3(
		4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f
	);

	bool3x3 test0  = mat0 <= mat0;
	bool3x3 test1  = mat0 >= mat0;
	bool3x3 test2  = mat0 <  mat1;
	bool3x3 test3  = mat0 <  mat2;
	bool3x3 test4  = mat0 <  mat3;

	bool3x3 test5  = mat1 >  mat0;
	bool3x3 test6  = mat1 <= mat1;
	bool3x3 test7  = mat1 >= mat1;
	bool3x3 test8  = mat1 <  mat2;
	bool3x3 test9  = mat1 <  mat3;

	bool3x3 test10 = mat2 >  mat0;
	bool3x3 test11 = mat2 >  mat1;
	bool3x3 test12 = mat2 <= mat2;
	bool3x3 test13 = mat2 >= mat2;
	bool3x3 test14 = mat2 <  mat3;

	bool3x3 test15 = mat3 >  mat0;
	bool3x3 test16 = mat3 >  mat1;
	bool3x3 test17 = mat3 >  mat2;
	bool3x3 test18 = mat3 <= mat3;
	bool3x3 test19 = mat3 >= mat3;

	TEMPER_EXPECT_TRUE( test0  == allTrue );
	TEMPER_EXPECT_TRUE( test1  == allTrue );
	TEMPER_EXPECT_TRUE( test2  == allTrue );
	TEMPER_EXPECT_TRUE( test3  == allTrue );
	TEMPER_EXPECT_TRUE( test4  == allTrue );

	TEMPER_EXPECT_TRUE( test5  == allTrue );
	TEMPER_EXPECT_TRUE( test6  == allTrue );
	TEMPER_EXPECT_TRUE( test7  == allTrue );
	TEMPER_EXPECT_TRUE( test8  == allTrue );
	TEMPER_EXPECT_TRUE( test9  == allTrue );

	TEMPER_EXPECT_TRUE( test10 == allTrue );
	TEMPER_EXPECT_TRUE( test11 == allTrue );
	TEMPER_EXPECT_TRUE( test12 == allTrue );
	TEMPER_EXPECT_TRUE( test13 == allTrue );
	TEMPER_EXPECT_TRUE( test14 == allTrue );

	TEMPER_EXPECT_TRUE( test15 == allTrue );
	TEMPER_EXPECT_TRUE( test16 == allTrue );
	TEMPER_EXPECT_TRUE( test17 == allTrue );
	TEMPER_EXPECT_TRUE( test18 == allTrue );
	TEMPER_EXPECT_TRUE( test19 == allTrue );

	TEMPER_PASS();
}

TEMPER_TEST( TestArray_float3x3 )
{
	float3x3 mat;

	TEMPER_EXPECT_TRUE( mat[0] == float3( 1.0f, 0.0f, 0.0f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float3( 0.0f, 1.0f, 0.0f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float3( 0.0f, 0.0f, 1.0f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestIdentity_Scalar_float3x3 )
{
	float3x3 id = float3x3(
		1.000000f, 0.0f, 0.0f,
		0.0f, 1.000000f, 0.0f,
		0.0f, 0.0f, 1.000000f
	);

	float3x3 mat;
	TEMPER_EXPECT_TRUE( mat == id );

	identity( mat );
	TEMPER_EXPECT_TRUE( mat == id );

	TEMPER_PASS();
}

TEMPER_TEST( TestTranspose_Scalar_float3x3 )
{
	float3x3 mat = float3x3(
		0.000000f, 1.000000f, 2.000000f,
		4.000000f, 5.000000f, 6.000000f,
		8.000000f, 9.000000f, 10.000000f
	);
	float3x3 trans = transpose( mat );

	TEMPER_EXPECT_TRUE( trans == float3x3(
		0.000000f, 4.000000f, 8.000000f,
		1.000000f, 5.000000f, 9.000000f,
		2.000000f, 6.000000f, 10.000000f
	) );

	TEMPER_PASS();
}

TEMPER_TEST( TestDeterminant_Scalar_float3x3 )
{
	float3x3 mat = float3x3(
		6.000000f, 2.000000f, 3.000000f,
		2.000000f, 7.000000f, 2.000000f,
		3.000000f, 2.000000f, 6.000000f
	);
	float det = determinant( mat );

	TEMPER_EXPECT_TRUE( floateq( det, 165.0f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestInverse_Scalar_float3x3 )
{
	float3x3 mat = float3x3(
		6.000000f, 2.000000f, 3.000000f,
		2.000000f, 7.000000f, 2.000000f,
		3.000000f, 2.000000f, 6.000000f
	);
	float3x3 matInverse = inverse( mat );

	TEMPER_EXPECT_TRUE( mat * matInverse == g_identityMatrix_float3x3 );

	TEMPER_PASS();
}

TEMPER_TEST( TestTranslate_Scalar_float3x3 )
{
	float3x3 mat;

	float2 translation = float2( 2.000000f, 3.000000f );
	mat = translate( mat, translation );

	TEMPER_EXPECT_TRUE( floateq( mat[0][2], 2.0f ) );
	TEMPER_EXPECT_TRUE( floateq( mat[1][2], 3.0f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestRotate_float3x3 )
{
	float3x3 mat;
	float3x3 roll = rotate( mat, radiansf( 45.0f ) );

	float3x3 answerRoll = float3x3(
		0.707107f, -0.707107f, 0.000000f,
		0.707107f, 0.707107f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f
	);

	TEMPER_EXPECT_TRUE( roll == answerRoll );

	TEMPER_PASS();
}

TEMPER_TEST( TestScale_Scalar_float3x3 )
{
	float3x3 mat;
	float3x3 scaled = scale( mat, float2( 2.000000f, 2.000000f ) );

	TEMPER_EXPECT_TRUE( floateq( scaled[0][0], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaled[1][1], 2.000000f ) );

	TEMPER_PASS();
}

TEMPER_SUITE( Test_float3x3 )
{
	TEMPER_RUN_TEST( TestAssignment_float3x3 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Addition_float3x3 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Subtraction_float3x3 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Multiplication_float3x3 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Division_float3x3 );
	TEMPER_RUN_TEST( TestMultiplyMatrix_Scalar_float3x3 );
	TEMPER_RUN_TEST( TestMultiplyVector_float3x3 );
	TEMPER_RUN_TEST( TestDivideMatrix_float3x3 );
	TEMPER_RUN_TEST( TestIncrement_float3x3 );
	TEMPER_RUN_TEST( TestDecrement_float3x3 );
	TEMPER_RUN_TEST( TestRelational_float3x3 );
	TEMPER_RUN_TEST( TestArray_float3x3 );
	TEMPER_RUN_TEST( TestIdentity_Scalar_float3x3 );
	TEMPER_RUN_TEST( TestTranspose_Scalar_float3x3 );
	TEMPER_RUN_TEST( TestDeterminant_Scalar_float3x3 );
	TEMPER_RUN_TEST( TestInverse_Scalar_float3x3 );
	TEMPER_RUN_TEST( TestTranslate_Scalar_float3x3 );
	TEMPER_RUN_TEST( TestRotate_float3x3 );
	TEMPER_RUN_TEST( TestScale_Scalar_float3x3 );
}
