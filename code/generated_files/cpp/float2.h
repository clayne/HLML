/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "float2_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct float2
{
	union
	{
		struct
		{
			float x;
			float y;
		};

		struct
		{
			float r;
			float g;
		};

		float v[2];

		// swizzles
		float2_swizzle_2_to_2_xx_t xx;
		float2_swizzle_2_to_2_yx_t yx;
		float2_swizzle_2_to_2_xy_t xy;
		float2_swizzle_2_to_2_yy_t yy;
		float2_swizzle_2_to_3_xxx_t xxx;
		float2_swizzle_2_to_3_yxx_t yxx;
		float2_swizzle_2_to_3_xyx_t xyx;
		float2_swizzle_2_to_3_yyx_t yyx;
		float2_swizzle_2_to_3_xxy_t xxy;
		float2_swizzle_2_to_3_yxy_t yxy;
		float2_swizzle_2_to_3_xyy_t xyy;
		float2_swizzle_2_to_3_yyy_t yyy;
		float2_swizzle_2_to_4_xxxx_t xxxx;
		float2_swizzle_2_to_4_yxxx_t yxxx;
		float2_swizzle_2_to_4_xyxx_t xyxx;
		float2_swizzle_2_to_4_yyxx_t yyxx;
		float2_swizzle_2_to_4_xxyx_t xxyx;
		float2_swizzle_2_to_4_yxyx_t yxyx;
		float2_swizzle_2_to_4_xyyx_t xyyx;
		float2_swizzle_2_to_4_yyyx_t yyyx;
		float2_swizzle_2_to_4_xxxy_t xxxy;
		float2_swizzle_2_to_4_yxxy_t yxxy;
		float2_swizzle_2_to_4_xyxy_t xyxy;
		float2_swizzle_2_to_4_yyxy_t yyxy;
		float2_swizzle_2_to_4_xxyy_t xxyy;
		float2_swizzle_2_to_4_yxyy_t yxyy;
		float2_swizzle_2_to_4_xyyy_t xyyy;
		float2_swizzle_2_to_4_yyyy_t yyyy;

		float2_swizzle_2_to_2_rr_t rr;
		float2_swizzle_2_to_2_gr_t gr;
		float2_swizzle_2_to_2_rg_t rg;
		float2_swizzle_2_to_2_gg_t gg;
		float2_swizzle_2_to_3_rrr_t rrr;
		float2_swizzle_2_to_3_grr_t grr;
		float2_swizzle_2_to_3_rgr_t rgr;
		float2_swizzle_2_to_3_ggr_t ggr;
		float2_swizzle_2_to_3_rrg_t rrg;
		float2_swizzle_2_to_3_grg_t grg;
		float2_swizzle_2_to_3_rgg_t rgg;
		float2_swizzle_2_to_3_ggg_t ggg;
		float2_swizzle_2_to_4_rrrr_t rrrr;
		float2_swizzle_2_to_4_grrr_t grrr;
		float2_swizzle_2_to_4_rgrr_t rgrr;
		float2_swizzle_2_to_4_ggrr_t ggrr;
		float2_swizzle_2_to_4_rrgr_t rrgr;
		float2_swizzle_2_to_4_grgr_t grgr;
		float2_swizzle_2_to_4_rggr_t rggr;
		float2_swizzle_2_to_4_gggr_t gggr;
		float2_swizzle_2_to_4_rrrg_t rrrg;
		float2_swizzle_2_to_4_grrg_t grrg;
		float2_swizzle_2_to_4_rgrg_t rgrg;
		float2_swizzle_2_to_4_ggrg_t ggrg;
		float2_swizzle_2_to_4_rrgg_t rrgg;
		float2_swizzle_2_to_4_grgg_t grgg;
		float2_swizzle_2_to_4_rggg_t rggg;
		float2_swizzle_2_to_4_gggg_t gggg;
	};

	// Default constructor.
	HLML_INLINE float2() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit float2( const float scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE float2( const float x, const float y );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE float2( const float2& other );

	~float2() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE float2 operator=( const float2& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE float& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE const float& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

