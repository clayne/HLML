/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

struct double2;
struct double4;

struct bool3;
struct int3;
struct uint3;
struct float3;

#include "hlml_types.h"
#include "hlml_defines.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct double3
{
	union
	{
		struct
		{
			double x;
			double y;
			double z;
		};

		struct
		{
			double r;
			double g;
			double b;
		};

		double v[3];
	};

	// Default constructor.
	HLML_INLINE double3() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit double3( const double scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE double3( const double x, const double y, const double z );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE double3( const double2& other );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE double3( const double3& other );

	// Conversion constructor.  Casts all components of 'vec' from type bool32_t to type double.
	HLML_INLINE explicit double3( const bool3& vec );

	// Conversion constructor.  Casts all components of 'vec' from type int32_t to type double.
	HLML_INLINE explicit double3( const int3& vec );

	// Conversion constructor.  Casts all components of 'vec' from type uint32_t to type double.
	HLML_INLINE explicit double3( const uint3& vec );

	// Conversion constructor.  Casts all components of 'vec' from type float to type double.
	HLML_INLINE explicit double3( const float3& vec );

	~double3() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE double3 operator=( const double2& other );

	// Copies all elements of 'other' into the vector.
	HLML_INLINE double3 operator=( const double3& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE double& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE const double& operator[]( const int32_t index ) const;

	// swizzle functions
	HLML_INLINE double2 xx() const;
	HLML_INLINE double2 xy() const;
	HLML_INLINE double2 xz() const;
	HLML_INLINE double2 yx() const;
	HLML_INLINE double2 yy() const;
	HLML_INLINE double2 yz() const;
	HLML_INLINE double2 zx() const;
	HLML_INLINE double2 zy() const;
	HLML_INLINE double2 zz() const;
	HLML_INLINE double3 xxx() const;
	HLML_INLINE double3 xxy() const;
	HLML_INLINE double3 xxz() const;
	HLML_INLINE double3 xyx() const;
	HLML_INLINE double3 xyy() const;
	HLML_INLINE double3 xyz() const;
	HLML_INLINE double3 xzx() const;
	HLML_INLINE double3 xzy() const;
	HLML_INLINE double3 xzz() const;
	HLML_INLINE double3 yxx() const;
	HLML_INLINE double3 yxy() const;
	HLML_INLINE double3 yxz() const;
	HLML_INLINE double3 yyx() const;
	HLML_INLINE double3 yyy() const;
	HLML_INLINE double3 yyz() const;
	HLML_INLINE double3 yzx() const;
	HLML_INLINE double3 yzy() const;
	HLML_INLINE double3 yzz() const;
	HLML_INLINE double3 zxx() const;
	HLML_INLINE double3 zxy() const;
	HLML_INLINE double3 zxz() const;
	HLML_INLINE double3 zyx() const;
	HLML_INLINE double3 zyy() const;
	HLML_INLINE double3 zyz() const;
	HLML_INLINE double3 zzx() const;
	HLML_INLINE double3 zzy() const;
	HLML_INLINE double3 zzz() const;
	HLML_INLINE double4 xxxx() const;
	HLML_INLINE double4 xxxy() const;
	HLML_INLINE double4 xxxz() const;
	HLML_INLINE double4 xxyx() const;
	HLML_INLINE double4 xxyy() const;
	HLML_INLINE double4 xxyz() const;
	HLML_INLINE double4 xxzx() const;
	HLML_INLINE double4 xxzy() const;
	HLML_INLINE double4 xxzz() const;
	HLML_INLINE double4 xyxx() const;
	HLML_INLINE double4 xyxy() const;
	HLML_INLINE double4 xyxz() const;
	HLML_INLINE double4 xyyx() const;
	HLML_INLINE double4 xyyy() const;
	HLML_INLINE double4 xyyz() const;
	HLML_INLINE double4 xyzx() const;
	HLML_INLINE double4 xyzy() const;
	HLML_INLINE double4 xyzz() const;
	HLML_INLINE double4 xzxx() const;
	HLML_INLINE double4 xzxy() const;
	HLML_INLINE double4 xzxz() const;
	HLML_INLINE double4 xzyx() const;
	HLML_INLINE double4 xzyy() const;
	HLML_INLINE double4 xzyz() const;
	HLML_INLINE double4 xzzx() const;
	HLML_INLINE double4 xzzy() const;
	HLML_INLINE double4 xzzz() const;
	HLML_INLINE double4 yxxx() const;
	HLML_INLINE double4 yxxy() const;
	HLML_INLINE double4 yxxz() const;
	HLML_INLINE double4 yxyx() const;
	HLML_INLINE double4 yxyy() const;
	HLML_INLINE double4 yxyz() const;
	HLML_INLINE double4 yxzx() const;
	HLML_INLINE double4 yxzy() const;
	HLML_INLINE double4 yxzz() const;
	HLML_INLINE double4 yyxx() const;
	HLML_INLINE double4 yyxy() const;
	HLML_INLINE double4 yyxz() const;
	HLML_INLINE double4 yyyx() const;
	HLML_INLINE double4 yyyy() const;
	HLML_INLINE double4 yyyz() const;
	HLML_INLINE double4 yyzx() const;
	HLML_INLINE double4 yyzy() const;
	HLML_INLINE double4 yyzz() const;
	HLML_INLINE double4 yzxx() const;
	HLML_INLINE double4 yzxy() const;
	HLML_INLINE double4 yzxz() const;
	HLML_INLINE double4 yzyx() const;
	HLML_INLINE double4 yzyy() const;
	HLML_INLINE double4 yzyz() const;
	HLML_INLINE double4 yzzx() const;
	HLML_INLINE double4 yzzy() const;
	HLML_INLINE double4 yzzz() const;
	HLML_INLINE double4 zxxx() const;
	HLML_INLINE double4 zxxy() const;
	HLML_INLINE double4 zxxz() const;
	HLML_INLINE double4 zxyx() const;
	HLML_INLINE double4 zxyy() const;
	HLML_INLINE double4 zxyz() const;
	HLML_INLINE double4 zxzx() const;
	HLML_INLINE double4 zxzy() const;
	HLML_INLINE double4 zxzz() const;
	HLML_INLINE double4 zyxx() const;
	HLML_INLINE double4 zyxy() const;
	HLML_INLINE double4 zyxz() const;
	HLML_INLINE double4 zyyx() const;
	HLML_INLINE double4 zyyy() const;
	HLML_INLINE double4 zyyz() const;
	HLML_INLINE double4 zyzx() const;
	HLML_INLINE double4 zyzy() const;
	HLML_INLINE double4 zyzz() const;
	HLML_INLINE double4 zzxx() const;
	HLML_INLINE double4 zzxy() const;
	HLML_INLINE double4 zzxz() const;
	HLML_INLINE double4 zzyx() const;
	HLML_INLINE double4 zzyy() const;
	HLML_INLINE double4 zzyz() const;
	HLML_INLINE double4 zzzx() const;
	HLML_INLINE double4 zzzy() const;
	HLML_INLINE double4 zzzz() const;

	HLML_INLINE double2 rr() const;
	HLML_INLINE double2 rg() const;
	HLML_INLINE double2 rb() const;
	HLML_INLINE double2 gr() const;
	HLML_INLINE double2 gg() const;
	HLML_INLINE double2 gb() const;
	HLML_INLINE double2 br() const;
	HLML_INLINE double2 bg() const;
	HLML_INLINE double2 bb() const;
	HLML_INLINE double3 rrr() const;
	HLML_INLINE double3 rrg() const;
	HLML_INLINE double3 rrb() const;
	HLML_INLINE double3 rgr() const;
	HLML_INLINE double3 rgg() const;
	HLML_INLINE double3 rgb() const;
	HLML_INLINE double3 rbr() const;
	HLML_INLINE double3 rbg() const;
	HLML_INLINE double3 rbb() const;
	HLML_INLINE double3 grr() const;
	HLML_INLINE double3 grg() const;
	HLML_INLINE double3 grb() const;
	HLML_INLINE double3 ggr() const;
	HLML_INLINE double3 ggg() const;
	HLML_INLINE double3 ggb() const;
	HLML_INLINE double3 gbr() const;
	HLML_INLINE double3 gbg() const;
	HLML_INLINE double3 gbb() const;
	HLML_INLINE double3 brr() const;
	HLML_INLINE double3 brg() const;
	HLML_INLINE double3 brb() const;
	HLML_INLINE double3 bgr() const;
	HLML_INLINE double3 bgg() const;
	HLML_INLINE double3 bgb() const;
	HLML_INLINE double3 bbr() const;
	HLML_INLINE double3 bbg() const;
	HLML_INLINE double3 bbb() const;
	HLML_INLINE double4 rrrr() const;
	HLML_INLINE double4 rrrg() const;
	HLML_INLINE double4 rrrb() const;
	HLML_INLINE double4 rrgr() const;
	HLML_INLINE double4 rrgg() const;
	HLML_INLINE double4 rrgb() const;
	HLML_INLINE double4 rrbr() const;
	HLML_INLINE double4 rrbg() const;
	HLML_INLINE double4 rrbb() const;
	HLML_INLINE double4 rgrr() const;
	HLML_INLINE double4 rgrg() const;
	HLML_INLINE double4 rgrb() const;
	HLML_INLINE double4 rggr() const;
	HLML_INLINE double4 rggg() const;
	HLML_INLINE double4 rggb() const;
	HLML_INLINE double4 rgbr() const;
	HLML_INLINE double4 rgbg() const;
	HLML_INLINE double4 rgbb() const;
	HLML_INLINE double4 rbrr() const;
	HLML_INLINE double4 rbrg() const;
	HLML_INLINE double4 rbrb() const;
	HLML_INLINE double4 rbgr() const;
	HLML_INLINE double4 rbgg() const;
	HLML_INLINE double4 rbgb() const;
	HLML_INLINE double4 rbbr() const;
	HLML_INLINE double4 rbbg() const;
	HLML_INLINE double4 rbbb() const;
	HLML_INLINE double4 grrr() const;
	HLML_INLINE double4 grrg() const;
	HLML_INLINE double4 grrb() const;
	HLML_INLINE double4 grgr() const;
	HLML_INLINE double4 grgg() const;
	HLML_INLINE double4 grgb() const;
	HLML_INLINE double4 grbr() const;
	HLML_INLINE double4 grbg() const;
	HLML_INLINE double4 grbb() const;
	HLML_INLINE double4 ggrr() const;
	HLML_INLINE double4 ggrg() const;
	HLML_INLINE double4 ggrb() const;
	HLML_INLINE double4 gggr() const;
	HLML_INLINE double4 gggg() const;
	HLML_INLINE double4 gggb() const;
	HLML_INLINE double4 ggbr() const;
	HLML_INLINE double4 ggbg() const;
	HLML_INLINE double4 ggbb() const;
	HLML_INLINE double4 gbrr() const;
	HLML_INLINE double4 gbrg() const;
	HLML_INLINE double4 gbrb() const;
	HLML_INLINE double4 gbgr() const;
	HLML_INLINE double4 gbgg() const;
	HLML_INLINE double4 gbgb() const;
	HLML_INLINE double4 gbbr() const;
	HLML_INLINE double4 gbbg() const;
	HLML_INLINE double4 gbbb() const;
	HLML_INLINE double4 brrr() const;
	HLML_INLINE double4 brrg() const;
	HLML_INLINE double4 brrb() const;
	HLML_INLINE double4 brgr() const;
	HLML_INLINE double4 brgg() const;
	HLML_INLINE double4 brgb() const;
	HLML_INLINE double4 brbr() const;
	HLML_INLINE double4 brbg() const;
	HLML_INLINE double4 brbb() const;
	HLML_INLINE double4 bgrr() const;
	HLML_INLINE double4 bgrg() const;
	HLML_INLINE double4 bgrb() const;
	HLML_INLINE double4 bggr() const;
	HLML_INLINE double4 bggg() const;
	HLML_INLINE double4 bggb() const;
	HLML_INLINE double4 bgbr() const;
	HLML_INLINE double4 bgbg() const;
	HLML_INLINE double4 bgbb() const;
	HLML_INLINE double4 bbrr() const;
	HLML_INLINE double4 bbrg() const;
	HLML_INLINE double4 bbrb() const;
	HLML_INLINE double4 bbgr() const;
	HLML_INLINE double4 bbgg() const;
	HLML_INLINE double4 bbgb() const;
	HLML_INLINE double4 bbbr() const;
	HLML_INLINE double4 bbbg() const;
	HLML_INLINE double4 bbbb() const;

};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif
