/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "double3_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct double3
{
	union
	{
		struct
		{
			double x;
			double y;
			double z;
		};

		struct
		{
			double r;
			double g;
			double b;
		};

		double v[3];

		// swizzles
		double3_swizzle_3_to_2_xx_t xx;
		double3_swizzle_3_to_2_yx_t yx;
		double3_swizzle_3_to_2_zx_t zx;
		double3_swizzle_3_to_2_xy_t xy;
		double3_swizzle_3_to_2_yy_t yy;
		double3_swizzle_3_to_2_zy_t zy;
		double3_swizzle_3_to_2_xz_t xz;
		double3_swizzle_3_to_2_yz_t yz;
		double3_swizzle_3_to_2_zz_t zz;
		double3_swizzle_3_to_3_xxx_t xxx;
		double3_swizzle_3_to_3_yxx_t yxx;
		double3_swizzle_3_to_3_zxx_t zxx;
		double3_swizzle_3_to_3_xyx_t xyx;
		double3_swizzle_3_to_3_yyx_t yyx;
		double3_swizzle_3_to_3_zyx_t zyx;
		double3_swizzle_3_to_3_xzx_t xzx;
		double3_swizzle_3_to_3_yzx_t yzx;
		double3_swizzle_3_to_3_zzx_t zzx;
		double3_swizzle_3_to_3_xxy_t xxy;
		double3_swizzle_3_to_3_yxy_t yxy;
		double3_swizzle_3_to_3_zxy_t zxy;
		double3_swizzle_3_to_3_xyy_t xyy;
		double3_swizzle_3_to_3_yyy_t yyy;
		double3_swizzle_3_to_3_zyy_t zyy;
		double3_swizzle_3_to_3_xzy_t xzy;
		double3_swizzle_3_to_3_yzy_t yzy;
		double3_swizzle_3_to_3_zzy_t zzy;
		double3_swizzle_3_to_3_xxz_t xxz;
		double3_swizzle_3_to_3_yxz_t yxz;
		double3_swizzle_3_to_3_zxz_t zxz;
		double3_swizzle_3_to_3_xyz_t xyz;
		double3_swizzle_3_to_3_yyz_t yyz;
		double3_swizzle_3_to_3_zyz_t zyz;
		double3_swizzle_3_to_3_xzz_t xzz;
		double3_swizzle_3_to_3_yzz_t yzz;
		double3_swizzle_3_to_3_zzz_t zzz;
		double3_swizzle_3_to_4_xxxx_t xxxx;
		double3_swizzle_3_to_4_yxxx_t yxxx;
		double3_swizzle_3_to_4_zxxx_t zxxx;
		double3_swizzle_3_to_4_xyxx_t xyxx;
		double3_swizzle_3_to_4_yyxx_t yyxx;
		double3_swizzle_3_to_4_zyxx_t zyxx;
		double3_swizzle_3_to_4_xzxx_t xzxx;
		double3_swizzle_3_to_4_yzxx_t yzxx;
		double3_swizzle_3_to_4_zzxx_t zzxx;
		double3_swizzle_3_to_4_xxyx_t xxyx;
		double3_swizzle_3_to_4_yxyx_t yxyx;
		double3_swizzle_3_to_4_zxyx_t zxyx;
		double3_swizzle_3_to_4_xyyx_t xyyx;
		double3_swizzle_3_to_4_yyyx_t yyyx;
		double3_swizzle_3_to_4_zyyx_t zyyx;
		double3_swizzle_3_to_4_xzyx_t xzyx;
		double3_swizzle_3_to_4_yzyx_t yzyx;
		double3_swizzle_3_to_4_zzyx_t zzyx;
		double3_swizzle_3_to_4_xxzx_t xxzx;
		double3_swizzle_3_to_4_yxzx_t yxzx;
		double3_swizzle_3_to_4_zxzx_t zxzx;
		double3_swizzle_3_to_4_xyzx_t xyzx;
		double3_swizzle_3_to_4_yyzx_t yyzx;
		double3_swizzle_3_to_4_zyzx_t zyzx;
		double3_swizzle_3_to_4_xzzx_t xzzx;
		double3_swizzle_3_to_4_yzzx_t yzzx;
		double3_swizzle_3_to_4_zzzx_t zzzx;
		double3_swizzle_3_to_4_xxxy_t xxxy;
		double3_swizzle_3_to_4_yxxy_t yxxy;
		double3_swizzle_3_to_4_zxxy_t zxxy;
		double3_swizzle_3_to_4_xyxy_t xyxy;
		double3_swizzle_3_to_4_yyxy_t yyxy;
		double3_swizzle_3_to_4_zyxy_t zyxy;
		double3_swizzle_3_to_4_xzxy_t xzxy;
		double3_swizzle_3_to_4_yzxy_t yzxy;
		double3_swizzle_3_to_4_zzxy_t zzxy;
		double3_swizzle_3_to_4_xxyy_t xxyy;
		double3_swizzle_3_to_4_yxyy_t yxyy;
		double3_swizzle_3_to_4_zxyy_t zxyy;
		double3_swizzle_3_to_4_xyyy_t xyyy;
		double3_swizzle_3_to_4_yyyy_t yyyy;
		double3_swizzle_3_to_4_zyyy_t zyyy;
		double3_swizzle_3_to_4_xzyy_t xzyy;
		double3_swizzle_3_to_4_yzyy_t yzyy;
		double3_swizzle_3_to_4_zzyy_t zzyy;
		double3_swizzle_3_to_4_xxzy_t xxzy;
		double3_swizzle_3_to_4_yxzy_t yxzy;
		double3_swizzle_3_to_4_zxzy_t zxzy;
		double3_swizzle_3_to_4_xyzy_t xyzy;
		double3_swizzle_3_to_4_yyzy_t yyzy;
		double3_swizzle_3_to_4_zyzy_t zyzy;
		double3_swizzle_3_to_4_xzzy_t xzzy;
		double3_swizzle_3_to_4_yzzy_t yzzy;
		double3_swizzle_3_to_4_zzzy_t zzzy;
		double3_swizzle_3_to_4_xxxz_t xxxz;
		double3_swizzle_3_to_4_yxxz_t yxxz;
		double3_swizzle_3_to_4_zxxz_t zxxz;
		double3_swizzle_3_to_4_xyxz_t xyxz;
		double3_swizzle_3_to_4_yyxz_t yyxz;
		double3_swizzle_3_to_4_zyxz_t zyxz;
		double3_swizzle_3_to_4_xzxz_t xzxz;
		double3_swizzle_3_to_4_yzxz_t yzxz;
		double3_swizzle_3_to_4_zzxz_t zzxz;
		double3_swizzle_3_to_4_xxyz_t xxyz;
		double3_swizzle_3_to_4_yxyz_t yxyz;
		double3_swizzle_3_to_4_zxyz_t zxyz;
		double3_swizzle_3_to_4_xyyz_t xyyz;
		double3_swizzle_3_to_4_yyyz_t yyyz;
		double3_swizzle_3_to_4_zyyz_t zyyz;
		double3_swizzle_3_to_4_xzyz_t xzyz;
		double3_swizzle_3_to_4_yzyz_t yzyz;
		double3_swizzle_3_to_4_zzyz_t zzyz;
		double3_swizzle_3_to_4_xxzz_t xxzz;
		double3_swizzle_3_to_4_yxzz_t yxzz;
		double3_swizzle_3_to_4_zxzz_t zxzz;
		double3_swizzle_3_to_4_xyzz_t xyzz;
		double3_swizzle_3_to_4_yyzz_t yyzz;
		double3_swizzle_3_to_4_zyzz_t zyzz;
		double3_swizzle_3_to_4_xzzz_t xzzz;
		double3_swizzle_3_to_4_yzzz_t yzzz;
		double3_swizzle_3_to_4_zzzz_t zzzz;

		double3_swizzle_3_to_2_rr_t rr;
		double3_swizzle_3_to_2_gr_t gr;
		double3_swizzle_3_to_2_br_t br;
		double3_swizzle_3_to_2_rg_t rg;
		double3_swizzle_3_to_2_gg_t gg;
		double3_swizzle_3_to_2_bg_t bg;
		double3_swizzle_3_to_2_rb_t rb;
		double3_swizzle_3_to_2_gb_t gb;
		double3_swizzle_3_to_2_bb_t bb;
		double3_swizzle_3_to_3_rrr_t rrr;
		double3_swizzle_3_to_3_grr_t grr;
		double3_swizzle_3_to_3_brr_t brr;
		double3_swizzle_3_to_3_rgr_t rgr;
		double3_swizzle_3_to_3_ggr_t ggr;
		double3_swizzle_3_to_3_bgr_t bgr;
		double3_swizzle_3_to_3_rbr_t rbr;
		double3_swizzle_3_to_3_gbr_t gbr;
		double3_swizzle_3_to_3_bbr_t bbr;
		double3_swizzle_3_to_3_rrg_t rrg;
		double3_swizzle_3_to_3_grg_t grg;
		double3_swizzle_3_to_3_brg_t brg;
		double3_swizzle_3_to_3_rgg_t rgg;
		double3_swizzle_3_to_3_ggg_t ggg;
		double3_swizzle_3_to_3_bgg_t bgg;
		double3_swizzle_3_to_3_rbg_t rbg;
		double3_swizzle_3_to_3_gbg_t gbg;
		double3_swizzle_3_to_3_bbg_t bbg;
		double3_swizzle_3_to_3_rrb_t rrb;
		double3_swizzle_3_to_3_grb_t grb;
		double3_swizzle_3_to_3_brb_t brb;
		double3_swizzle_3_to_3_rgb_t rgb;
		double3_swizzle_3_to_3_ggb_t ggb;
		double3_swizzle_3_to_3_bgb_t bgb;
		double3_swizzle_3_to_3_rbb_t rbb;
		double3_swizzle_3_to_3_gbb_t gbb;
		double3_swizzle_3_to_3_bbb_t bbb;
		double3_swizzle_3_to_4_rrrr_t rrrr;
		double3_swizzle_3_to_4_grrr_t grrr;
		double3_swizzle_3_to_4_brrr_t brrr;
		double3_swizzle_3_to_4_rgrr_t rgrr;
		double3_swizzle_3_to_4_ggrr_t ggrr;
		double3_swizzle_3_to_4_bgrr_t bgrr;
		double3_swizzle_3_to_4_rbrr_t rbrr;
		double3_swizzle_3_to_4_gbrr_t gbrr;
		double3_swizzle_3_to_4_bbrr_t bbrr;
		double3_swizzle_3_to_4_rrgr_t rrgr;
		double3_swizzle_3_to_4_grgr_t grgr;
		double3_swizzle_3_to_4_brgr_t brgr;
		double3_swizzle_3_to_4_rggr_t rggr;
		double3_swizzle_3_to_4_gggr_t gggr;
		double3_swizzle_3_to_4_bggr_t bggr;
		double3_swizzle_3_to_4_rbgr_t rbgr;
		double3_swizzle_3_to_4_gbgr_t gbgr;
		double3_swizzle_3_to_4_bbgr_t bbgr;
		double3_swizzle_3_to_4_rrbr_t rrbr;
		double3_swizzle_3_to_4_grbr_t grbr;
		double3_swizzle_3_to_4_brbr_t brbr;
		double3_swizzle_3_to_4_rgbr_t rgbr;
		double3_swizzle_3_to_4_ggbr_t ggbr;
		double3_swizzle_3_to_4_bgbr_t bgbr;
		double3_swizzle_3_to_4_rbbr_t rbbr;
		double3_swizzle_3_to_4_gbbr_t gbbr;
		double3_swizzle_3_to_4_bbbr_t bbbr;
		double3_swizzle_3_to_4_rrrg_t rrrg;
		double3_swizzle_3_to_4_grrg_t grrg;
		double3_swizzle_3_to_4_brrg_t brrg;
		double3_swizzle_3_to_4_rgrg_t rgrg;
		double3_swizzle_3_to_4_ggrg_t ggrg;
		double3_swizzle_3_to_4_bgrg_t bgrg;
		double3_swizzle_3_to_4_rbrg_t rbrg;
		double3_swizzle_3_to_4_gbrg_t gbrg;
		double3_swizzle_3_to_4_bbrg_t bbrg;
		double3_swizzle_3_to_4_rrgg_t rrgg;
		double3_swizzle_3_to_4_grgg_t grgg;
		double3_swizzle_3_to_4_brgg_t brgg;
		double3_swizzle_3_to_4_rggg_t rggg;
		double3_swizzle_3_to_4_gggg_t gggg;
		double3_swizzle_3_to_4_bggg_t bggg;
		double3_swizzle_3_to_4_rbgg_t rbgg;
		double3_swizzle_3_to_4_gbgg_t gbgg;
		double3_swizzle_3_to_4_bbgg_t bbgg;
		double3_swizzle_3_to_4_rrbg_t rrbg;
		double3_swizzle_3_to_4_grbg_t grbg;
		double3_swizzle_3_to_4_brbg_t brbg;
		double3_swizzle_3_to_4_rgbg_t rgbg;
		double3_swizzle_3_to_4_ggbg_t ggbg;
		double3_swizzle_3_to_4_bgbg_t bgbg;
		double3_swizzle_3_to_4_rbbg_t rbbg;
		double3_swizzle_3_to_4_gbbg_t gbbg;
		double3_swizzle_3_to_4_bbbg_t bbbg;
		double3_swizzle_3_to_4_rrrb_t rrrb;
		double3_swizzle_3_to_4_grrb_t grrb;
		double3_swizzle_3_to_4_brrb_t brrb;
		double3_swizzle_3_to_4_rgrb_t rgrb;
		double3_swizzle_3_to_4_ggrb_t ggrb;
		double3_swizzle_3_to_4_bgrb_t bgrb;
		double3_swizzle_3_to_4_rbrb_t rbrb;
		double3_swizzle_3_to_4_gbrb_t gbrb;
		double3_swizzle_3_to_4_bbrb_t bbrb;
		double3_swizzle_3_to_4_rrgb_t rrgb;
		double3_swizzle_3_to_4_grgb_t grgb;
		double3_swizzle_3_to_4_brgb_t brgb;
		double3_swizzle_3_to_4_rggb_t rggb;
		double3_swizzle_3_to_4_gggb_t gggb;
		double3_swizzle_3_to_4_bggb_t bggb;
		double3_swizzle_3_to_4_rbgb_t rbgb;
		double3_swizzle_3_to_4_gbgb_t gbgb;
		double3_swizzle_3_to_4_bbgb_t bbgb;
		double3_swizzle_3_to_4_rrbb_t rrbb;
		double3_swizzle_3_to_4_grbb_t grbb;
		double3_swizzle_3_to_4_brbb_t brbb;
		double3_swizzle_3_to_4_rgbb_t rgbb;
		double3_swizzle_3_to_4_ggbb_t ggbb;
		double3_swizzle_3_to_4_bgbb_t bgbb;
		double3_swizzle_3_to_4_rbbb_t rbbb;
		double3_swizzle_3_to_4_gbbb_t gbbb;
		double3_swizzle_3_to_4_bbbb_t bbbb;
	};

	// Default constructor.
	HLML_INLINE double3() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit double3( const double scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE double3( const double x, const double y, const double z );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE double3( const double2& other );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE double3( const double3& other );

	~double3() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE double3 operator=( const double2& other );

	// Copies all elements of 'other' into the vector.
	HLML_INLINE double3 operator=( const double3& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE double& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE const double& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

