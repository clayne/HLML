/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "bool2_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct bool2
{
	union
	{
		struct
		{
			bool32_t x;
			bool32_t y;
		};

		struct
		{
			bool32_t r;
			bool32_t g;
		};

		bool32_t v[2];

		// swizzles
		bool2_swizzle_2_to_2_xx_t xx;
		bool2_swizzle_2_to_2_yx_t yx;
		bool2_swizzle_2_to_2_xy_t xy;
		bool2_swizzle_2_to_2_yy_t yy;
		bool2_swizzle_2_to_3_xxx_t xxx;
		bool2_swizzle_2_to_3_yxx_t yxx;
		bool2_swizzle_2_to_3_xyx_t xyx;
		bool2_swizzle_2_to_3_yyx_t yyx;
		bool2_swizzle_2_to_3_xxy_t xxy;
		bool2_swizzle_2_to_3_yxy_t yxy;
		bool2_swizzle_2_to_3_xyy_t xyy;
		bool2_swizzle_2_to_3_yyy_t yyy;
		bool2_swizzle_2_to_4_xxxx_t xxxx;
		bool2_swizzle_2_to_4_yxxx_t yxxx;
		bool2_swizzle_2_to_4_xyxx_t xyxx;
		bool2_swizzle_2_to_4_yyxx_t yyxx;
		bool2_swizzle_2_to_4_xxyx_t xxyx;
		bool2_swizzle_2_to_4_yxyx_t yxyx;
		bool2_swizzle_2_to_4_xyyx_t xyyx;
		bool2_swizzle_2_to_4_yyyx_t yyyx;
		bool2_swizzle_2_to_4_xxxy_t xxxy;
		bool2_swizzle_2_to_4_yxxy_t yxxy;
		bool2_swizzle_2_to_4_xyxy_t xyxy;
		bool2_swizzle_2_to_4_yyxy_t yyxy;
		bool2_swizzle_2_to_4_xxyy_t xxyy;
		bool2_swizzle_2_to_4_yxyy_t yxyy;
		bool2_swizzle_2_to_4_xyyy_t xyyy;
		bool2_swizzle_2_to_4_yyyy_t yyyy;

		bool2_swizzle_2_to_2_rr_t rr;
		bool2_swizzle_2_to_2_gr_t gr;
		bool2_swizzle_2_to_2_rg_t rg;
		bool2_swizzle_2_to_2_gg_t gg;
		bool2_swizzle_2_to_3_rrr_t rrr;
		bool2_swizzle_2_to_3_grr_t grr;
		bool2_swizzle_2_to_3_rgr_t rgr;
		bool2_swizzle_2_to_3_ggr_t ggr;
		bool2_swizzle_2_to_3_rrg_t rrg;
		bool2_swizzle_2_to_3_grg_t grg;
		bool2_swizzle_2_to_3_rgg_t rgg;
		bool2_swizzle_2_to_3_ggg_t ggg;
		bool2_swizzle_2_to_4_rrrr_t rrrr;
		bool2_swizzle_2_to_4_grrr_t grrr;
		bool2_swizzle_2_to_4_rgrr_t rgrr;
		bool2_swizzle_2_to_4_ggrr_t ggrr;
		bool2_swizzle_2_to_4_rrgr_t rrgr;
		bool2_swizzle_2_to_4_grgr_t grgr;
		bool2_swizzle_2_to_4_rggr_t rggr;
		bool2_swizzle_2_to_4_gggr_t gggr;
		bool2_swizzle_2_to_4_rrrg_t rrrg;
		bool2_swizzle_2_to_4_grrg_t grrg;
		bool2_swizzle_2_to_4_rgrg_t rgrg;
		bool2_swizzle_2_to_4_ggrg_t ggrg;
		bool2_swizzle_2_to_4_rrgg_t rrgg;
		bool2_swizzle_2_to_4_grgg_t grgg;
		bool2_swizzle_2_to_4_rggg_t rggg;
		bool2_swizzle_2_to_4_gggg_t gggg;
	};

	// Default constructor.
	HLML_INLINE bool2() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit bool2( const bool32_t scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE bool2( const bool32_t x, const bool32_t y );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE bool2( const bool2& other );

	~bool2() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE bool2 operator=( const bool2& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE bool32_t& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE const bool32_t& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

