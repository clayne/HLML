/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "double2_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct double2
{
	union
	{
		struct
		{
			double x;
			double y;
		};

		struct
		{
			double r;
			double g;
		};

		double v[2];

		// swizzles
		double2_swizzle_2_to_2_xx_t xx;
		double2_swizzle_2_to_2_yx_t yx;
		double2_swizzle_2_to_2_xy_t xy;
		double2_swizzle_2_to_2_yy_t yy;
		double2_swizzle_2_to_3_xxx_t xxx;
		double2_swizzle_2_to_3_yxx_t yxx;
		double2_swizzle_2_to_3_xyx_t xyx;
		double2_swizzle_2_to_3_yyx_t yyx;
		double2_swizzle_2_to_3_xxy_t xxy;
		double2_swizzle_2_to_3_yxy_t yxy;
		double2_swizzle_2_to_3_xyy_t xyy;
		double2_swizzle_2_to_3_yyy_t yyy;
		double2_swizzle_2_to_4_xxxx_t xxxx;
		double2_swizzle_2_to_4_yxxx_t yxxx;
		double2_swizzle_2_to_4_xyxx_t xyxx;
		double2_swizzle_2_to_4_yyxx_t yyxx;
		double2_swizzle_2_to_4_xxyx_t xxyx;
		double2_swizzle_2_to_4_yxyx_t yxyx;
		double2_swizzle_2_to_4_xyyx_t xyyx;
		double2_swizzle_2_to_4_yyyx_t yyyx;
		double2_swizzle_2_to_4_xxxy_t xxxy;
		double2_swizzle_2_to_4_yxxy_t yxxy;
		double2_swizzle_2_to_4_xyxy_t xyxy;
		double2_swizzle_2_to_4_yyxy_t yyxy;
		double2_swizzle_2_to_4_xxyy_t xxyy;
		double2_swizzle_2_to_4_yxyy_t yxyy;
		double2_swizzle_2_to_4_xyyy_t xyyy;
		double2_swizzle_2_to_4_yyyy_t yyyy;

		double2_swizzle_2_to_2_rr_t rr;
		double2_swizzle_2_to_2_gr_t gr;
		double2_swizzle_2_to_2_rg_t rg;
		double2_swizzle_2_to_2_gg_t gg;
		double2_swizzle_2_to_3_rrr_t rrr;
		double2_swizzle_2_to_3_grr_t grr;
		double2_swizzle_2_to_3_rgr_t rgr;
		double2_swizzle_2_to_3_ggr_t ggr;
		double2_swizzle_2_to_3_rrg_t rrg;
		double2_swizzle_2_to_3_grg_t grg;
		double2_swizzle_2_to_3_rgg_t rgg;
		double2_swizzle_2_to_3_ggg_t ggg;
		double2_swizzle_2_to_4_rrrr_t rrrr;
		double2_swizzle_2_to_4_grrr_t grrr;
		double2_swizzle_2_to_4_rgrr_t rgrr;
		double2_swizzle_2_to_4_ggrr_t ggrr;
		double2_swizzle_2_to_4_rrgr_t rrgr;
		double2_swizzle_2_to_4_grgr_t grgr;
		double2_swizzle_2_to_4_rggr_t rggr;
		double2_swizzle_2_to_4_gggr_t gggr;
		double2_swizzle_2_to_4_rrrg_t rrrg;
		double2_swizzle_2_to_4_grrg_t grrg;
		double2_swizzle_2_to_4_rgrg_t rgrg;
		double2_swizzle_2_to_4_ggrg_t ggrg;
		double2_swizzle_2_to_4_rrgg_t rrgg;
		double2_swizzle_2_to_4_grgg_t grgg;
		double2_swizzle_2_to_4_rggg_t rggg;
		double2_swizzle_2_to_4_gggg_t gggg;
	};

	// Default constructor.
	HLML_INLINE double2() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit double2( const double scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE double2( const double x, const double y );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE double2( const double2& other );

	~double2() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE double2 operator=( const double2& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE double& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE const double& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

