/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

struct double3;
struct double4;

#include "hlml_types.h"
#include "hlml_defines.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct double2
{
	union
	{
		struct
		{
			double x;
			double y;
		};

		struct
		{
			double r;
			double g;
		};

		double v[2];
	};

	// Default constructor.
	HLML_INLINE double2() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit double2( const double scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE double2( const double x, const double y );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE double2( const double2& other );

	~double2() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE double2 operator=( const double2& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE double& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE const double& operator[]( const int32_t index ) const;

	// swizzle functions
	HLML_INLINE double2 xx() const;
	HLML_INLINE double2 xy() const;
	HLML_INLINE double2 yx() const;
	HLML_INLINE double2 yy() const;
	HLML_INLINE double3 xxx() const;
	HLML_INLINE double3 xxy() const;
	HLML_INLINE double3 xyx() const;
	HLML_INLINE double3 xyy() const;
	HLML_INLINE double3 yxx() const;
	HLML_INLINE double3 yxy() const;
	HLML_INLINE double3 yyx() const;
	HLML_INLINE double3 yyy() const;
	HLML_INLINE double4 xxxx() const;
	HLML_INLINE double4 xxxy() const;
	HLML_INLINE double4 xxyx() const;
	HLML_INLINE double4 xxyy() const;
	HLML_INLINE double4 xyxx() const;
	HLML_INLINE double4 xyxy() const;
	HLML_INLINE double4 xyyx() const;
	HLML_INLINE double4 xyyy() const;
	HLML_INLINE double4 yxxx() const;
	HLML_INLINE double4 yxxy() const;
	HLML_INLINE double4 yxyx() const;
	HLML_INLINE double4 yxyy() const;
	HLML_INLINE double4 yyxx() const;
	HLML_INLINE double4 yyxy() const;
	HLML_INLINE double4 yyyx() const;
	HLML_INLINE double4 yyyy() const;

	HLML_INLINE double2 rr() const;
	HLML_INLINE double2 rg() const;
	HLML_INLINE double2 gr() const;
	HLML_INLINE double2 gg() const;
	HLML_INLINE double3 rrr() const;
	HLML_INLINE double3 rrg() const;
	HLML_INLINE double3 rgr() const;
	HLML_INLINE double3 rgg() const;
	HLML_INLINE double3 grr() const;
	HLML_INLINE double3 grg() const;
	HLML_INLINE double3 ggr() const;
	HLML_INLINE double3 ggg() const;
	HLML_INLINE double4 rrrr() const;
	HLML_INLINE double4 rrrg() const;
	HLML_INLINE double4 rrgr() const;
	HLML_INLINE double4 rrgg() const;
	HLML_INLINE double4 rgrr() const;
	HLML_INLINE double4 rgrg() const;
	HLML_INLINE double4 rggr() const;
	HLML_INLINE double4 rggg() const;
	HLML_INLINE double4 grrr() const;
	HLML_INLINE double4 grrg() const;
	HLML_INLINE double4 grgr() const;
	HLML_INLINE double4 grgg() const;
	HLML_INLINE double4 ggrr() const;
	HLML_INLINE double4 ggrg() const;
	HLML_INLINE double4 gggr() const;
	HLML_INLINE double4 gggg() const;

};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif
