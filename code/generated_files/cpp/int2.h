/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "int2_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct int2
{
	union
	{
		struct
		{
			int32_t x;
			int32_t y;
		};

		struct
		{
			int32_t r;
			int32_t g;
		};

		int32_t v[2];

		// swizzles
		int2_swizzle_2_to_2_xx_t xx;
		int2_swizzle_2_to_2_yx_t yx;
		int2_swizzle_2_to_2_xy_t xy;
		int2_swizzle_2_to_2_yy_t yy;
		int2_swizzle_2_to_3_xxx_t xxx;
		int2_swizzle_2_to_3_yxx_t yxx;
		int2_swizzle_2_to_3_xyx_t xyx;
		int2_swizzle_2_to_3_yyx_t yyx;
		int2_swizzle_2_to_3_xxy_t xxy;
		int2_swizzle_2_to_3_yxy_t yxy;
		int2_swizzle_2_to_3_xyy_t xyy;
		int2_swizzle_2_to_3_yyy_t yyy;
		int2_swizzle_2_to_4_xxxx_t xxxx;
		int2_swizzle_2_to_4_yxxx_t yxxx;
		int2_swizzle_2_to_4_xyxx_t xyxx;
		int2_swizzle_2_to_4_yyxx_t yyxx;
		int2_swizzle_2_to_4_xxyx_t xxyx;
		int2_swizzle_2_to_4_yxyx_t yxyx;
		int2_swizzle_2_to_4_xyyx_t xyyx;
		int2_swizzle_2_to_4_yyyx_t yyyx;
		int2_swizzle_2_to_4_xxxy_t xxxy;
		int2_swizzle_2_to_4_yxxy_t yxxy;
		int2_swizzle_2_to_4_xyxy_t xyxy;
		int2_swizzle_2_to_4_yyxy_t yyxy;
		int2_swizzle_2_to_4_xxyy_t xxyy;
		int2_swizzle_2_to_4_yxyy_t yxyy;
		int2_swizzle_2_to_4_xyyy_t xyyy;
		int2_swizzle_2_to_4_yyyy_t yyyy;

		int2_swizzle_2_to_2_rr_t rr;
		int2_swizzle_2_to_2_gr_t gr;
		int2_swizzle_2_to_2_rg_t rg;
		int2_swizzle_2_to_2_gg_t gg;
		int2_swizzle_2_to_3_rrr_t rrr;
		int2_swizzle_2_to_3_grr_t grr;
		int2_swizzle_2_to_3_rgr_t rgr;
		int2_swizzle_2_to_3_ggr_t ggr;
		int2_swizzle_2_to_3_rrg_t rrg;
		int2_swizzle_2_to_3_grg_t grg;
		int2_swizzle_2_to_3_rgg_t rgg;
		int2_swizzle_2_to_3_ggg_t ggg;
		int2_swizzle_2_to_4_rrrr_t rrrr;
		int2_swizzle_2_to_4_grrr_t grrr;
		int2_swizzle_2_to_4_rgrr_t rgrr;
		int2_swizzle_2_to_4_ggrr_t ggrr;
		int2_swizzle_2_to_4_rrgr_t rrgr;
		int2_swizzle_2_to_4_grgr_t grgr;
		int2_swizzle_2_to_4_rggr_t rggr;
		int2_swizzle_2_to_4_gggr_t gggr;
		int2_swizzle_2_to_4_rrrg_t rrrg;
		int2_swizzle_2_to_4_grrg_t grrg;
		int2_swizzle_2_to_4_rgrg_t rgrg;
		int2_swizzle_2_to_4_ggrg_t ggrg;
		int2_swizzle_2_to_4_rrgg_t rrgg;
		int2_swizzle_2_to_4_grgg_t grgg;
		int2_swizzle_2_to_4_rggg_t rggg;
		int2_swizzle_2_to_4_gggg_t gggg;
	};

	// Default constructor.
	HLML_INLINE int2() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit int2( const int32_t scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE int2( const int32_t x, const int32_t y );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE int2( const int2& other );

	~int2() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE int2 operator=( const int2& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE int32_t& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 1.
	HLML_INLINE const int32_t& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

