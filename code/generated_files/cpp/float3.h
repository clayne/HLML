/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "float3_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct float3
{
	union
	{
		struct
		{
			float x;
			float y;
			float z;
		};

		struct
		{
			float r;
			float g;
			float b;
		};

		float v[3];

		// swizzles
		float3_swizzle_3_to_2_xx_t xx;
		float3_swizzle_3_to_2_yx_t yx;
		float3_swizzle_3_to_2_zx_t zx;
		float3_swizzle_3_to_2_xy_t xy;
		float3_swizzle_3_to_2_yy_t yy;
		float3_swizzle_3_to_2_zy_t zy;
		float3_swizzle_3_to_2_xz_t xz;
		float3_swizzle_3_to_2_yz_t yz;
		float3_swizzle_3_to_2_zz_t zz;
		float3_swizzle_3_to_3_xxx_t xxx;
		float3_swizzle_3_to_3_yxx_t yxx;
		float3_swizzle_3_to_3_zxx_t zxx;
		float3_swizzle_3_to_3_xyx_t xyx;
		float3_swizzle_3_to_3_yyx_t yyx;
		float3_swizzle_3_to_3_zyx_t zyx;
		float3_swizzle_3_to_3_xzx_t xzx;
		float3_swizzle_3_to_3_yzx_t yzx;
		float3_swizzle_3_to_3_zzx_t zzx;
		float3_swizzle_3_to_3_xxy_t xxy;
		float3_swizzle_3_to_3_yxy_t yxy;
		float3_swizzle_3_to_3_zxy_t zxy;
		float3_swizzle_3_to_3_xyy_t xyy;
		float3_swizzle_3_to_3_yyy_t yyy;
		float3_swizzle_3_to_3_zyy_t zyy;
		float3_swizzle_3_to_3_xzy_t xzy;
		float3_swizzle_3_to_3_yzy_t yzy;
		float3_swizzle_3_to_3_zzy_t zzy;
		float3_swizzle_3_to_3_xxz_t xxz;
		float3_swizzle_3_to_3_yxz_t yxz;
		float3_swizzle_3_to_3_zxz_t zxz;
		float3_swizzle_3_to_3_xyz_t xyz;
		float3_swizzle_3_to_3_yyz_t yyz;
		float3_swizzle_3_to_3_zyz_t zyz;
		float3_swizzle_3_to_3_xzz_t xzz;
		float3_swizzle_3_to_3_yzz_t yzz;
		float3_swizzle_3_to_3_zzz_t zzz;
		float3_swizzle_3_to_4_xxxx_t xxxx;
		float3_swizzle_3_to_4_yxxx_t yxxx;
		float3_swizzle_3_to_4_zxxx_t zxxx;
		float3_swizzle_3_to_4_xyxx_t xyxx;
		float3_swizzle_3_to_4_yyxx_t yyxx;
		float3_swizzle_3_to_4_zyxx_t zyxx;
		float3_swizzle_3_to_4_xzxx_t xzxx;
		float3_swizzle_3_to_4_yzxx_t yzxx;
		float3_swizzle_3_to_4_zzxx_t zzxx;
		float3_swizzle_3_to_4_xxyx_t xxyx;
		float3_swizzle_3_to_4_yxyx_t yxyx;
		float3_swizzle_3_to_4_zxyx_t zxyx;
		float3_swizzle_3_to_4_xyyx_t xyyx;
		float3_swizzle_3_to_4_yyyx_t yyyx;
		float3_swizzle_3_to_4_zyyx_t zyyx;
		float3_swizzle_3_to_4_xzyx_t xzyx;
		float3_swizzle_3_to_4_yzyx_t yzyx;
		float3_swizzle_3_to_4_zzyx_t zzyx;
		float3_swizzle_3_to_4_xxzx_t xxzx;
		float3_swizzle_3_to_4_yxzx_t yxzx;
		float3_swizzle_3_to_4_zxzx_t zxzx;
		float3_swizzle_3_to_4_xyzx_t xyzx;
		float3_swizzle_3_to_4_yyzx_t yyzx;
		float3_swizzle_3_to_4_zyzx_t zyzx;
		float3_swizzle_3_to_4_xzzx_t xzzx;
		float3_swizzle_3_to_4_yzzx_t yzzx;
		float3_swizzle_3_to_4_zzzx_t zzzx;
		float3_swizzle_3_to_4_xxxy_t xxxy;
		float3_swizzle_3_to_4_yxxy_t yxxy;
		float3_swizzle_3_to_4_zxxy_t zxxy;
		float3_swizzle_3_to_4_xyxy_t xyxy;
		float3_swizzle_3_to_4_yyxy_t yyxy;
		float3_swizzle_3_to_4_zyxy_t zyxy;
		float3_swizzle_3_to_4_xzxy_t xzxy;
		float3_swizzle_3_to_4_yzxy_t yzxy;
		float3_swizzle_3_to_4_zzxy_t zzxy;
		float3_swizzle_3_to_4_xxyy_t xxyy;
		float3_swizzle_3_to_4_yxyy_t yxyy;
		float3_swizzle_3_to_4_zxyy_t zxyy;
		float3_swizzle_3_to_4_xyyy_t xyyy;
		float3_swizzle_3_to_4_yyyy_t yyyy;
		float3_swizzle_3_to_4_zyyy_t zyyy;
		float3_swizzle_3_to_4_xzyy_t xzyy;
		float3_swizzle_3_to_4_yzyy_t yzyy;
		float3_swizzle_3_to_4_zzyy_t zzyy;
		float3_swizzle_3_to_4_xxzy_t xxzy;
		float3_swizzle_3_to_4_yxzy_t yxzy;
		float3_swizzle_3_to_4_zxzy_t zxzy;
		float3_swizzle_3_to_4_xyzy_t xyzy;
		float3_swizzle_3_to_4_yyzy_t yyzy;
		float3_swizzle_3_to_4_zyzy_t zyzy;
		float3_swizzle_3_to_4_xzzy_t xzzy;
		float3_swizzle_3_to_4_yzzy_t yzzy;
		float3_swizzle_3_to_4_zzzy_t zzzy;
		float3_swizzle_3_to_4_xxxz_t xxxz;
		float3_swizzle_3_to_4_yxxz_t yxxz;
		float3_swizzle_3_to_4_zxxz_t zxxz;
		float3_swizzle_3_to_4_xyxz_t xyxz;
		float3_swizzle_3_to_4_yyxz_t yyxz;
		float3_swizzle_3_to_4_zyxz_t zyxz;
		float3_swizzle_3_to_4_xzxz_t xzxz;
		float3_swizzle_3_to_4_yzxz_t yzxz;
		float3_swizzle_3_to_4_zzxz_t zzxz;
		float3_swizzle_3_to_4_xxyz_t xxyz;
		float3_swizzle_3_to_4_yxyz_t yxyz;
		float3_swizzle_3_to_4_zxyz_t zxyz;
		float3_swizzle_3_to_4_xyyz_t xyyz;
		float3_swizzle_3_to_4_yyyz_t yyyz;
		float3_swizzle_3_to_4_zyyz_t zyyz;
		float3_swizzle_3_to_4_xzyz_t xzyz;
		float3_swizzle_3_to_4_yzyz_t yzyz;
		float3_swizzle_3_to_4_zzyz_t zzyz;
		float3_swizzle_3_to_4_xxzz_t xxzz;
		float3_swizzle_3_to_4_yxzz_t yxzz;
		float3_swizzle_3_to_4_zxzz_t zxzz;
		float3_swizzle_3_to_4_xyzz_t xyzz;
		float3_swizzle_3_to_4_yyzz_t yyzz;
		float3_swizzle_3_to_4_zyzz_t zyzz;
		float3_swizzle_3_to_4_xzzz_t xzzz;
		float3_swizzle_3_to_4_yzzz_t yzzz;
		float3_swizzle_3_to_4_zzzz_t zzzz;

		float3_swizzle_3_to_2_rr_t rr;
		float3_swizzle_3_to_2_gr_t gr;
		float3_swizzle_3_to_2_br_t br;
		float3_swizzle_3_to_2_rg_t rg;
		float3_swizzle_3_to_2_gg_t gg;
		float3_swizzle_3_to_2_bg_t bg;
		float3_swizzle_3_to_2_rb_t rb;
		float3_swizzle_3_to_2_gb_t gb;
		float3_swizzle_3_to_2_bb_t bb;
		float3_swizzle_3_to_3_rrr_t rrr;
		float3_swizzle_3_to_3_grr_t grr;
		float3_swizzle_3_to_3_brr_t brr;
		float3_swizzle_3_to_3_rgr_t rgr;
		float3_swizzle_3_to_3_ggr_t ggr;
		float3_swizzle_3_to_3_bgr_t bgr;
		float3_swizzle_3_to_3_rbr_t rbr;
		float3_swizzle_3_to_3_gbr_t gbr;
		float3_swizzle_3_to_3_bbr_t bbr;
		float3_swizzle_3_to_3_rrg_t rrg;
		float3_swizzle_3_to_3_grg_t grg;
		float3_swizzle_3_to_3_brg_t brg;
		float3_swizzle_3_to_3_rgg_t rgg;
		float3_swizzle_3_to_3_ggg_t ggg;
		float3_swizzle_3_to_3_bgg_t bgg;
		float3_swizzle_3_to_3_rbg_t rbg;
		float3_swizzle_3_to_3_gbg_t gbg;
		float3_swizzle_3_to_3_bbg_t bbg;
		float3_swizzle_3_to_3_rrb_t rrb;
		float3_swizzle_3_to_3_grb_t grb;
		float3_swizzle_3_to_3_brb_t brb;
		float3_swizzle_3_to_3_rgb_t rgb;
		float3_swizzle_3_to_3_ggb_t ggb;
		float3_swizzle_3_to_3_bgb_t bgb;
		float3_swizzle_3_to_3_rbb_t rbb;
		float3_swizzle_3_to_3_gbb_t gbb;
		float3_swizzle_3_to_3_bbb_t bbb;
		float3_swizzle_3_to_4_rrrr_t rrrr;
		float3_swizzle_3_to_4_grrr_t grrr;
		float3_swizzle_3_to_4_brrr_t brrr;
		float3_swizzle_3_to_4_rgrr_t rgrr;
		float3_swizzle_3_to_4_ggrr_t ggrr;
		float3_swizzle_3_to_4_bgrr_t bgrr;
		float3_swizzle_3_to_4_rbrr_t rbrr;
		float3_swizzle_3_to_4_gbrr_t gbrr;
		float3_swizzle_3_to_4_bbrr_t bbrr;
		float3_swizzle_3_to_4_rrgr_t rrgr;
		float3_swizzle_3_to_4_grgr_t grgr;
		float3_swizzle_3_to_4_brgr_t brgr;
		float3_swizzle_3_to_4_rggr_t rggr;
		float3_swizzle_3_to_4_gggr_t gggr;
		float3_swizzle_3_to_4_bggr_t bggr;
		float3_swizzle_3_to_4_rbgr_t rbgr;
		float3_swizzle_3_to_4_gbgr_t gbgr;
		float3_swizzle_3_to_4_bbgr_t bbgr;
		float3_swizzle_3_to_4_rrbr_t rrbr;
		float3_swizzle_3_to_4_grbr_t grbr;
		float3_swizzle_3_to_4_brbr_t brbr;
		float3_swizzle_3_to_4_rgbr_t rgbr;
		float3_swizzle_3_to_4_ggbr_t ggbr;
		float3_swizzle_3_to_4_bgbr_t bgbr;
		float3_swizzle_3_to_4_rbbr_t rbbr;
		float3_swizzle_3_to_4_gbbr_t gbbr;
		float3_swizzle_3_to_4_bbbr_t bbbr;
		float3_swizzle_3_to_4_rrrg_t rrrg;
		float3_swizzle_3_to_4_grrg_t grrg;
		float3_swizzle_3_to_4_brrg_t brrg;
		float3_swizzle_3_to_4_rgrg_t rgrg;
		float3_swizzle_3_to_4_ggrg_t ggrg;
		float3_swizzle_3_to_4_bgrg_t bgrg;
		float3_swizzle_3_to_4_rbrg_t rbrg;
		float3_swizzle_3_to_4_gbrg_t gbrg;
		float3_swizzle_3_to_4_bbrg_t bbrg;
		float3_swizzle_3_to_4_rrgg_t rrgg;
		float3_swizzle_3_to_4_grgg_t grgg;
		float3_swizzle_3_to_4_brgg_t brgg;
		float3_swizzle_3_to_4_rggg_t rggg;
		float3_swizzle_3_to_4_gggg_t gggg;
		float3_swizzle_3_to_4_bggg_t bggg;
		float3_swizzle_3_to_4_rbgg_t rbgg;
		float3_swizzle_3_to_4_gbgg_t gbgg;
		float3_swizzle_3_to_4_bbgg_t bbgg;
		float3_swizzle_3_to_4_rrbg_t rrbg;
		float3_swizzle_3_to_4_grbg_t grbg;
		float3_swizzle_3_to_4_brbg_t brbg;
		float3_swizzle_3_to_4_rgbg_t rgbg;
		float3_swizzle_3_to_4_ggbg_t ggbg;
		float3_swizzle_3_to_4_bgbg_t bgbg;
		float3_swizzle_3_to_4_rbbg_t rbbg;
		float3_swizzle_3_to_4_gbbg_t gbbg;
		float3_swizzle_3_to_4_bbbg_t bbbg;
		float3_swizzle_3_to_4_rrrb_t rrrb;
		float3_swizzle_3_to_4_grrb_t grrb;
		float3_swizzle_3_to_4_brrb_t brrb;
		float3_swizzle_3_to_4_rgrb_t rgrb;
		float3_swizzle_3_to_4_ggrb_t ggrb;
		float3_swizzle_3_to_4_bgrb_t bgrb;
		float3_swizzle_3_to_4_rbrb_t rbrb;
		float3_swizzle_3_to_4_gbrb_t gbrb;
		float3_swizzle_3_to_4_bbrb_t bbrb;
		float3_swizzle_3_to_4_rrgb_t rrgb;
		float3_swizzle_3_to_4_grgb_t grgb;
		float3_swizzle_3_to_4_brgb_t brgb;
		float3_swizzle_3_to_4_rggb_t rggb;
		float3_swizzle_3_to_4_gggb_t gggb;
		float3_swizzle_3_to_4_bggb_t bggb;
		float3_swizzle_3_to_4_rbgb_t rbgb;
		float3_swizzle_3_to_4_gbgb_t gbgb;
		float3_swizzle_3_to_4_bbgb_t bbgb;
		float3_swizzle_3_to_4_rrbb_t rrbb;
		float3_swizzle_3_to_4_grbb_t grbb;
		float3_swizzle_3_to_4_brbb_t brbb;
		float3_swizzle_3_to_4_rgbb_t rgbb;
		float3_swizzle_3_to_4_ggbb_t ggbb;
		float3_swizzle_3_to_4_bgbb_t bgbb;
		float3_swizzle_3_to_4_rbbb_t rbbb;
		float3_swizzle_3_to_4_gbbb_t gbbb;
		float3_swizzle_3_to_4_bbbb_t bbbb;
	};

	// Default constructor.
	HLML_INLINE float3() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit float3( const float scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE float3( const float x, const float y, const float z );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE float3( const float2& other );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE float3( const float3& other );

	~float3() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE float3 operator=( const float2& other );

	// Copies all elements of 'other' into the vector.
	HLML_INLINE float3 operator=( const float3& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE float& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE const float& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

