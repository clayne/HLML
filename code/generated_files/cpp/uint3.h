/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

struct uint2;
struct uint4;

#include "hlml_types.h"
#include "hlml_defines.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct uint3
{
	union
	{
		struct
		{
			uint32_t x;
			uint32_t y;
			uint32_t z;
		};

		struct
		{
			uint32_t r;
			uint32_t g;
			uint32_t b;
		};

		uint32_t v[3];
	};

	// Default constructor.
	HLML_INLINE uint3() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit uint3( const uint32_t scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE uint3( const uint32_t x, const uint32_t y, const uint32_t z );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE uint3( const uint2& other );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE uint3( const uint3& other );

	~uint3() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE uint3 operator=( const uint2& other );

	// Copies all elements of 'other' into the vector.
	HLML_INLINE uint3 operator=( const uint3& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE uint32_t& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE const uint32_t& operator[]( const int32_t index ) const;

	// swizzle functions
	HLML_INLINE uint2 xx() const;
	HLML_INLINE uint2 xy() const;
	HLML_INLINE uint2 xz() const;
	HLML_INLINE uint2 yx() const;
	HLML_INLINE uint2 yy() const;
	HLML_INLINE uint2 yz() const;
	HLML_INLINE uint2 zx() const;
	HLML_INLINE uint2 zy() const;
	HLML_INLINE uint2 zz() const;
	HLML_INLINE uint3 xxx() const;
	HLML_INLINE uint3 xxy() const;
	HLML_INLINE uint3 xxz() const;
	HLML_INLINE uint3 xyx() const;
	HLML_INLINE uint3 xyy() const;
	HLML_INLINE uint3 xyz() const;
	HLML_INLINE uint3 xzx() const;
	HLML_INLINE uint3 xzy() const;
	HLML_INLINE uint3 xzz() const;
	HLML_INLINE uint3 yxx() const;
	HLML_INLINE uint3 yxy() const;
	HLML_INLINE uint3 yxz() const;
	HLML_INLINE uint3 yyx() const;
	HLML_INLINE uint3 yyy() const;
	HLML_INLINE uint3 yyz() const;
	HLML_INLINE uint3 yzx() const;
	HLML_INLINE uint3 yzy() const;
	HLML_INLINE uint3 yzz() const;
	HLML_INLINE uint3 zxx() const;
	HLML_INLINE uint3 zxy() const;
	HLML_INLINE uint3 zxz() const;
	HLML_INLINE uint3 zyx() const;
	HLML_INLINE uint3 zyy() const;
	HLML_INLINE uint3 zyz() const;
	HLML_INLINE uint3 zzx() const;
	HLML_INLINE uint3 zzy() const;
	HLML_INLINE uint3 zzz() const;
	HLML_INLINE uint4 xxxx() const;
	HLML_INLINE uint4 xxxy() const;
	HLML_INLINE uint4 xxxz() const;
	HLML_INLINE uint4 xxyx() const;
	HLML_INLINE uint4 xxyy() const;
	HLML_INLINE uint4 xxyz() const;
	HLML_INLINE uint4 xxzx() const;
	HLML_INLINE uint4 xxzy() const;
	HLML_INLINE uint4 xxzz() const;
	HLML_INLINE uint4 xyxx() const;
	HLML_INLINE uint4 xyxy() const;
	HLML_INLINE uint4 xyxz() const;
	HLML_INLINE uint4 xyyx() const;
	HLML_INLINE uint4 xyyy() const;
	HLML_INLINE uint4 xyyz() const;
	HLML_INLINE uint4 xyzx() const;
	HLML_INLINE uint4 xyzy() const;
	HLML_INLINE uint4 xyzz() const;
	HLML_INLINE uint4 xzxx() const;
	HLML_INLINE uint4 xzxy() const;
	HLML_INLINE uint4 xzxz() const;
	HLML_INLINE uint4 xzyx() const;
	HLML_INLINE uint4 xzyy() const;
	HLML_INLINE uint4 xzyz() const;
	HLML_INLINE uint4 xzzx() const;
	HLML_INLINE uint4 xzzy() const;
	HLML_INLINE uint4 xzzz() const;
	HLML_INLINE uint4 yxxx() const;
	HLML_INLINE uint4 yxxy() const;
	HLML_INLINE uint4 yxxz() const;
	HLML_INLINE uint4 yxyx() const;
	HLML_INLINE uint4 yxyy() const;
	HLML_INLINE uint4 yxyz() const;
	HLML_INLINE uint4 yxzx() const;
	HLML_INLINE uint4 yxzy() const;
	HLML_INLINE uint4 yxzz() const;
	HLML_INLINE uint4 yyxx() const;
	HLML_INLINE uint4 yyxy() const;
	HLML_INLINE uint4 yyxz() const;
	HLML_INLINE uint4 yyyx() const;
	HLML_INLINE uint4 yyyy() const;
	HLML_INLINE uint4 yyyz() const;
	HLML_INLINE uint4 yyzx() const;
	HLML_INLINE uint4 yyzy() const;
	HLML_INLINE uint4 yyzz() const;
	HLML_INLINE uint4 yzxx() const;
	HLML_INLINE uint4 yzxy() const;
	HLML_INLINE uint4 yzxz() const;
	HLML_INLINE uint4 yzyx() const;
	HLML_INLINE uint4 yzyy() const;
	HLML_INLINE uint4 yzyz() const;
	HLML_INLINE uint4 yzzx() const;
	HLML_INLINE uint4 yzzy() const;
	HLML_INLINE uint4 yzzz() const;
	HLML_INLINE uint4 zxxx() const;
	HLML_INLINE uint4 zxxy() const;
	HLML_INLINE uint4 zxxz() const;
	HLML_INLINE uint4 zxyx() const;
	HLML_INLINE uint4 zxyy() const;
	HLML_INLINE uint4 zxyz() const;
	HLML_INLINE uint4 zxzx() const;
	HLML_INLINE uint4 zxzy() const;
	HLML_INLINE uint4 zxzz() const;
	HLML_INLINE uint4 zyxx() const;
	HLML_INLINE uint4 zyxy() const;
	HLML_INLINE uint4 zyxz() const;
	HLML_INLINE uint4 zyyx() const;
	HLML_INLINE uint4 zyyy() const;
	HLML_INLINE uint4 zyyz() const;
	HLML_INLINE uint4 zyzx() const;
	HLML_INLINE uint4 zyzy() const;
	HLML_INLINE uint4 zyzz() const;
	HLML_INLINE uint4 zzxx() const;
	HLML_INLINE uint4 zzxy() const;
	HLML_INLINE uint4 zzxz() const;
	HLML_INLINE uint4 zzyx() const;
	HLML_INLINE uint4 zzyy() const;
	HLML_INLINE uint4 zzyz() const;
	HLML_INLINE uint4 zzzx() const;
	HLML_INLINE uint4 zzzy() const;
	HLML_INLINE uint4 zzzz() const;

	HLML_INLINE uint2 rr() const;
	HLML_INLINE uint2 rg() const;
	HLML_INLINE uint2 rb() const;
	HLML_INLINE uint2 gr() const;
	HLML_INLINE uint2 gg() const;
	HLML_INLINE uint2 gb() const;
	HLML_INLINE uint2 br() const;
	HLML_INLINE uint2 bg() const;
	HLML_INLINE uint2 bb() const;
	HLML_INLINE uint3 rrr() const;
	HLML_INLINE uint3 rrg() const;
	HLML_INLINE uint3 rrb() const;
	HLML_INLINE uint3 rgr() const;
	HLML_INLINE uint3 rgg() const;
	HLML_INLINE uint3 rgb() const;
	HLML_INLINE uint3 rbr() const;
	HLML_INLINE uint3 rbg() const;
	HLML_INLINE uint3 rbb() const;
	HLML_INLINE uint3 grr() const;
	HLML_INLINE uint3 grg() const;
	HLML_INLINE uint3 grb() const;
	HLML_INLINE uint3 ggr() const;
	HLML_INLINE uint3 ggg() const;
	HLML_INLINE uint3 ggb() const;
	HLML_INLINE uint3 gbr() const;
	HLML_INLINE uint3 gbg() const;
	HLML_INLINE uint3 gbb() const;
	HLML_INLINE uint3 brr() const;
	HLML_INLINE uint3 brg() const;
	HLML_INLINE uint3 brb() const;
	HLML_INLINE uint3 bgr() const;
	HLML_INLINE uint3 bgg() const;
	HLML_INLINE uint3 bgb() const;
	HLML_INLINE uint3 bbr() const;
	HLML_INLINE uint3 bbg() const;
	HLML_INLINE uint3 bbb() const;
	HLML_INLINE uint4 rrrr() const;
	HLML_INLINE uint4 rrrg() const;
	HLML_INLINE uint4 rrrb() const;
	HLML_INLINE uint4 rrgr() const;
	HLML_INLINE uint4 rrgg() const;
	HLML_INLINE uint4 rrgb() const;
	HLML_INLINE uint4 rrbr() const;
	HLML_INLINE uint4 rrbg() const;
	HLML_INLINE uint4 rrbb() const;
	HLML_INLINE uint4 rgrr() const;
	HLML_INLINE uint4 rgrg() const;
	HLML_INLINE uint4 rgrb() const;
	HLML_INLINE uint4 rggr() const;
	HLML_INLINE uint4 rggg() const;
	HLML_INLINE uint4 rggb() const;
	HLML_INLINE uint4 rgbr() const;
	HLML_INLINE uint4 rgbg() const;
	HLML_INLINE uint4 rgbb() const;
	HLML_INLINE uint4 rbrr() const;
	HLML_INLINE uint4 rbrg() const;
	HLML_INLINE uint4 rbrb() const;
	HLML_INLINE uint4 rbgr() const;
	HLML_INLINE uint4 rbgg() const;
	HLML_INLINE uint4 rbgb() const;
	HLML_INLINE uint4 rbbr() const;
	HLML_INLINE uint4 rbbg() const;
	HLML_INLINE uint4 rbbb() const;
	HLML_INLINE uint4 grrr() const;
	HLML_INLINE uint4 grrg() const;
	HLML_INLINE uint4 grrb() const;
	HLML_INLINE uint4 grgr() const;
	HLML_INLINE uint4 grgg() const;
	HLML_INLINE uint4 grgb() const;
	HLML_INLINE uint4 grbr() const;
	HLML_INLINE uint4 grbg() const;
	HLML_INLINE uint4 grbb() const;
	HLML_INLINE uint4 ggrr() const;
	HLML_INLINE uint4 ggrg() const;
	HLML_INLINE uint4 ggrb() const;
	HLML_INLINE uint4 gggr() const;
	HLML_INLINE uint4 gggg() const;
	HLML_INLINE uint4 gggb() const;
	HLML_INLINE uint4 ggbr() const;
	HLML_INLINE uint4 ggbg() const;
	HLML_INLINE uint4 ggbb() const;
	HLML_INLINE uint4 gbrr() const;
	HLML_INLINE uint4 gbrg() const;
	HLML_INLINE uint4 gbrb() const;
	HLML_INLINE uint4 gbgr() const;
	HLML_INLINE uint4 gbgg() const;
	HLML_INLINE uint4 gbgb() const;
	HLML_INLINE uint4 gbbr() const;
	HLML_INLINE uint4 gbbg() const;
	HLML_INLINE uint4 gbbb() const;
	HLML_INLINE uint4 brrr() const;
	HLML_INLINE uint4 brrg() const;
	HLML_INLINE uint4 brrb() const;
	HLML_INLINE uint4 brgr() const;
	HLML_INLINE uint4 brgg() const;
	HLML_INLINE uint4 brgb() const;
	HLML_INLINE uint4 brbr() const;
	HLML_INLINE uint4 brbg() const;
	HLML_INLINE uint4 brbb() const;
	HLML_INLINE uint4 bgrr() const;
	HLML_INLINE uint4 bgrg() const;
	HLML_INLINE uint4 bgrb() const;
	HLML_INLINE uint4 bggr() const;
	HLML_INLINE uint4 bggg() const;
	HLML_INLINE uint4 bggb() const;
	HLML_INLINE uint4 bgbr() const;
	HLML_INLINE uint4 bgbg() const;
	HLML_INLINE uint4 bgbb() const;
	HLML_INLINE uint4 bbrr() const;
	HLML_INLINE uint4 bbrg() const;
	HLML_INLINE uint4 bbrb() const;
	HLML_INLINE uint4 bbgr() const;
	HLML_INLINE uint4 bbgg() const;
	HLML_INLINE uint4 bbgb() const;
	HLML_INLINE uint4 bbbr() const;
	HLML_INLINE uint4 bbbg() const;
	HLML_INLINE uint4 bbbb() const;

};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif
