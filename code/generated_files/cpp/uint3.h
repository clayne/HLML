/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "uint3_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct uint3
{
	union
	{
		struct
		{
			uint32_t x;
			uint32_t y;
			uint32_t z;
		};

		struct
		{
			uint32_t r;
			uint32_t g;
			uint32_t b;
		};

		uint32_t v[3];

		// swizzles
		uint3_swizzle_3_to_2_xx_t xx;
		uint3_swizzle_3_to_2_yx_t yx;
		uint3_swizzle_3_to_2_zx_t zx;
		uint3_swizzle_3_to_2_xy_t xy;
		uint3_swizzle_3_to_2_yy_t yy;
		uint3_swizzle_3_to_2_zy_t zy;
		uint3_swizzle_3_to_2_xz_t xz;
		uint3_swizzle_3_to_2_yz_t yz;
		uint3_swizzle_3_to_2_zz_t zz;
		uint3_swizzle_3_to_3_xxx_t xxx;
		uint3_swizzle_3_to_3_yxx_t yxx;
		uint3_swizzle_3_to_3_zxx_t zxx;
		uint3_swizzle_3_to_3_xyx_t xyx;
		uint3_swizzle_3_to_3_yyx_t yyx;
		uint3_swizzle_3_to_3_zyx_t zyx;
		uint3_swizzle_3_to_3_xzx_t xzx;
		uint3_swizzle_3_to_3_yzx_t yzx;
		uint3_swizzle_3_to_3_zzx_t zzx;
		uint3_swizzle_3_to_3_xxy_t xxy;
		uint3_swizzle_3_to_3_yxy_t yxy;
		uint3_swizzle_3_to_3_zxy_t zxy;
		uint3_swizzle_3_to_3_xyy_t xyy;
		uint3_swizzle_3_to_3_yyy_t yyy;
		uint3_swizzle_3_to_3_zyy_t zyy;
		uint3_swizzle_3_to_3_xzy_t xzy;
		uint3_swizzle_3_to_3_yzy_t yzy;
		uint3_swizzle_3_to_3_zzy_t zzy;
		uint3_swizzle_3_to_3_xxz_t xxz;
		uint3_swizzle_3_to_3_yxz_t yxz;
		uint3_swizzle_3_to_3_zxz_t zxz;
		uint3_swizzle_3_to_3_xyz_t xyz;
		uint3_swizzle_3_to_3_yyz_t yyz;
		uint3_swizzle_3_to_3_zyz_t zyz;
		uint3_swizzle_3_to_3_xzz_t xzz;
		uint3_swizzle_3_to_3_yzz_t yzz;
		uint3_swizzle_3_to_3_zzz_t zzz;
		uint3_swizzle_3_to_4_xxxx_t xxxx;
		uint3_swizzle_3_to_4_yxxx_t yxxx;
		uint3_swizzle_3_to_4_zxxx_t zxxx;
		uint3_swizzle_3_to_4_xyxx_t xyxx;
		uint3_swizzle_3_to_4_yyxx_t yyxx;
		uint3_swizzle_3_to_4_zyxx_t zyxx;
		uint3_swizzle_3_to_4_xzxx_t xzxx;
		uint3_swizzle_3_to_4_yzxx_t yzxx;
		uint3_swizzle_3_to_4_zzxx_t zzxx;
		uint3_swizzle_3_to_4_xxyx_t xxyx;
		uint3_swizzle_3_to_4_yxyx_t yxyx;
		uint3_swizzle_3_to_4_zxyx_t zxyx;
		uint3_swizzle_3_to_4_xyyx_t xyyx;
		uint3_swizzle_3_to_4_yyyx_t yyyx;
		uint3_swizzle_3_to_4_zyyx_t zyyx;
		uint3_swizzle_3_to_4_xzyx_t xzyx;
		uint3_swizzle_3_to_4_yzyx_t yzyx;
		uint3_swizzle_3_to_4_zzyx_t zzyx;
		uint3_swizzle_3_to_4_xxzx_t xxzx;
		uint3_swizzle_3_to_4_yxzx_t yxzx;
		uint3_swizzle_3_to_4_zxzx_t zxzx;
		uint3_swizzle_3_to_4_xyzx_t xyzx;
		uint3_swizzle_3_to_4_yyzx_t yyzx;
		uint3_swizzle_3_to_4_zyzx_t zyzx;
		uint3_swizzle_3_to_4_xzzx_t xzzx;
		uint3_swizzle_3_to_4_yzzx_t yzzx;
		uint3_swizzle_3_to_4_zzzx_t zzzx;
		uint3_swizzle_3_to_4_xxxy_t xxxy;
		uint3_swizzle_3_to_4_yxxy_t yxxy;
		uint3_swizzle_3_to_4_zxxy_t zxxy;
		uint3_swizzle_3_to_4_xyxy_t xyxy;
		uint3_swizzle_3_to_4_yyxy_t yyxy;
		uint3_swizzle_3_to_4_zyxy_t zyxy;
		uint3_swizzle_3_to_4_xzxy_t xzxy;
		uint3_swizzle_3_to_4_yzxy_t yzxy;
		uint3_swizzle_3_to_4_zzxy_t zzxy;
		uint3_swizzle_3_to_4_xxyy_t xxyy;
		uint3_swizzle_3_to_4_yxyy_t yxyy;
		uint3_swizzle_3_to_4_zxyy_t zxyy;
		uint3_swizzle_3_to_4_xyyy_t xyyy;
		uint3_swizzle_3_to_4_yyyy_t yyyy;
		uint3_swizzle_3_to_4_zyyy_t zyyy;
		uint3_swizzle_3_to_4_xzyy_t xzyy;
		uint3_swizzle_3_to_4_yzyy_t yzyy;
		uint3_swizzle_3_to_4_zzyy_t zzyy;
		uint3_swizzle_3_to_4_xxzy_t xxzy;
		uint3_swizzle_3_to_4_yxzy_t yxzy;
		uint3_swizzle_3_to_4_zxzy_t zxzy;
		uint3_swizzle_3_to_4_xyzy_t xyzy;
		uint3_swizzle_3_to_4_yyzy_t yyzy;
		uint3_swizzle_3_to_4_zyzy_t zyzy;
		uint3_swizzle_3_to_4_xzzy_t xzzy;
		uint3_swizzle_3_to_4_yzzy_t yzzy;
		uint3_swizzle_3_to_4_zzzy_t zzzy;
		uint3_swizzle_3_to_4_xxxz_t xxxz;
		uint3_swizzle_3_to_4_yxxz_t yxxz;
		uint3_swizzle_3_to_4_zxxz_t zxxz;
		uint3_swizzle_3_to_4_xyxz_t xyxz;
		uint3_swizzle_3_to_4_yyxz_t yyxz;
		uint3_swizzle_3_to_4_zyxz_t zyxz;
		uint3_swizzle_3_to_4_xzxz_t xzxz;
		uint3_swizzle_3_to_4_yzxz_t yzxz;
		uint3_swizzle_3_to_4_zzxz_t zzxz;
		uint3_swizzle_3_to_4_xxyz_t xxyz;
		uint3_swizzle_3_to_4_yxyz_t yxyz;
		uint3_swizzle_3_to_4_zxyz_t zxyz;
		uint3_swizzle_3_to_4_xyyz_t xyyz;
		uint3_swizzle_3_to_4_yyyz_t yyyz;
		uint3_swizzle_3_to_4_zyyz_t zyyz;
		uint3_swizzle_3_to_4_xzyz_t xzyz;
		uint3_swizzle_3_to_4_yzyz_t yzyz;
		uint3_swizzle_3_to_4_zzyz_t zzyz;
		uint3_swizzle_3_to_4_xxzz_t xxzz;
		uint3_swizzle_3_to_4_yxzz_t yxzz;
		uint3_swizzle_3_to_4_zxzz_t zxzz;
		uint3_swizzle_3_to_4_xyzz_t xyzz;
		uint3_swizzle_3_to_4_yyzz_t yyzz;
		uint3_swizzle_3_to_4_zyzz_t zyzz;
		uint3_swizzle_3_to_4_xzzz_t xzzz;
		uint3_swizzle_3_to_4_yzzz_t yzzz;
		uint3_swizzle_3_to_4_zzzz_t zzzz;

		uint3_swizzle_3_to_2_rr_t rr;
		uint3_swizzle_3_to_2_gr_t gr;
		uint3_swizzle_3_to_2_br_t br;
		uint3_swizzle_3_to_2_rg_t rg;
		uint3_swizzle_3_to_2_gg_t gg;
		uint3_swizzle_3_to_2_bg_t bg;
		uint3_swizzle_3_to_2_rb_t rb;
		uint3_swizzle_3_to_2_gb_t gb;
		uint3_swizzle_3_to_2_bb_t bb;
		uint3_swizzle_3_to_3_rrr_t rrr;
		uint3_swizzle_3_to_3_grr_t grr;
		uint3_swizzle_3_to_3_brr_t brr;
		uint3_swizzle_3_to_3_rgr_t rgr;
		uint3_swizzle_3_to_3_ggr_t ggr;
		uint3_swizzle_3_to_3_bgr_t bgr;
		uint3_swizzle_3_to_3_rbr_t rbr;
		uint3_swizzle_3_to_3_gbr_t gbr;
		uint3_swizzle_3_to_3_bbr_t bbr;
		uint3_swizzle_3_to_3_rrg_t rrg;
		uint3_swizzle_3_to_3_grg_t grg;
		uint3_swizzle_3_to_3_brg_t brg;
		uint3_swizzle_3_to_3_rgg_t rgg;
		uint3_swizzle_3_to_3_ggg_t ggg;
		uint3_swizzle_3_to_3_bgg_t bgg;
		uint3_swizzle_3_to_3_rbg_t rbg;
		uint3_swizzle_3_to_3_gbg_t gbg;
		uint3_swizzle_3_to_3_bbg_t bbg;
		uint3_swizzle_3_to_3_rrb_t rrb;
		uint3_swizzle_3_to_3_grb_t grb;
		uint3_swizzle_3_to_3_brb_t brb;
		uint3_swizzle_3_to_3_rgb_t rgb;
		uint3_swizzle_3_to_3_ggb_t ggb;
		uint3_swizzle_3_to_3_bgb_t bgb;
		uint3_swizzle_3_to_3_rbb_t rbb;
		uint3_swizzle_3_to_3_gbb_t gbb;
		uint3_swizzle_3_to_3_bbb_t bbb;
		uint3_swizzle_3_to_4_rrrr_t rrrr;
		uint3_swizzle_3_to_4_grrr_t grrr;
		uint3_swizzle_3_to_4_brrr_t brrr;
		uint3_swizzle_3_to_4_rgrr_t rgrr;
		uint3_swizzle_3_to_4_ggrr_t ggrr;
		uint3_swizzle_3_to_4_bgrr_t bgrr;
		uint3_swizzle_3_to_4_rbrr_t rbrr;
		uint3_swizzle_3_to_4_gbrr_t gbrr;
		uint3_swizzle_3_to_4_bbrr_t bbrr;
		uint3_swizzle_3_to_4_rrgr_t rrgr;
		uint3_swizzle_3_to_4_grgr_t grgr;
		uint3_swizzle_3_to_4_brgr_t brgr;
		uint3_swizzle_3_to_4_rggr_t rggr;
		uint3_swizzle_3_to_4_gggr_t gggr;
		uint3_swizzle_3_to_4_bggr_t bggr;
		uint3_swizzle_3_to_4_rbgr_t rbgr;
		uint3_swizzle_3_to_4_gbgr_t gbgr;
		uint3_swizzle_3_to_4_bbgr_t bbgr;
		uint3_swizzle_3_to_4_rrbr_t rrbr;
		uint3_swizzle_3_to_4_grbr_t grbr;
		uint3_swizzle_3_to_4_brbr_t brbr;
		uint3_swizzle_3_to_4_rgbr_t rgbr;
		uint3_swizzle_3_to_4_ggbr_t ggbr;
		uint3_swizzle_3_to_4_bgbr_t bgbr;
		uint3_swizzle_3_to_4_rbbr_t rbbr;
		uint3_swizzle_3_to_4_gbbr_t gbbr;
		uint3_swizzle_3_to_4_bbbr_t bbbr;
		uint3_swizzle_3_to_4_rrrg_t rrrg;
		uint3_swizzle_3_to_4_grrg_t grrg;
		uint3_swizzle_3_to_4_brrg_t brrg;
		uint3_swizzle_3_to_4_rgrg_t rgrg;
		uint3_swizzle_3_to_4_ggrg_t ggrg;
		uint3_swizzle_3_to_4_bgrg_t bgrg;
		uint3_swizzle_3_to_4_rbrg_t rbrg;
		uint3_swizzle_3_to_4_gbrg_t gbrg;
		uint3_swizzle_3_to_4_bbrg_t bbrg;
		uint3_swizzle_3_to_4_rrgg_t rrgg;
		uint3_swizzle_3_to_4_grgg_t grgg;
		uint3_swizzle_3_to_4_brgg_t brgg;
		uint3_swizzle_3_to_4_rggg_t rggg;
		uint3_swizzle_3_to_4_gggg_t gggg;
		uint3_swizzle_3_to_4_bggg_t bggg;
		uint3_swizzle_3_to_4_rbgg_t rbgg;
		uint3_swizzle_3_to_4_gbgg_t gbgg;
		uint3_swizzle_3_to_4_bbgg_t bbgg;
		uint3_swizzle_3_to_4_rrbg_t rrbg;
		uint3_swizzle_3_to_4_grbg_t grbg;
		uint3_swizzle_3_to_4_brbg_t brbg;
		uint3_swizzle_3_to_4_rgbg_t rgbg;
		uint3_swizzle_3_to_4_ggbg_t ggbg;
		uint3_swizzle_3_to_4_bgbg_t bgbg;
		uint3_swizzle_3_to_4_rbbg_t rbbg;
		uint3_swizzle_3_to_4_gbbg_t gbbg;
		uint3_swizzle_3_to_4_bbbg_t bbbg;
		uint3_swizzle_3_to_4_rrrb_t rrrb;
		uint3_swizzle_3_to_4_grrb_t grrb;
		uint3_swizzle_3_to_4_brrb_t brrb;
		uint3_swizzle_3_to_4_rgrb_t rgrb;
		uint3_swizzle_3_to_4_ggrb_t ggrb;
		uint3_swizzle_3_to_4_bgrb_t bgrb;
		uint3_swizzle_3_to_4_rbrb_t rbrb;
		uint3_swizzle_3_to_4_gbrb_t gbrb;
		uint3_swizzle_3_to_4_bbrb_t bbrb;
		uint3_swizzle_3_to_4_rrgb_t rrgb;
		uint3_swizzle_3_to_4_grgb_t grgb;
		uint3_swizzle_3_to_4_brgb_t brgb;
		uint3_swizzle_3_to_4_rggb_t rggb;
		uint3_swizzle_3_to_4_gggb_t gggb;
		uint3_swizzle_3_to_4_bggb_t bggb;
		uint3_swizzle_3_to_4_rbgb_t rbgb;
		uint3_swizzle_3_to_4_gbgb_t gbgb;
		uint3_swizzle_3_to_4_bbgb_t bbgb;
		uint3_swizzle_3_to_4_rrbb_t rrbb;
		uint3_swizzle_3_to_4_grbb_t grbb;
		uint3_swizzle_3_to_4_brbb_t brbb;
		uint3_swizzle_3_to_4_rgbb_t rgbb;
		uint3_swizzle_3_to_4_ggbb_t ggbb;
		uint3_swizzle_3_to_4_bgbb_t bgbb;
		uint3_swizzle_3_to_4_rbbb_t rbbb;
		uint3_swizzle_3_to_4_gbbb_t gbbb;
		uint3_swizzle_3_to_4_bbbb_t bbbb;
	};

	// Default constructor.
	HLML_INLINE uint3() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit uint3( const uint32_t scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE uint3( const uint32_t x, const uint32_t y, const uint32_t z );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE uint3( const uint2& other );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE uint3( const uint3& other );

	~uint3() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE uint3 operator=( const uint2& other );

	// Copies all elements of 'other' into the vector.
	HLML_INLINE uint3 operator=( const uint3& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE uint32_t& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE const uint32_t& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

