/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

struct bool2;
struct bool4;

struct int3;
struct uint3;
struct float3;
struct double3;

#include "hlml_types.h"
#include "hlml_defines.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct bool3
{
	union
	{
		struct
		{
			bool32_t x;
			bool32_t y;
			bool32_t z;
		};

		struct
		{
			bool32_t r;
			bool32_t g;
			bool32_t b;
		};

		bool32_t v[3];
	};

	// Default constructor.
	HLML_INLINE bool3() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit bool3( const bool32_t scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE bool3( const bool32_t x, const bool32_t y, const bool32_t z );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE bool3( const bool2& other );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE bool3( const bool3& other );

	// Conversion constructor.  Casts all components of 'vec' from type int32_t to type bool32_t.
	HLML_INLINE explicit bool3( const int3& vec );

	// Conversion constructor.  Casts all components of 'vec' from type uint32_t to type bool32_t.
	HLML_INLINE explicit bool3( const uint3& vec );

	// Conversion constructor.  Casts all components of 'vec' from type float to type bool32_t.
	HLML_INLINE explicit bool3( const float3& vec );

	// Conversion constructor.  Casts all components of 'vec' from type double to type bool32_t.
	HLML_INLINE explicit bool3( const double3& vec );

	~bool3() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE bool3 operator=( const bool2& other );

	// Copies all elements of 'other' into the vector.
	HLML_INLINE bool3 operator=( const bool3& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE bool32_t& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE const bool32_t& operator[]( const int32_t index ) const;

	// swizzle functions
	HLML_INLINE bool2 xx() const;
	HLML_INLINE bool2 xy() const;
	HLML_INLINE bool2 xz() const;
	HLML_INLINE bool2 yx() const;
	HLML_INLINE bool2 yy() const;
	HLML_INLINE bool2 yz() const;
	HLML_INLINE bool2 zx() const;
	HLML_INLINE bool2 zy() const;
	HLML_INLINE bool2 zz() const;
	HLML_INLINE bool3 xxx() const;
	HLML_INLINE bool3 xxy() const;
	HLML_INLINE bool3 xxz() const;
	HLML_INLINE bool3 xyx() const;
	HLML_INLINE bool3 xyy() const;
	HLML_INLINE bool3 xyz() const;
	HLML_INLINE bool3 xzx() const;
	HLML_INLINE bool3 xzy() const;
	HLML_INLINE bool3 xzz() const;
	HLML_INLINE bool3 yxx() const;
	HLML_INLINE bool3 yxy() const;
	HLML_INLINE bool3 yxz() const;
	HLML_INLINE bool3 yyx() const;
	HLML_INLINE bool3 yyy() const;
	HLML_INLINE bool3 yyz() const;
	HLML_INLINE bool3 yzx() const;
	HLML_INLINE bool3 yzy() const;
	HLML_INLINE bool3 yzz() const;
	HLML_INLINE bool3 zxx() const;
	HLML_INLINE bool3 zxy() const;
	HLML_INLINE bool3 zxz() const;
	HLML_INLINE bool3 zyx() const;
	HLML_INLINE bool3 zyy() const;
	HLML_INLINE bool3 zyz() const;
	HLML_INLINE bool3 zzx() const;
	HLML_INLINE bool3 zzy() const;
	HLML_INLINE bool3 zzz() const;
	HLML_INLINE bool4 xxxx() const;
	HLML_INLINE bool4 xxxy() const;
	HLML_INLINE bool4 xxxz() const;
	HLML_INLINE bool4 xxyx() const;
	HLML_INLINE bool4 xxyy() const;
	HLML_INLINE bool4 xxyz() const;
	HLML_INLINE bool4 xxzx() const;
	HLML_INLINE bool4 xxzy() const;
	HLML_INLINE bool4 xxzz() const;
	HLML_INLINE bool4 xyxx() const;
	HLML_INLINE bool4 xyxy() const;
	HLML_INLINE bool4 xyxz() const;
	HLML_INLINE bool4 xyyx() const;
	HLML_INLINE bool4 xyyy() const;
	HLML_INLINE bool4 xyyz() const;
	HLML_INLINE bool4 xyzx() const;
	HLML_INLINE bool4 xyzy() const;
	HLML_INLINE bool4 xyzz() const;
	HLML_INLINE bool4 xzxx() const;
	HLML_INLINE bool4 xzxy() const;
	HLML_INLINE bool4 xzxz() const;
	HLML_INLINE bool4 xzyx() const;
	HLML_INLINE bool4 xzyy() const;
	HLML_INLINE bool4 xzyz() const;
	HLML_INLINE bool4 xzzx() const;
	HLML_INLINE bool4 xzzy() const;
	HLML_INLINE bool4 xzzz() const;
	HLML_INLINE bool4 yxxx() const;
	HLML_INLINE bool4 yxxy() const;
	HLML_INLINE bool4 yxxz() const;
	HLML_INLINE bool4 yxyx() const;
	HLML_INLINE bool4 yxyy() const;
	HLML_INLINE bool4 yxyz() const;
	HLML_INLINE bool4 yxzx() const;
	HLML_INLINE bool4 yxzy() const;
	HLML_INLINE bool4 yxzz() const;
	HLML_INLINE bool4 yyxx() const;
	HLML_INLINE bool4 yyxy() const;
	HLML_INLINE bool4 yyxz() const;
	HLML_INLINE bool4 yyyx() const;
	HLML_INLINE bool4 yyyy() const;
	HLML_INLINE bool4 yyyz() const;
	HLML_INLINE bool4 yyzx() const;
	HLML_INLINE bool4 yyzy() const;
	HLML_INLINE bool4 yyzz() const;
	HLML_INLINE bool4 yzxx() const;
	HLML_INLINE bool4 yzxy() const;
	HLML_INLINE bool4 yzxz() const;
	HLML_INLINE bool4 yzyx() const;
	HLML_INLINE bool4 yzyy() const;
	HLML_INLINE bool4 yzyz() const;
	HLML_INLINE bool4 yzzx() const;
	HLML_INLINE bool4 yzzy() const;
	HLML_INLINE bool4 yzzz() const;
	HLML_INLINE bool4 zxxx() const;
	HLML_INLINE bool4 zxxy() const;
	HLML_INLINE bool4 zxxz() const;
	HLML_INLINE bool4 zxyx() const;
	HLML_INLINE bool4 zxyy() const;
	HLML_INLINE bool4 zxyz() const;
	HLML_INLINE bool4 zxzx() const;
	HLML_INLINE bool4 zxzy() const;
	HLML_INLINE bool4 zxzz() const;
	HLML_INLINE bool4 zyxx() const;
	HLML_INLINE bool4 zyxy() const;
	HLML_INLINE bool4 zyxz() const;
	HLML_INLINE bool4 zyyx() const;
	HLML_INLINE bool4 zyyy() const;
	HLML_INLINE bool4 zyyz() const;
	HLML_INLINE bool4 zyzx() const;
	HLML_INLINE bool4 zyzy() const;
	HLML_INLINE bool4 zyzz() const;
	HLML_INLINE bool4 zzxx() const;
	HLML_INLINE bool4 zzxy() const;
	HLML_INLINE bool4 zzxz() const;
	HLML_INLINE bool4 zzyx() const;
	HLML_INLINE bool4 zzyy() const;
	HLML_INLINE bool4 zzyz() const;
	HLML_INLINE bool4 zzzx() const;
	HLML_INLINE bool4 zzzy() const;
	HLML_INLINE bool4 zzzz() const;

	HLML_INLINE bool2 rr() const;
	HLML_INLINE bool2 rg() const;
	HLML_INLINE bool2 rb() const;
	HLML_INLINE bool2 gr() const;
	HLML_INLINE bool2 gg() const;
	HLML_INLINE bool2 gb() const;
	HLML_INLINE bool2 br() const;
	HLML_INLINE bool2 bg() const;
	HLML_INLINE bool2 bb() const;
	HLML_INLINE bool3 rrr() const;
	HLML_INLINE bool3 rrg() const;
	HLML_INLINE bool3 rrb() const;
	HLML_INLINE bool3 rgr() const;
	HLML_INLINE bool3 rgg() const;
	HLML_INLINE bool3 rgb() const;
	HLML_INLINE bool3 rbr() const;
	HLML_INLINE bool3 rbg() const;
	HLML_INLINE bool3 rbb() const;
	HLML_INLINE bool3 grr() const;
	HLML_INLINE bool3 grg() const;
	HLML_INLINE bool3 grb() const;
	HLML_INLINE bool3 ggr() const;
	HLML_INLINE bool3 ggg() const;
	HLML_INLINE bool3 ggb() const;
	HLML_INLINE bool3 gbr() const;
	HLML_INLINE bool3 gbg() const;
	HLML_INLINE bool3 gbb() const;
	HLML_INLINE bool3 brr() const;
	HLML_INLINE bool3 brg() const;
	HLML_INLINE bool3 brb() const;
	HLML_INLINE bool3 bgr() const;
	HLML_INLINE bool3 bgg() const;
	HLML_INLINE bool3 bgb() const;
	HLML_INLINE bool3 bbr() const;
	HLML_INLINE bool3 bbg() const;
	HLML_INLINE bool3 bbb() const;
	HLML_INLINE bool4 rrrr() const;
	HLML_INLINE bool4 rrrg() const;
	HLML_INLINE bool4 rrrb() const;
	HLML_INLINE bool4 rrgr() const;
	HLML_INLINE bool4 rrgg() const;
	HLML_INLINE bool4 rrgb() const;
	HLML_INLINE bool4 rrbr() const;
	HLML_INLINE bool4 rrbg() const;
	HLML_INLINE bool4 rrbb() const;
	HLML_INLINE bool4 rgrr() const;
	HLML_INLINE bool4 rgrg() const;
	HLML_INLINE bool4 rgrb() const;
	HLML_INLINE bool4 rggr() const;
	HLML_INLINE bool4 rggg() const;
	HLML_INLINE bool4 rggb() const;
	HLML_INLINE bool4 rgbr() const;
	HLML_INLINE bool4 rgbg() const;
	HLML_INLINE bool4 rgbb() const;
	HLML_INLINE bool4 rbrr() const;
	HLML_INLINE bool4 rbrg() const;
	HLML_INLINE bool4 rbrb() const;
	HLML_INLINE bool4 rbgr() const;
	HLML_INLINE bool4 rbgg() const;
	HLML_INLINE bool4 rbgb() const;
	HLML_INLINE bool4 rbbr() const;
	HLML_INLINE bool4 rbbg() const;
	HLML_INLINE bool4 rbbb() const;
	HLML_INLINE bool4 grrr() const;
	HLML_INLINE bool4 grrg() const;
	HLML_INLINE bool4 grrb() const;
	HLML_INLINE bool4 grgr() const;
	HLML_INLINE bool4 grgg() const;
	HLML_INLINE bool4 grgb() const;
	HLML_INLINE bool4 grbr() const;
	HLML_INLINE bool4 grbg() const;
	HLML_INLINE bool4 grbb() const;
	HLML_INLINE bool4 ggrr() const;
	HLML_INLINE bool4 ggrg() const;
	HLML_INLINE bool4 ggrb() const;
	HLML_INLINE bool4 gggr() const;
	HLML_INLINE bool4 gggg() const;
	HLML_INLINE bool4 gggb() const;
	HLML_INLINE bool4 ggbr() const;
	HLML_INLINE bool4 ggbg() const;
	HLML_INLINE bool4 ggbb() const;
	HLML_INLINE bool4 gbrr() const;
	HLML_INLINE bool4 gbrg() const;
	HLML_INLINE bool4 gbrb() const;
	HLML_INLINE bool4 gbgr() const;
	HLML_INLINE bool4 gbgg() const;
	HLML_INLINE bool4 gbgb() const;
	HLML_INLINE bool4 gbbr() const;
	HLML_INLINE bool4 gbbg() const;
	HLML_INLINE bool4 gbbb() const;
	HLML_INLINE bool4 brrr() const;
	HLML_INLINE bool4 brrg() const;
	HLML_INLINE bool4 brrb() const;
	HLML_INLINE bool4 brgr() const;
	HLML_INLINE bool4 brgg() const;
	HLML_INLINE bool4 brgb() const;
	HLML_INLINE bool4 brbr() const;
	HLML_INLINE bool4 brbg() const;
	HLML_INLINE bool4 brbb() const;
	HLML_INLINE bool4 bgrr() const;
	HLML_INLINE bool4 bgrg() const;
	HLML_INLINE bool4 bgrb() const;
	HLML_INLINE bool4 bggr() const;
	HLML_INLINE bool4 bggg() const;
	HLML_INLINE bool4 bggb() const;
	HLML_INLINE bool4 bgbr() const;
	HLML_INLINE bool4 bgbg() const;
	HLML_INLINE bool4 bgbb() const;
	HLML_INLINE bool4 bbrr() const;
	HLML_INLINE bool4 bbrg() const;
	HLML_INLINE bool4 bbrb() const;
	HLML_INLINE bool4 bbgr() const;
	HLML_INLINE bool4 bbgg() const;
	HLML_INLINE bool4 bbgb() const;
	HLML_INLINE bool4 bbbr() const;
	HLML_INLINE bool4 bbbg() const;
	HLML_INLINE bool4 bbbb() const;

};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif
