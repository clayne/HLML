/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "hlml_types.h"
#include "hlml_defines.h"

#include "int3_swizzle_types.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

struct int3
{
	union
	{
		struct
		{
			int32_t x;
			int32_t y;
			int32_t z;
		};

		struct
		{
			int32_t r;
			int32_t g;
			int32_t b;
		};

		int32_t v[3];

		// swizzles
		int3_swizzle_3_to_2_xx_t xx;
		int3_swizzle_3_to_2_yx_t yx;
		int3_swizzle_3_to_2_zx_t zx;
		int3_swizzle_3_to_2_xy_t xy;
		int3_swizzle_3_to_2_yy_t yy;
		int3_swizzle_3_to_2_zy_t zy;
		int3_swizzle_3_to_2_xz_t xz;
		int3_swizzle_3_to_2_yz_t yz;
		int3_swizzle_3_to_2_zz_t zz;
		int3_swizzle_3_to_3_xxx_t xxx;
		int3_swizzle_3_to_3_yxx_t yxx;
		int3_swizzle_3_to_3_zxx_t zxx;
		int3_swizzle_3_to_3_xyx_t xyx;
		int3_swizzle_3_to_3_yyx_t yyx;
		int3_swizzle_3_to_3_zyx_t zyx;
		int3_swizzle_3_to_3_xzx_t xzx;
		int3_swizzle_3_to_3_yzx_t yzx;
		int3_swizzle_3_to_3_zzx_t zzx;
		int3_swizzle_3_to_3_xxy_t xxy;
		int3_swizzle_3_to_3_yxy_t yxy;
		int3_swizzle_3_to_3_zxy_t zxy;
		int3_swizzle_3_to_3_xyy_t xyy;
		int3_swizzle_3_to_3_yyy_t yyy;
		int3_swizzle_3_to_3_zyy_t zyy;
		int3_swizzle_3_to_3_xzy_t xzy;
		int3_swizzle_3_to_3_yzy_t yzy;
		int3_swizzle_3_to_3_zzy_t zzy;
		int3_swizzle_3_to_3_xxz_t xxz;
		int3_swizzle_3_to_3_yxz_t yxz;
		int3_swizzle_3_to_3_zxz_t zxz;
		int3_swizzle_3_to_3_xyz_t xyz;
		int3_swizzle_3_to_3_yyz_t yyz;
		int3_swizzle_3_to_3_zyz_t zyz;
		int3_swizzle_3_to_3_xzz_t xzz;
		int3_swizzle_3_to_3_yzz_t yzz;
		int3_swizzle_3_to_3_zzz_t zzz;
		int3_swizzle_3_to_4_xxxx_t xxxx;
		int3_swizzle_3_to_4_yxxx_t yxxx;
		int3_swizzle_3_to_4_zxxx_t zxxx;
		int3_swizzle_3_to_4_xyxx_t xyxx;
		int3_swizzle_3_to_4_yyxx_t yyxx;
		int3_swizzle_3_to_4_zyxx_t zyxx;
		int3_swizzle_3_to_4_xzxx_t xzxx;
		int3_swizzle_3_to_4_yzxx_t yzxx;
		int3_swizzle_3_to_4_zzxx_t zzxx;
		int3_swizzle_3_to_4_xxyx_t xxyx;
		int3_swizzle_3_to_4_yxyx_t yxyx;
		int3_swizzle_3_to_4_zxyx_t zxyx;
		int3_swizzle_3_to_4_xyyx_t xyyx;
		int3_swizzle_3_to_4_yyyx_t yyyx;
		int3_swizzle_3_to_4_zyyx_t zyyx;
		int3_swizzle_3_to_4_xzyx_t xzyx;
		int3_swizzle_3_to_4_yzyx_t yzyx;
		int3_swizzle_3_to_4_zzyx_t zzyx;
		int3_swizzle_3_to_4_xxzx_t xxzx;
		int3_swizzle_3_to_4_yxzx_t yxzx;
		int3_swizzle_3_to_4_zxzx_t zxzx;
		int3_swizzle_3_to_4_xyzx_t xyzx;
		int3_swizzle_3_to_4_yyzx_t yyzx;
		int3_swizzle_3_to_4_zyzx_t zyzx;
		int3_swizzle_3_to_4_xzzx_t xzzx;
		int3_swizzle_3_to_4_yzzx_t yzzx;
		int3_swizzle_3_to_4_zzzx_t zzzx;
		int3_swizzle_3_to_4_xxxy_t xxxy;
		int3_swizzle_3_to_4_yxxy_t yxxy;
		int3_swizzle_3_to_4_zxxy_t zxxy;
		int3_swizzle_3_to_4_xyxy_t xyxy;
		int3_swizzle_3_to_4_yyxy_t yyxy;
		int3_swizzle_3_to_4_zyxy_t zyxy;
		int3_swizzle_3_to_4_xzxy_t xzxy;
		int3_swizzle_3_to_4_yzxy_t yzxy;
		int3_swizzle_3_to_4_zzxy_t zzxy;
		int3_swizzle_3_to_4_xxyy_t xxyy;
		int3_swizzle_3_to_4_yxyy_t yxyy;
		int3_swizzle_3_to_4_zxyy_t zxyy;
		int3_swizzle_3_to_4_xyyy_t xyyy;
		int3_swizzle_3_to_4_yyyy_t yyyy;
		int3_swizzle_3_to_4_zyyy_t zyyy;
		int3_swizzle_3_to_4_xzyy_t xzyy;
		int3_swizzle_3_to_4_yzyy_t yzyy;
		int3_swizzle_3_to_4_zzyy_t zzyy;
		int3_swizzle_3_to_4_xxzy_t xxzy;
		int3_swizzle_3_to_4_yxzy_t yxzy;
		int3_swizzle_3_to_4_zxzy_t zxzy;
		int3_swizzle_3_to_4_xyzy_t xyzy;
		int3_swizzle_3_to_4_yyzy_t yyzy;
		int3_swizzle_3_to_4_zyzy_t zyzy;
		int3_swizzle_3_to_4_xzzy_t xzzy;
		int3_swizzle_3_to_4_yzzy_t yzzy;
		int3_swizzle_3_to_4_zzzy_t zzzy;
		int3_swizzle_3_to_4_xxxz_t xxxz;
		int3_swizzle_3_to_4_yxxz_t yxxz;
		int3_swizzle_3_to_4_zxxz_t zxxz;
		int3_swizzle_3_to_4_xyxz_t xyxz;
		int3_swizzle_3_to_4_yyxz_t yyxz;
		int3_swizzle_3_to_4_zyxz_t zyxz;
		int3_swizzle_3_to_4_xzxz_t xzxz;
		int3_swizzle_3_to_4_yzxz_t yzxz;
		int3_swizzle_3_to_4_zzxz_t zzxz;
		int3_swizzle_3_to_4_xxyz_t xxyz;
		int3_swizzle_3_to_4_yxyz_t yxyz;
		int3_swizzle_3_to_4_zxyz_t zxyz;
		int3_swizzle_3_to_4_xyyz_t xyyz;
		int3_swizzle_3_to_4_yyyz_t yyyz;
		int3_swizzle_3_to_4_zyyz_t zyyz;
		int3_swizzle_3_to_4_xzyz_t xzyz;
		int3_swizzle_3_to_4_yzyz_t yzyz;
		int3_swizzle_3_to_4_zzyz_t zzyz;
		int3_swizzle_3_to_4_xxzz_t xxzz;
		int3_swizzle_3_to_4_yxzz_t yxzz;
		int3_swizzle_3_to_4_zxzz_t zxzz;
		int3_swizzle_3_to_4_xyzz_t xyzz;
		int3_swizzle_3_to_4_yyzz_t yyzz;
		int3_swizzle_3_to_4_zyzz_t zyzz;
		int3_swizzle_3_to_4_xzzz_t xzzz;
		int3_swizzle_3_to_4_yzzz_t yzzz;
		int3_swizzle_3_to_4_zzzz_t zzzz;

		int3_swizzle_3_to_2_rr_t rr;
		int3_swizzle_3_to_2_gr_t gr;
		int3_swizzle_3_to_2_br_t br;
		int3_swizzle_3_to_2_rg_t rg;
		int3_swizzle_3_to_2_gg_t gg;
		int3_swizzle_3_to_2_bg_t bg;
		int3_swizzle_3_to_2_rb_t rb;
		int3_swizzle_3_to_2_gb_t gb;
		int3_swizzle_3_to_2_bb_t bb;
		int3_swizzle_3_to_3_rrr_t rrr;
		int3_swizzle_3_to_3_grr_t grr;
		int3_swizzle_3_to_3_brr_t brr;
		int3_swizzle_3_to_3_rgr_t rgr;
		int3_swizzle_3_to_3_ggr_t ggr;
		int3_swizzle_3_to_3_bgr_t bgr;
		int3_swizzle_3_to_3_rbr_t rbr;
		int3_swizzle_3_to_3_gbr_t gbr;
		int3_swizzle_3_to_3_bbr_t bbr;
		int3_swizzle_3_to_3_rrg_t rrg;
		int3_swizzle_3_to_3_grg_t grg;
		int3_swizzle_3_to_3_brg_t brg;
		int3_swizzle_3_to_3_rgg_t rgg;
		int3_swizzle_3_to_3_ggg_t ggg;
		int3_swizzle_3_to_3_bgg_t bgg;
		int3_swizzle_3_to_3_rbg_t rbg;
		int3_swizzle_3_to_3_gbg_t gbg;
		int3_swizzle_3_to_3_bbg_t bbg;
		int3_swizzle_3_to_3_rrb_t rrb;
		int3_swizzle_3_to_3_grb_t grb;
		int3_swizzle_3_to_3_brb_t brb;
		int3_swizzle_3_to_3_rgb_t rgb;
		int3_swizzle_3_to_3_ggb_t ggb;
		int3_swizzle_3_to_3_bgb_t bgb;
		int3_swizzle_3_to_3_rbb_t rbb;
		int3_swizzle_3_to_3_gbb_t gbb;
		int3_swizzle_3_to_3_bbb_t bbb;
		int3_swizzle_3_to_4_rrrr_t rrrr;
		int3_swizzle_3_to_4_grrr_t grrr;
		int3_swizzle_3_to_4_brrr_t brrr;
		int3_swizzle_3_to_4_rgrr_t rgrr;
		int3_swizzle_3_to_4_ggrr_t ggrr;
		int3_swizzle_3_to_4_bgrr_t bgrr;
		int3_swizzle_3_to_4_rbrr_t rbrr;
		int3_swizzle_3_to_4_gbrr_t gbrr;
		int3_swizzle_3_to_4_bbrr_t bbrr;
		int3_swizzle_3_to_4_rrgr_t rrgr;
		int3_swizzle_3_to_4_grgr_t grgr;
		int3_swizzle_3_to_4_brgr_t brgr;
		int3_swizzle_3_to_4_rggr_t rggr;
		int3_swizzle_3_to_4_gggr_t gggr;
		int3_swizzle_3_to_4_bggr_t bggr;
		int3_swizzle_3_to_4_rbgr_t rbgr;
		int3_swizzle_3_to_4_gbgr_t gbgr;
		int3_swizzle_3_to_4_bbgr_t bbgr;
		int3_swizzle_3_to_4_rrbr_t rrbr;
		int3_swizzle_3_to_4_grbr_t grbr;
		int3_swizzle_3_to_4_brbr_t brbr;
		int3_swizzle_3_to_4_rgbr_t rgbr;
		int3_swizzle_3_to_4_ggbr_t ggbr;
		int3_swizzle_3_to_4_bgbr_t bgbr;
		int3_swizzle_3_to_4_rbbr_t rbbr;
		int3_swizzle_3_to_4_gbbr_t gbbr;
		int3_swizzle_3_to_4_bbbr_t bbbr;
		int3_swizzle_3_to_4_rrrg_t rrrg;
		int3_swizzle_3_to_4_grrg_t grrg;
		int3_swizzle_3_to_4_brrg_t brrg;
		int3_swizzle_3_to_4_rgrg_t rgrg;
		int3_swizzle_3_to_4_ggrg_t ggrg;
		int3_swizzle_3_to_4_bgrg_t bgrg;
		int3_swizzle_3_to_4_rbrg_t rbrg;
		int3_swizzle_3_to_4_gbrg_t gbrg;
		int3_swizzle_3_to_4_bbrg_t bbrg;
		int3_swizzle_3_to_4_rrgg_t rrgg;
		int3_swizzle_3_to_4_grgg_t grgg;
		int3_swizzle_3_to_4_brgg_t brgg;
		int3_swizzle_3_to_4_rggg_t rggg;
		int3_swizzle_3_to_4_gggg_t gggg;
		int3_swizzle_3_to_4_bggg_t bggg;
		int3_swizzle_3_to_4_rbgg_t rbgg;
		int3_swizzle_3_to_4_gbgg_t gbgg;
		int3_swizzle_3_to_4_bbgg_t bbgg;
		int3_swizzle_3_to_4_rrbg_t rrbg;
		int3_swizzle_3_to_4_grbg_t grbg;
		int3_swizzle_3_to_4_brbg_t brbg;
		int3_swizzle_3_to_4_rgbg_t rgbg;
		int3_swizzle_3_to_4_ggbg_t ggbg;
		int3_swizzle_3_to_4_bgbg_t bgbg;
		int3_swizzle_3_to_4_rbbg_t rbbg;
		int3_swizzle_3_to_4_gbbg_t gbbg;
		int3_swizzle_3_to_4_bbbg_t bbbg;
		int3_swizzle_3_to_4_rrrb_t rrrb;
		int3_swizzle_3_to_4_grrb_t grrb;
		int3_swizzle_3_to_4_brrb_t brrb;
		int3_swizzle_3_to_4_rgrb_t rgrb;
		int3_swizzle_3_to_4_ggrb_t ggrb;
		int3_swizzle_3_to_4_bgrb_t bgrb;
		int3_swizzle_3_to_4_rbrb_t rbrb;
		int3_swizzle_3_to_4_gbrb_t gbrb;
		int3_swizzle_3_to_4_bbrb_t bbrb;
		int3_swizzle_3_to_4_rrgb_t rrgb;
		int3_swizzle_3_to_4_grgb_t grgb;
		int3_swizzle_3_to_4_brgb_t brgb;
		int3_swizzle_3_to_4_rggb_t rggb;
		int3_swizzle_3_to_4_gggb_t gggb;
		int3_swizzle_3_to_4_bggb_t bggb;
		int3_swizzle_3_to_4_rbgb_t rbgb;
		int3_swizzle_3_to_4_gbgb_t gbgb;
		int3_swizzle_3_to_4_bbgb_t bbgb;
		int3_swizzle_3_to_4_rrbb_t rrbb;
		int3_swizzle_3_to_4_grbb_t grbb;
		int3_swizzle_3_to_4_brbb_t brbb;
		int3_swizzle_3_to_4_rgbb_t rgbb;
		int3_swizzle_3_to_4_ggbb_t ggbb;
		int3_swizzle_3_to_4_bgbb_t bgbb;
		int3_swizzle_3_to_4_rbbb_t rbbb;
		int3_swizzle_3_to_4_gbbb_t gbbb;
		int3_swizzle_3_to_4_bbbb_t bbbb;
	};

	// Default constructor.
	HLML_INLINE int3() {}

	// Initialises all components of the vector to the given scalar.
	HLML_INLINE explicit int3( const int32_t scalar );

	// Initialises all components of the vector to the corresponding scalars.
	HLML_INLINE int3( const int32_t x, const int32_t y, const int32_t z );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE int3( const int2& other );

	// Copy constructor.  Copies all elements of 'other' into the vector.
	HLML_INLINE int3( const int3& other );

	~int3() {}

	// Copies all elements of 'other' into the vector.
	HLML_INLINE int3 operator=( const int2& other );

	// Copies all elements of 'other' into the vector.
	HLML_INLINE int3 operator=( const int3& other );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE int32_t& operator[]( const int32_t index );

	// Returns the vector component at the given index.
	// Index CANNOT be lower than 0 or greater than 2.
	HLML_INLINE const int32_t& operator[]( const int32_t index ) const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

