/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.rr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rr,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rr,
	uint3( 0U, 1U, 2U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rr,
	uint3( 3U, 2U, 1U ),
	uint2( 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rr,
	uint3( 10U, 10U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rr,
	uint3( 20U, 20U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rr,
	uint3( 0U, 100U, 666U ),
	uint2( 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.gr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gr,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gr,
	uint3( 0U, 1U, 2U ),
	uint2( 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gr,
	uint3( 3U, 2U, 1U ),
	uint2( 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gr,
	uint3( 10U, 10U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gr,
	uint3( 20U, 20U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gr,
	uint3( 0U, 100U, 666U ),
	uint2( 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_br, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.br;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_br,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_br,
	uint3( 0U, 1U, 2U ),
	uint2( 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_br,
	uint3( 3U, 2U, 1U ),
	uint2( 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_br,
	uint3( 10U, 10U, 20U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_br,
	uint3( 20U, 20U, 10U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_br,
	uint3( 0U, 100U, 666U ),
	uint2( 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.rg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rg,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rg,
	uint3( 0U, 1U, 2U ),
	uint2( 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rg,
	uint3( 3U, 2U, 1U ),
	uint2( 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rg,
	uint3( 10U, 10U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rg,
	uint3( 20U, 20U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rg,
	uint3( 0U, 100U, 666U ),
	uint2( 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.gg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gg,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gg,
	uint3( 0U, 1U, 2U ),
	uint2( 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gg,
	uint3( 3U, 2U, 1U ),
	uint2( 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gg,
	uint3( 10U, 10U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gg,
	uint3( 20U, 20U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gg,
	uint3( 0U, 100U, 666U ),
	uint2( 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.bg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bg,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bg,
	uint3( 0U, 1U, 2U ),
	uint2( 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bg,
	uint3( 3U, 2U, 1U ),
	uint2( 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bg,
	uint3( 10U, 10U, 20U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bg,
	uint3( 20U, 20U, 10U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bg,
	uint3( 0U, 100U, 666U ),
	uint2( 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.rb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rb,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rb,
	uint3( 0U, 1U, 2U ),
	uint2( 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rb,
	uint3( 3U, 2U, 1U ),
	uint2( 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rb,
	uint3( 10U, 10U, 20U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rb,
	uint3( 20U, 20U, 10U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rb,
	uint3( 0U, 100U, 666U ),
	uint2( 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.gb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gb,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gb,
	uint3( 0U, 1U, 2U ),
	uint2( 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gb,
	uint3( 3U, 2U, 1U ),
	uint2( 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gb,
	uint3( 10U, 10U, 20U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gb,
	uint3( 20U, 20U, 10U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gb,
	uint3( 0U, 100U, 666U ),
	uint2( 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.bb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bb,
	uint3( 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bb,
	uint3( 0U, 1U, 2U ),
	uint2( 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bb,
	uint3( 3U, 2U, 1U ),
	uint2( 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bb,
	uint3( 10U, 10U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bb,
	uint3( 20U, 20U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bb,
	uint3( 0U, 100U, 666U ),
	uint2( 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrr,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrr,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrr,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrr,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrr,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.grr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grr,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grr,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grr,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grr,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grr,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.brr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brr,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brr,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brr,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brr,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brr,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgr,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgr,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgr,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgr,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgr,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.ggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggr,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggr,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggr,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggr,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggr,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgr,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgr,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgr,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgr,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgr,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbr,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbr,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbr,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbr,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbr,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbr,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbr,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbr,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbr,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbr,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbr,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbr,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbr,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbr,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbr,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbr,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrg,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrg,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrg,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrg,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrg,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.grg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grg,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grg,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grg,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grg,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grg,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.brg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brg,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brg,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brg,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brg,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brg,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgg,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgg,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgg,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgg,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgg,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.ggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggg,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggg,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggg,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggg,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggg,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgg,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgg,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgg,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgg,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgg,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbg,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbg,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbg,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbg,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbg,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbg,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbg,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbg,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbg,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbg,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbg,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbg,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbg,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbg,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbg,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbg,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrb,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrb,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrb,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrb,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrb,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.grb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grb,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grb,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grb,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grb,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grb,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.brb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brb,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brb,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brb,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brb,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brb,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgb,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgb,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgb,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgb,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgb,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.ggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggb,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggb,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggb,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggb,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggb,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgb,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgb,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgb,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgb,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgb,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbb,
	uint3( 0U, 1U, 2U ),
	uint3( 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbb,
	uint3( 3U, 2U, 1U ),
	uint3( 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbb,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbb,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbb,
	uint3( 0U, 100U, 666U ),
	uint3( 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbb,
	uint3( 0U, 1U, 2U ),
	uint3( 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbb,
	uint3( 3U, 2U, 1U ),
	uint3( 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbb,
	uint3( 10U, 10U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbb,
	uint3( 20U, 20U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbb,
	uint3( 0U, 100U, 666U ),
	uint3( 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbb,
	uint3( 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbb,
	uint3( 0U, 1U, 2U ),
	uint3( 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbb,
	uint3( 3U, 2U, 1U ),
	uint3( 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbb,
	uint3( 10U, 10U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbb,
	uint3( 20U, 20U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbb,
	uint3( 0U, 100U, 666U ),
	uint3( 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbrr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rggr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gggr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bggr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbgr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbr,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbr,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbr,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbr,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbr,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbr,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbr,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbr,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbbr, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbr,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbr,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbr,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbr,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbr,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbr,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbrg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rggg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gggg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bggg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbgg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbg,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbg,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbg,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbg,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbg,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbg,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbg,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbg,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbbg, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbg,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbg,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbg,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbg,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbg,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbg,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrrb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grrb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brrb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgrb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggrb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgrb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbrb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbrb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbrb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbrb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrgb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grgb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brgb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rggb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rggb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gggb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gggb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bggb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bggb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbgb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbgb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbgb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbgb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rrbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rrbb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_grbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_grbb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_brbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_brbb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rgbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rgbb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_ggbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_ggbb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bgbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bgbb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_rbbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbb,
	uint3( 0U, 1U, 2U ),
	uint4( 0U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbb,
	uint3( 3U, 2U, 1U ),
	uint4( 3U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_rbbb,
	uint3( 0U, 100U, 666U ),
	uint4( 0U, 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_gbbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbb,
	uint3( 0U, 1U, 2U ),
	uint4( 1U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbb,
	uint3( 3U, 2U, 1U ),
	uint4( 2U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbb,
	uint3( 10U, 10U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbb,
	uint3( 20U, 20U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_gbbb,
	uint3( 0U, 100U, 666U ),
	uint4( 100U, 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint3_Swizzle_bbbb, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbb,
	uint3( 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbb,
	uint3( 0U, 1U, 2U ),
	uint4( 2U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbb,
	uint3( 3U, 2U, 1U ),
	uint4( 1U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbb,
	uint3( 10U, 10U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbb,
	uint3( 20U, 20U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3_Swizzle_bbbb,
	uint3( 0U, 100U, 666U ),
	uint4( 666U, 666U, 666U, 666U )
);

