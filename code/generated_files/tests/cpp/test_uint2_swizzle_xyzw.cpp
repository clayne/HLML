/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.xx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xx,
	uint2( 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xx,
	uint2( 0U, 1U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xx,
	uint2( 3U, 2U ),
	uint2( 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xx,
	uint2( 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xx,
	uint2( 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xx,
	uint2( 69U, 420U ),
	uint2( 69U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.yx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yx,
	uint2( 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yx,
	uint2( 0U, 1U ),
	uint2( 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yx,
	uint2( 3U, 2U ),
	uint2( 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yx,
	uint2( 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yx,
	uint2( 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yx,
	uint2( 69U, 420U ),
	uint2( 420U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.xy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xy,
	uint2( 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xy,
	uint2( 0U, 1U ),
	uint2( 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xy,
	uint2( 3U, 2U ),
	uint2( 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xy,
	uint2( 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xy,
	uint2( 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xy,
	uint2( 69U, 420U ),
	uint2( 69U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.yy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yy,
	uint2( 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yy,
	uint2( 0U, 1U ),
	uint2( 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yy,
	uint2( 3U, 2U ),
	uint2( 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yy,
	uint2( 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yy,
	uint2( 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yy,
	uint2( 69U, 420U ),
	uint2( 420U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xxx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.xxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxx,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxx,
	uint2( 0U, 1U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxx,
	uint2( 3U, 2U ),
	uint3( 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxx,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxx,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxx,
	uint2( 69U, 420U ),
	uint3( 69U, 69U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yxx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.yxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxx,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxx,
	uint2( 0U, 1U ),
	uint3( 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxx,
	uint2( 3U, 2U ),
	uint3( 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxx,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxx,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxx,
	uint2( 69U, 420U ),
	uint3( 420U, 69U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xyx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.xyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyx,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyx,
	uint2( 0U, 1U ),
	uint3( 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyx,
	uint2( 3U, 2U ),
	uint3( 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyx,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyx,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyx,
	uint2( 69U, 420U ),
	uint3( 69U, 420U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yyx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.yyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyx,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyx,
	uint2( 0U, 1U ),
	uint3( 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyx,
	uint2( 3U, 2U ),
	uint3( 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyx,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyx,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyx,
	uint2( 69U, 420U ),
	uint3( 420U, 420U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xxy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.xxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxy,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxy,
	uint2( 0U, 1U ),
	uint3( 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxy,
	uint2( 3U, 2U ),
	uint3( 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxy,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxy,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxy,
	uint2( 69U, 420U ),
	uint3( 69U, 69U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yxy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.yxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxy,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxy,
	uint2( 0U, 1U ),
	uint3( 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxy,
	uint2( 3U, 2U ),
	uint3( 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxy,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxy,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxy,
	uint2( 69U, 420U ),
	uint3( 420U, 69U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xyy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.xyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyy,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyy,
	uint2( 0U, 1U ),
	uint3( 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyy,
	uint2( 3U, 2U ),
	uint3( 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyy,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyy,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyy,
	uint2( 69U, 420U ),
	uint3( 69U, 420U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yyy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.yyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyy,
	uint2( 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyy,
	uint2( 0U, 1U ),
	uint3( 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyy,
	uint2( 3U, 2U ),
	uint3( 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyy,
	uint2( 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyy,
	uint2( 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyy,
	uint2( 69U, 420U ),
	uint3( 420U, 420U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xxxx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxx,
	uint2( 0U, 1U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxx,
	uint2( 3U, 2U ),
	uint4( 3U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxx,
	uint2( 69U, 420U ),
	uint4( 69U, 69U, 69U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yxxx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxx,
	uint2( 0U, 1U ),
	uint4( 1U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxx,
	uint2( 3U, 2U ),
	uint4( 2U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxx,
	uint2( 69U, 420U ),
	uint4( 420U, 69U, 69U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xyxx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxx,
	uint2( 0U, 1U ),
	uint4( 0U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxx,
	uint2( 3U, 2U ),
	uint4( 3U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxx,
	uint2( 69U, 420U ),
	uint4( 69U, 420U, 69U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yyxx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxx,
	uint2( 0U, 1U ),
	uint4( 1U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxx,
	uint2( 3U, 2U ),
	uint4( 2U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxx,
	uint2( 69U, 420U ),
	uint4( 420U, 420U, 69U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xxyx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyx,
	uint2( 0U, 1U ),
	uint4( 0U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyx,
	uint2( 3U, 2U ),
	uint4( 3U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyx,
	uint2( 69U, 420U ),
	uint4( 69U, 69U, 420U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yxyx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyx,
	uint2( 0U, 1U ),
	uint4( 1U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyx,
	uint2( 3U, 2U ),
	uint4( 2U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyx,
	uint2( 69U, 420U ),
	uint4( 420U, 69U, 420U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xyyx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyx,
	uint2( 0U, 1U ),
	uint4( 0U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyx,
	uint2( 3U, 2U ),
	uint4( 3U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyx,
	uint2( 69U, 420U ),
	uint4( 69U, 420U, 420U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yyyx, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyx,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyx,
	uint2( 0U, 1U ),
	uint4( 1U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyx,
	uint2( 3U, 2U ),
	uint4( 2U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyx,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyx,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyx,
	uint2( 69U, 420U ),
	uint4( 420U, 420U, 420U, 69U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xxxy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxy,
	uint2( 0U, 1U ),
	uint4( 0U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxy,
	uint2( 3U, 2U ),
	uint4( 3U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxxy,
	uint2( 69U, 420U ),
	uint4( 69U, 69U, 69U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yxxy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxy,
	uint2( 0U, 1U ),
	uint4( 1U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxy,
	uint2( 3U, 2U ),
	uint4( 2U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxxy,
	uint2( 69U, 420U ),
	uint4( 420U, 69U, 69U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xyxy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxy,
	uint2( 0U, 1U ),
	uint4( 0U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxy,
	uint2( 3U, 2U ),
	uint4( 3U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyxy,
	uint2( 69U, 420U ),
	uint4( 69U, 420U, 69U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yyxy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxy,
	uint2( 0U, 1U ),
	uint4( 1U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxy,
	uint2( 3U, 2U ),
	uint4( 2U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyxy,
	uint2( 69U, 420U ),
	uint4( 420U, 420U, 69U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xxyy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyy,
	uint2( 0U, 1U ),
	uint4( 0U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyy,
	uint2( 3U, 2U ),
	uint4( 3U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xxyy,
	uint2( 69U, 420U ),
	uint4( 69U, 69U, 420U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yxyy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyy,
	uint2( 0U, 1U ),
	uint4( 1U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyy,
	uint2( 3U, 2U ),
	uint4( 2U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yxyy,
	uint2( 69U, 420U ),
	uint4( 420U, 69U, 420U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_xyyy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.xyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyy,
	uint2( 0U, 1U ),
	uint4( 0U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyy,
	uint2( 3U, 2U ),
	uint4( 3U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_xyyy,
	uint2( 69U, 420U ),
	uint4( 69U, 420U, 420U, 420U )
);

TEMPER_PARAMETRIC( Test_uint2_Swizzle_yyyy, TEMPER_FLAG_SHOULD_RUN, const uint2& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.yyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyy,
	uint2( 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyy,
	uint2( 0U, 1U ),
	uint4( 1U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyy,
	uint2( 3U, 2U ),
	uint4( 2U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyy,
	uint2( 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyy,
	uint2( 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint2_Swizzle_yyyy,
	uint2( 69U, 420U ),
	uint4( 420U, 420U, 420U, 420U )
);

