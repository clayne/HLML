/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double2& expectedAnswer )
{
	double2 vecCopy = vec;

	double2 vecSwizzled = vecCopy.xx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xx,
	double2( 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xx,
	double2( 0.000000f, 1.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xx,
	double2( 3.000000f, 2.000000f ),
	double2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xx,
	double2( 10.000000f, 20.000000f ),
	double2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xx,
	double2( 40.000000f, 30.000000f ),
	double2( 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xx,
	double2( 69.000000f, 420.000000f ),
	double2( 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double2& expectedAnswer )
{
	double2 vecCopy = vec;

	double2 vecSwizzled = vecCopy.yx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_y = vecCopy.y;
		double old_x = vecCopy.x;

		vecCopy.yx = vecCopy.xy;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.x, old_y ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.y, old_x ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yx,
	double2( 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yx,
	double2( 0.000000f, 1.000000f ),
	double2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yx,
	double2( 3.000000f, 2.000000f ),
	double2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yx,
	double2( 10.000000f, 20.000000f ),
	double2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yx,
	double2( 40.000000f, 30.000000f ),
	double2( 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yx,
	double2( 69.000000f, 420.000000f ),
	double2( 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double2& expectedAnswer )
{
	double2 vecCopy = vec;

	double2 vecSwizzled = vecCopy.xy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_x = vecCopy.x;
		double old_y = vecCopy.y;

		vecCopy.xy = vecCopy.yx;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.y, old_x ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.x, old_y ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xy,
	double2( 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xy,
	double2( 0.000000f, 1.000000f ),
	double2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xy,
	double2( 3.000000f, 2.000000f ),
	double2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xy,
	double2( 10.000000f, 20.000000f ),
	double2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xy,
	double2( 40.000000f, 30.000000f ),
	double2( 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xy,
	double2( 69.000000f, 420.000000f ),
	double2( 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double2& expectedAnswer )
{
	double2 vecCopy = vec;

	double2 vecSwizzled = vecCopy.yy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yy,
	double2( 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yy,
	double2( 0.000000f, 1.000000f ),
	double2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yy,
	double2( 3.000000f, 2.000000f ),
	double2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yy,
	double2( 10.000000f, 20.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yy,
	double2( 40.000000f, 30.000000f ),
	double2( 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yy,
	double2( 69.000000f, 420.000000f ),
	double2( 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xxx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.xxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxx,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxx,
	double2( 0.000000f, 1.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxx,
	double2( 3.000000f, 2.000000f ),
	double3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxx,
	double2( 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxx,
	double2( 40.000000f, 30.000000f ),
	double3( 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxx,
	double2( 69.000000f, 420.000000f ),
	double3( 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yxx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.yxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxx,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxx,
	double2( 0.000000f, 1.000000f ),
	double3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxx,
	double2( 3.000000f, 2.000000f ),
	double3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxx,
	double2( 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxx,
	double2( 40.000000f, 30.000000f ),
	double3( 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxx,
	double2( 69.000000f, 420.000000f ),
	double3( 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xyx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.xyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyx,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyx,
	double2( 0.000000f, 1.000000f ),
	double3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyx,
	double2( 3.000000f, 2.000000f ),
	double3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyx,
	double2( 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyx,
	double2( 40.000000f, 30.000000f ),
	double3( 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyx,
	double2( 69.000000f, 420.000000f ),
	double3( 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yyx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.yyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyx,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyx,
	double2( 0.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyx,
	double2( 3.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyx,
	double2( 10.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyx,
	double2( 40.000000f, 30.000000f ),
	double3( 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyx,
	double2( 69.000000f, 420.000000f ),
	double3( 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xxy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.xxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxy,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxy,
	double2( 0.000000f, 1.000000f ),
	double3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxy,
	double2( 3.000000f, 2.000000f ),
	double3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxy,
	double2( 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxy,
	double2( 40.000000f, 30.000000f ),
	double3( 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxy,
	double2( 69.000000f, 420.000000f ),
	double3( 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yxy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.yxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxy,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxy,
	double2( 0.000000f, 1.000000f ),
	double3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxy,
	double2( 3.000000f, 2.000000f ),
	double3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxy,
	double2( 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxy,
	double2( 40.000000f, 30.000000f ),
	double3( 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxy,
	double2( 69.000000f, 420.000000f ),
	double3( 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xyy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.xyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyy,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyy,
	double2( 0.000000f, 1.000000f ),
	double3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyy,
	double2( 3.000000f, 2.000000f ),
	double3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyy,
	double2( 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyy,
	double2( 40.000000f, 30.000000f ),
	double3( 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyy,
	double2( 69.000000f, 420.000000f ),
	double3( 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yyy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double3& expectedAnswer )
{
	double2 vecCopy = vec;

	double3 vecSwizzled = vecCopy.yyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyy,
	double2( 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyy,
	double2( 0.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyy,
	double2( 3.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyy,
	double2( 10.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyy,
	double2( 40.000000f, 30.000000f ),
	double3( 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyy,
	double2( 69.000000f, 420.000000f ),
	double3( 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xxxx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxx,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxx,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxx,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxx,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxx,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yxxx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxx,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxx,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxx,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxx,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxx,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xyxx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxx,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxx,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxx,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxx,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxx,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yyxx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxx,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxx,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxx,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxx,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxx,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xxyx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyx,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyx,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyx,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyx,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyx,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yxyx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyx,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyx,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyx,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyx,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyx,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xyyx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyx,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyx,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyx,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyx,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyx,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yyyx, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyx,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyx,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyx,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyx,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyx,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyx,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xxxy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxy,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxy,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxy,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxy,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxxy,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yxxy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxy,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxy,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxy,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxy,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxxy,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xyxy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxy,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxy,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxy,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxy,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyxy,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yyxy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxy,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxy,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxy,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxy,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyxy,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xxyy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyy,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyy,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyy,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyy,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xxyy,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yxyy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyy,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyy,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyy,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyy,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yxyy,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_xyyy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.xyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyy,
	double2( 0.000000f, 1.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyy,
	double2( 3.000000f, 2.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyy,
	double2( 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyy,
	double2( 40.000000f, 30.000000f ),
	double4( 40.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_xyyy,
	double2( 69.000000f, 420.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double2_Swizzle_yyyy, TEMPER_FLAG_SHOULD_RUN, const double2& vec, const double4& expectedAnswer )
{
	double2 vecCopy = vec;

	double4 vecSwizzled = vecCopy.yyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyy,
	double2( 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyy,
	double2( 0.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyy,
	double2( 3.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyy,
	double2( 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyy,
	double2( 40.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double2_Swizzle_yyyy,
	double2( 69.000000f, 420.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 420.000000f )
);

