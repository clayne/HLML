/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_float4_Swizzle_xx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.xx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.yx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.zx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.wx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.xy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.yy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.zy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.wy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.xz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.yz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.zz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.wz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.xw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.yw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.zw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float2 vecSwizzled = vec.ww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.ywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.ywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.ywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.wzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.xww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.yww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.zww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_www, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float3 vecSwizzled = vec.www;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.yzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.xwww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.ywww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.zwww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecSwizzled = vec.wwww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 616.000000f )
);

