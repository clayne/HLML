/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_float4_Swizzle_xx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.xx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.yx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;

		vecCopy.yx = vecCopy.xy;

		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.zx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;

		vecCopy.zx = vecCopy.xz;

		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.wx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;

		vecCopy.wx = vecCopy.xw;

		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.xy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;

		vecCopy.xy = vecCopy.yx;

		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.yy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.zy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;

		vecCopy.zy = vecCopy.yz;

		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.wy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;

		vecCopy.wy = vecCopy.yw;

		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.xz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;

		vecCopy.xz = vecCopy.zx;

		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.yz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;

		vecCopy.yz = vecCopy.zy;

		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.zz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.wz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;

		vecCopy.wz = vecCopy.zw;

		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.xw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;

		vecCopy.xw = vecCopy.wx;

		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.yw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;

		vecCopy.yw = vecCopy.wy;

		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.zw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;

		vecCopy.zw = vecCopy.wz;

		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float2& expectedAnswer )
{
	float4 vecCopy = vec;

	float2 vecSwizzled = vecCopy.ww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float2( 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float2( 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;

		vecCopy.zyx = vecCopy.xyz;

		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;

		vecCopy.wyx = vecCopy.xyw;

		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;

		vecCopy.yzx = vecCopy.xzy;

		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;

		vecCopy.wzx = vecCopy.xzw;

		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.ywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;

		vecCopy.ywx = vecCopy.xwy;

		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;

		vecCopy.zwx = vecCopy.xwz;

		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;

		vecCopy.zxy = vecCopy.yxz;

		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;

		vecCopy.wxy = vecCopy.yxw;

		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;

		vecCopy.xzy = vecCopy.yzx;

		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;

		vecCopy.wzy = vecCopy.yzw;

		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;

		vecCopy.xwy = vecCopy.ywx;

		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.ywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;

		vecCopy.zwy = vecCopy.ywz;

		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;

		vecCopy.yxz = vecCopy.zxy;

		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;

		vecCopy.wxz = vecCopy.zxw;

		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;

		vecCopy.xyz = vecCopy.zyx;

		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;

		vecCopy.wyz = vecCopy.zyw;

		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;

		vecCopy.xwz = vecCopy.zwx;

		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.ywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;

		vecCopy.ywz = vecCopy.zwy;

		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;

		vecCopy.yxw = vecCopy.wxy;

		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;

		vecCopy.zxw = vecCopy.wxz;

		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;

		vecCopy.xyw = vecCopy.wyx;

		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;

		vecCopy.zyw = vecCopy.wyz;

		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;

		vecCopy.xzw = vecCopy.wzx;

		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;

		vecCopy.yzw = vecCopy.wzy;

		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.wzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_www, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float3& expectedAnswer )
{
	float4 vecCopy = vec;

	float3 vecSwizzled = vecCopy.www;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float3( 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_www,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float3( 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;

		vecCopy.wzyx = vecCopy.xyzw;

		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;

		vecCopy.zwyx = vecCopy.xywz;

		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;

		vecCopy.wyzx = vecCopy.xzyw;

		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;

		vecCopy.ywzx = vecCopy.xzwy;

		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;

		vecCopy.zywx = vecCopy.xwyz;

		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wywx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wywx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;

		vecCopy.yzwx = vecCopy.xwzy;

		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwwx, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwwx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwx,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;

		vecCopy.wzxy = vecCopy.yxzw;

		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;

		vecCopy.zwxy = vecCopy.yxwz;

		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;

		vecCopy.wxzy = vecCopy.yzxw;

		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;

		vecCopy.xwzy = vecCopy.yzwx;

		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;

		vecCopy.zxwy = vecCopy.ywxz;

		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wywy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wywy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;

		vecCopy.xzwy = vecCopy.ywzx;

		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwwy, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwwy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwy,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;

		vecCopy.wyxz = vecCopy.zxyw;

		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;

		vecCopy.ywxz = vecCopy.zxwy;

		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_w = vecCopy.w;
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;

		vecCopy.wxyz = vecCopy.zyxw;

		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;

		vecCopy.xwyz = vecCopy.zywx;

		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;

		vecCopy.yxwz = vecCopy.zwxy;

		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;
		float old_z = vecCopy.z;

		vecCopy.xywz = vecCopy.zwyx;

		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wywz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wywz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wywz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwwz, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwwz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwwz,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;

		vecCopy.zyxw = vecCopy.wxyz;

		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;
		float old_w = vecCopy.w;

		vecCopy.yzxw = vecCopy.wxzy;

		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwxw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwxw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwxw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 69.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;

		vecCopy.zxyw = vecCopy.wyxz;

		TEMPER_CHECK_TRUE( vecCopy.w == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;
		float old_w = vecCopy.w;

		vecCopy.xzyw = vecCopy.wyzx;

		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwyw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwyw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwyw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 420.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;

		vecCopy.yxzw = vecCopy.wzxy;

		TEMPER_CHECK_TRUE( vecCopy.w == old_y );
		TEMPER_CHECK_TRUE( vecCopy.z == old_x );
		TEMPER_CHECK_TRUE( vecCopy.x == old_z );
		TEMPER_CHECK_TRUE( vecCopy.y == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;
		float old_w = vecCopy.w;

		vecCopy.xyzw = vecCopy.wzyx;

		TEMPER_CHECK_TRUE( vecCopy.w == old_x );
		TEMPER_CHECK_TRUE( vecCopy.z == old_y );
		TEMPER_CHECK_TRUE( vecCopy.y == old_z );
		TEMPER_CHECK_TRUE( vecCopy.x == old_w );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwzw, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwzw;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwzw,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 666.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wxww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wxww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 0.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 3.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 10.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 40.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wxww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 69.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wyww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wyww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wyww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 420.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_yzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_yzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wzww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wzww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wzww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 666.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_xwww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xwww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 0.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 3.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 10.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 40.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_xwww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 69.000000f, 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_ywww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.ywww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_ywww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 420.000000f, 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_zwww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zwww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_zwww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 666.000000f, 616.000000f, 616.000000f, 616.000000f )
);

TEMPER_PARAMETRIC( Test_float4_Swizzle_wwww, TEMPER_FLAG_SHOULD_RUN, const float4& vec, const float4& expectedAnswer )
{
	float4 vecCopy = vec;

	float4 vecSwizzled = vecCopy.wwww;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 3.000000f, 2.000000f, 1.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 10.000000f, 20.000000f, 30.000000f, 40.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 40.000000f, 30.000000f, 20.000000f, 10.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float4_Swizzle_wwww,
	float4( 69.000000f, 420.000000f, 666.000000f, 616.000000f ),
	float4( 616.000000f, 616.000000f, 616.000000f, 616.000000f )
);

