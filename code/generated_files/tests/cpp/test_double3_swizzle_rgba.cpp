/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.rr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.gr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_g = vecCopy.g;
		double old_r = vecCopy.r;

		vecCopy.gr = vecCopy.rg;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_g ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_r ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_br, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.br;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_b = vecCopy.b;
		double old_r = vecCopy.r;

		vecCopy.br = vecCopy.rb;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_b ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_r ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_br,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_br,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_br,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_br,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_br,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_br,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.rg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_r = vecCopy.r;
		double old_g = vecCopy.g;

		vecCopy.rg = vecCopy.gr;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_r ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_g ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.gg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.bg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_b = vecCopy.b;
		double old_g = vecCopy.g;

		vecCopy.bg = vecCopy.gb;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_b ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_g ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.rb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_r = vecCopy.r;
		double old_b = vecCopy.b;

		vecCopy.rb = vecCopy.br;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_r ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_b ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.gb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_g = vecCopy.g;
		double old_b = vecCopy.b;

		vecCopy.gb = vecCopy.bg;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_g ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_b ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double3 vecCopy = vec;

	double2 vecSwizzled = vecCopy.bb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double2( 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.grr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.brr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.ggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.bgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_b = vecCopy.b;
		double old_g = vecCopy.g;
		double old_r = vecCopy.r;

		vecCopy.bgr = vecCopy.rgb;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_b ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_g ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_r ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.gbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_g = vecCopy.g;
		double old_b = vecCopy.b;
		double old_r = vecCopy.r;

		vecCopy.gbr = vecCopy.rbg;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_g ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_b ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_r ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.bbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.grg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.brg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_b = vecCopy.b;
		double old_r = vecCopy.r;
		double old_g = vecCopy.g;

		vecCopy.brg = vecCopy.grb;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_b ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_r ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_g ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.ggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.bgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_r = vecCopy.r;
		double old_b = vecCopy.b;
		double old_g = vecCopy.g;

		vecCopy.rbg = vecCopy.gbr;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_r ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_b ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_g ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.gbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.bbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.grb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_g = vecCopy.g;
		double old_r = vecCopy.r;
		double old_b = vecCopy.b;

		vecCopy.grb = vecCopy.brg;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_g ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_r ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_b ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.brb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		double old_r = vecCopy.r;
		double old_g = vecCopy.g;
		double old_b = vecCopy.b;

		vecCopy.rgb = vecCopy.bgr;

		TEMPER_CHECK_TRUE( doubleeq( vecCopy.b, old_r ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.g, old_g ) );
		TEMPER_CHECK_TRUE( doubleeq( vecCopy.r, old_b ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.ggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.bgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.rbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.gbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecCopy = vec;

	double3 vecSwizzled = vecCopy.bbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double3( 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.ggrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbrr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rggr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gggr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bggr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbgr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.ggbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbbr, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbr,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbr,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbr,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbr,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbr,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbr,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.ggrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbrg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rggg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gggg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bggg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbgg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.ggbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbbg, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbg,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbg,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbg,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbg,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbg,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbg,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.ggrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbrb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbrb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rggb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rggb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gggb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gggb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bggb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bggb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbgb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbgb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rrbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rrbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rrbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_grbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.grbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_grbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_brbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.brbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_brbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rgbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rgbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_ggbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.ggbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_ggbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bgbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bgbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_rbbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.rbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 10.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 40.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_rbbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_gbbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.gbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 20.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 30.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_gbbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_double3_Swizzle_bbbb, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double3 vecCopy = vec;

	double4 vecSwizzled = vecCopy.bbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbb,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbb,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbb,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbb,
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4( 30.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbb,
	double3( 40.000000f, 30.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_bbbb,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 666.000000f, 666.000000f )
);

