/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_int4x2_less_than, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const bool4x2& expectedAnswer )
{
	bool4x2 actualResult = lhs < rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_PARAMETRIC( Test_int4x2_less_than_equal, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const bool4x2& expectedAnswer )
{
	bool4x2 actualResult = lhs <= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than_equal,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than_equal,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than_equal,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_less_than_equal,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_PARAMETRIC( Test_int4x2_greater_than, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const bool4x2& expectedAnswer )
{
	bool4x2 actualResult = lhs > rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_PARAMETRIC( Test_int4x2_greater_than_equal, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const bool4x2& expectedAnswer )
{
	bool4x2 actualResult = lhs >= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than_equal,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than_equal,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		false, false,
		false, false,
		false, false,
		false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than_equal,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_greater_than_equal,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	bool4x2(
		true, true,
		true, true,
		true, true,
		true, true
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cadds, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cadds,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cadds,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	2,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cadds,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	2,
	int4x2(
		6, 6,
		6, 6,
		6, 6,
		6, 6
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cadds,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	4,
	int4x2(
		12, 12,
		12, 12,
		12, 12,
		12, 12
	)
);

TEMPER_PARAMETRIC( Test_int4x2_csubs, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubs,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubs,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	2,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubs,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	2,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubs,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	4,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cmuls, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmuls,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmuls,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	2,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmuls,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	2,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmuls,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	4,
	int4x2(
		32, 32,
		32, 32,
		32, 32,
		32, 32
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cdivs, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivs,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivs,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	2,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivs,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	2,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivs,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	4,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_PARAMETRIC( Test_int4x2_caddm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_caddm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_caddm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_caddm,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		6, 6,
		6, 6,
		6, 6,
		6, 6
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_caddm,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		12, 12,
		12, 12,
		12, 12,
		12, 12
	)
);

TEMPER_PARAMETRIC( Test_int4x2_csubm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubm,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_csubm,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cmulm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmulm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmulm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmulm,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cmulm,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		32, 32,
		32, 32,
		32, 32,
		32, 32
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cdivm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivm,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cdivm,
	int4x2(
		8, 8,
		8, 8,
		8, 8,
		8, 8
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif

TEMPER_PARAMETRIC( Test_int4x2_increment_prefix, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int4x2 xlocal = (int4x2) x;
	int4x2 actualAnswer = ++xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_prefix,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_prefix,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_prefix,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_prefix,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		5, 5,
		5, 5,
		5, 5,
		5, 5
	)
);

TEMPER_PARAMETRIC( Test_int4x2_increment_postfix, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int4x2 xlocal = (int4x2) x;
	int4x2 actualAnswer = xlocal++;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_postfix,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_postfix,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_postfix,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_increment_postfix,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		5, 5,
		5, 5,
		5, 5,
		5, 5
	)
);

TEMPER_PARAMETRIC( Test_int4x2_decrement_prefix, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int4x2 xlocal = (int4x2) x;
	int4x2 actualAnswer = --xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_prefix,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_prefix,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_prefix,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_prefix,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

TEMPER_PARAMETRIC( Test_int4x2_decrement_postfix, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int4x2 xlocal = (int4x2) x;
	int4x2 actualAnswer = xlocal--;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_postfix,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_postfix,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_postfix,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_decrement_postfix,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	),
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif
#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
TEMPER_PARAMETRIC( Test_int4x2_negate_prefix, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int4x2 xlocal = (int4x2) x;
	int4x2 actualAnswer = -xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_negate_prefix,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_negate_prefix,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		-1, -1,
		-1, -1,
		-1, -1,
		-1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_negate_prefix,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		-2, -2,
		-2, -2,
		-2, -2,
		-2, -2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_negate_prefix,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	),
	int4x2(
		-3, -3,
		-3, -3,
		-3, -3,
		-3, -3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_negate_prefix,
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	),
	int4x2(
		-10, -10,
		-10, -10,
		-10, -10,
		-10, -10
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
TEMPER_PARAMETRIC( Test_int4x2_not_prefix, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int4x2 xlocal = (int4x2) x;
	int4x2 actualAnswer = ~xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_not_prefix,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		-2, -2,
		-2, -2,
		-2, -2,
		-2, -2
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif

TEMPER_PARAMETRIC( Test_int4x2_cands, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs & rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cands,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	0,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cands,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	1,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cands,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	0,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cands,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cors, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs | rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cors,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	0,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cors,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	1,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cors,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	0,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cors,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cxors, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs ^ rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxors,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	0,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxors,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	1,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxors,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	0,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxors,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cshift_lefts, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs << rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_lefts,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	0,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_lefts,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	1,
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_lefts,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	0,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_lefts,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cshift_rights, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int32_t& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs >> rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rights,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	0,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rights,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	1,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rights,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	0,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rights,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	1,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_PARAMETRIC( Test_int4x2_candm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs & rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_candm,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_candm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_candm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_candm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_PARAMETRIC( Test_int4x2_corm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs | rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_corm,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_corm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_corm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_corm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cxorm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs ^ rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxorm,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxorm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxorm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cxorm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cshift_leftm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs << rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_leftm,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_leftm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		4, 4,
		4, 4,
		4, 4,
		4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_leftm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_leftm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_PARAMETRIC( Test_int4x2_cshift_rightm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = lhs >> rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rightm,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rightm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rightm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_cshift_rightm,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_PARAMETRIC( Test_int4x2_min, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = min( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_min,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_min,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_min,
	int4x2(
		420, 420,
		420, 420,
		420, 420,
		420, 420
	),
	int4x2(
		69, 69,
		69, 69,
		69, 69,
		69, 69
	),
	int4x2(
		69, 69,
		69, 69,
		69, 69,
		69, 69
	)
);

TEMPER_PARAMETRIC( Test_int4x2_max, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int4x2& rhs, const int4x2& expectedAnswer )
{
	int4x2 actualResult = max( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_max,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_max,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_max,
	int4x2(
		69, 69,
		69, 69,
		69, 69,
		69, 69
	),
	int4x2(
		420, 420,
		420, 420,
		420, 420,
		420, 420
	),
	int4x2(
		420, 420,
		420, 420,
		420, 420,
		420, 420
	)
);

TEMPER_PARAMETRIC( Test_int4x2_saturate, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	int4x2 actualResult = saturate( x );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_saturate,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_saturate,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_saturate,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_saturate,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_saturate,
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_PARAMETRIC( Test_int4x2_sign, TEMPER_FLAG_SHOULD_RUN, const int4x2& x, const int4x2& expectedAnswer )
{
	int4x2 actualResult = sign( x );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_sign,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_sign,
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_sign,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_sign,
	int4x2(
		3, 3,
		3, 3,
		3, 3,
		3, 3
	),
	int4x2(
		1, 1,
		1, 1,
		1, 1,
		1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_sign,
	int4x2(
		-1, -1,
		-1, -1,
		-1, -1,
		-1, -1
	),
	int4x2(
		-1, -1,
		-1, -1,
		-1, -1,
		-1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_sign,
	int4x2(
		-2, -2,
		-2, -2,
		-2, -2,
		-2, -2
	),
	int4x2(
		-1, -1,
		-1, -1,
		-1, -1,
		-1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_sign,
	int4x2(
		-3, -3,
		-3, -3,
		-3, -3,
		-3, -3
	),
	int4x2(
		-1, -1,
		-1, -1,
		-1, -1,
		-1, -1
	)
);

TEMPER_PARAMETRIC( Test_int4x2_int4x2, TEMPER_FLAG_SHOULD_RUN, const int4x2& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x2,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x2,
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x2,
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x2,
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_int4x3, TEMPER_FLAG_SHOULD_RUN, const int4x3& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x3,
	int4x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x3,
	int4x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x3,
	int4x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110,
		130, 140, 150
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x3,
	int4x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60,
		40, 30, 20
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_int4x4, TEMPER_FLAG_SHOULD_RUN, const int4x4& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x4,
	int4x4(
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x4,
	int4x4(
		10, 10, 10, 10,
		10, 10, 10, 10,
		10, 10, 10, 10,
		10, 10, 10, 10
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x4,
	int4x4(
		10, 20, 30, 40,
		50, 60, 70, 80,
		90, 100, 110, 120,
		130, 140, 150, 160
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_int4x4,
	int4x4(
		160, 150, 140, 130,
		120, 110, 100, 90,
		80, 70, 60, 50,
		40, 30, 20, 10
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_uint4x2, TEMPER_FLAG_SHOULD_RUN, const uint4x2& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x2,
	uint4x2(
		0U, 0U,
		0U, 0U,
		0U, 0U,
		0U, 0U
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x2,
	uint4x2(
		10U, 10U,
		10U, 10U,
		10U, 10U,
		10U, 10U
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x2,
	uint4x2(
		10U, 20U,
		50U, 60U,
		90U, 100U,
		130U, 140U
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x2,
	uint4x2(
		160U, 150U,
		120U, 110U,
		80U, 70U,
		40U, 30U
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_uint4x3, TEMPER_FLAG_SHOULD_RUN, const uint4x3& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x3,
	uint4x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x3,
	uint4x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x3,
	uint4x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U,
		130U, 140U, 150U
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x3,
	uint4x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U,
		40U, 30U, 20U
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_uint4x4, TEMPER_FLAG_SHOULD_RUN, const uint4x4& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x4,
	uint4x4(
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x4,
	uint4x4(
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x4,
	uint4x4(
		10U, 20U, 30U, 40U,
		50U, 60U, 70U, 80U,
		90U, 100U, 110U, 120U,
		130U, 140U, 150U, 160U
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_uint4x4,
	uint4x4(
		160U, 150U, 140U, 130U,
		120U, 110U, 100U, 90U,
		80U, 70U, 60U, 50U,
		40U, 30U, 20U, 10U
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_float4x2, TEMPER_FLAG_SHOULD_RUN, const float4x2& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x2,
	float4x2(
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x2,
	float4x2(
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x2,
	float4x2(
		10.000000f, 20.000000f,
		50.000000f, 60.000000f,
		90.000000f, 100.000000f,
		130.000000f, 140.000000f
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x2,
	float4x2(
		160.000000f, 150.000000f,
		120.000000f, 110.000000f,
		80.000000f, 70.000000f,
		40.000000f, 30.000000f
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_float4x3, TEMPER_FLAG_SHOULD_RUN, const float4x3& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x3,
	float4x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x3,
	float4x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x3,
	float4x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f,
		130.000000f, 140.000000f, 150.000000f
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x3,
	float4x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f,
		40.000000f, 30.000000f, 20.000000f
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_float4x4, TEMPER_FLAG_SHOULD_RUN, const float4x4& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x4,
	float4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x4,
	float4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x4,
	float4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_float4x4,
	float4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_double4x2, TEMPER_FLAG_SHOULD_RUN, const double4x2& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x2,
	double4x2(
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x2,
	double4x2(
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x2,
	double4x2(
		10.000000f, 20.000000f,
		50.000000f, 60.000000f,
		90.000000f, 100.000000f,
		130.000000f, 140.000000f
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x2,
	double4x2(
		160.000000f, 150.000000f,
		120.000000f, 110.000000f,
		80.000000f, 70.000000f,
		40.000000f, 30.000000f
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_double4x3, TEMPER_FLAG_SHOULD_RUN, const double4x3& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x3,
	double4x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x3,
	double4x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x3,
	double4x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f,
		130.000000f, 140.000000f, 150.000000f
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x3,
	double4x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f,
		40.000000f, 30.000000f, 20.000000f
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_double4x4, TEMPER_FLAG_SHOULD_RUN, const double4x4& convertFrom, const int4x2& expectedAnswer )
{
	int4x2 actualAnswer = int4x2( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[3][0] == actualAnswer[3][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[3][1] == actualAnswer[3][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x4,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x4,
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x4,
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	),
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_double4x4,
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	),
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	)
);

TEMPER_PARAMETRIC( Test_int4x2_identity, TEMPER_FLAG_SHOULD_RUN, const int4x2& matrix, const bool expectedAnswer )
{
	int4x2 identityMat;
	identity( identityMat );
	bool isMatrixIdentity = ( identityMat == matrix );
	TEMPER_CHECK_TRUE( isMatrixIdentity == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_identity,
	int4x2(
		1, 0,
		0, 1,
		0, 0,
		0, 0
	),
	true
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_identity,
	int4x2(
		1, 1,
		0, 1,
		0, 0,
		0, 0
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_identity,
	int4x2(
		1, 0,
		1, 1,
		0, 0,
		0, 0
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_identity,
	int4x2(
		1, 1,
		1, 1,
		0, 0,
		0, 0
	),
	false
);

TEMPER_PARAMETRIC( Test_int4x2_transpose, TEMPER_FLAG_SHOULD_RUN, const int4x2& matrix, const int2x4& expectedAnswer )
{
	int2x4 actualResult = transpose( matrix );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_transpose,
	int4x2(
		1, 0,
		0, 1,
		0, 0,
		0, 0
	),
	int2x4(
		1, 0, 0, 0,
		0, 1, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_transpose,
	int4x2(
		0, 1,
		4, 5,
		8, 9,
		12, 13
	),
	int2x4(
		0, 4, 8, 12,
		1, 5, 9, 13
	)
);

TEMPER_PARAMETRIC( Test_int4x2_mulm, TEMPER_FLAG_SHOULD_RUN, const int4x2& lhs, const int2x4& rhs, const int4x4& expectedAnswer )
{
	int4x4 actualResult = mul( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_mulm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int2x4(
		4, 4, 4, 4,
		4, 4, 4, 4
	),
	int4x4(
		16, 16, 16, 16,
		16, 16, 16, 16,
		16, 16, 16, 16,
		16, 16, 16, 16
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4x2_mulm,
	int4x2(
		2, 2,
		2, 2,
		2, 2,
		2, 2
	),
	int2x4(
		1, 0, 0, 0,
		0, 1, 0, 0
	),
	int4x4(
		2, 2, 0, 0,
		2, 2, 0, 0,
		2, 2, 0, 0,
		2, 2, 0, 0
	)
);

