/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_int3x3_less_than, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs < rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_PARAMETRIC( Test_int3x3_less_than_equal, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs <= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than_equal,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than_equal,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than_equal,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_less_than_equal,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_PARAMETRIC( Test_int3x3_greater_than, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs > rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_PARAMETRIC( Test_int3x3_greater_than_equal, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs >= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than_equal,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than_equal,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than_equal,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_greater_than_equal,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cadds, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cadds,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cadds,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	2,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cadds,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	2,
	int3x3(
		6, 6, 6,
		6, 6, 6,
		6, 6, 6
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cadds,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	4,
	int3x3(
		12, 12, 12,
		12, 12, 12,
		12, 12, 12
	)
);

TEMPER_PARAMETRIC( Test_int3x3_csubs, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubs,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubs,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	2,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubs,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	2,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubs,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	4,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cmuls, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmuls,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmuls,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	2,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmuls,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	2,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmuls,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	4,
	int3x3(
		32, 32, 32,
		32, 32, 32,
		32, 32, 32
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cdivs, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivs,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivs,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	2,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivs,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	2,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivs,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	4,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_PARAMETRIC( Test_int3x3_caddm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_caddm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_caddm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_caddm,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		6, 6, 6,
		6, 6, 6,
		6, 6, 6
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_caddm,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		12, 12, 12,
		12, 12, 12,
		12, 12, 12
	)
);

TEMPER_PARAMETRIC( Test_int3x3_csubm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubm,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_csubm,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cmulm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmulm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmulm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmulm,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cmulm,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		32, 32, 32,
		32, 32, 32,
		32, 32, 32
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cdivm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivm,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cdivm,
	int3x3(
		8, 8, 8,
		8, 8, 8,
		8, 8, 8
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif

TEMPER_PARAMETRIC( Test_int3x3_increment_prefix, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int3x3 xlocal = (int3x3) x;
	int3x3 actualAnswer = ++xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_prefix,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_prefix,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_prefix,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_prefix,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		5, 5, 5,
		5, 5, 5,
		5, 5, 5
	)
);

TEMPER_PARAMETRIC( Test_int3x3_increment_postfix, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int3x3 xlocal = (int3x3) x;
	int3x3 actualAnswer = xlocal++;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_postfix,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_postfix,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_postfix,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_increment_postfix,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		5, 5, 5,
		5, 5, 5,
		5, 5, 5
	)
);

TEMPER_PARAMETRIC( Test_int3x3_decrement_prefix, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int3x3 xlocal = (int3x3) x;
	int3x3 actualAnswer = --xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_prefix,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_prefix,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_prefix,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_prefix,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

TEMPER_PARAMETRIC( Test_int3x3_decrement_postfix, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int3x3 xlocal = (int3x3) x;
	int3x3 actualAnswer = xlocal--;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_postfix,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_postfix,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_postfix,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_decrement_postfix,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif
#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
TEMPER_PARAMETRIC( Test_int3x3_negate_prefix, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int3x3 xlocal = (int3x3) x;
	int3x3 actualAnswer = -xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_negate_prefix,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_negate_prefix,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		-1, -1, -1,
		-1, -1, -1,
		-1, -1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_negate_prefix,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		-2, -2, -2,
		-2, -2, -2,
		-2, -2, -2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_negate_prefix,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	),
	int3x3(
		-3, -3, -3,
		-3, -3, -3,
		-3, -3, -3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_negate_prefix,
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	),
	int3x3(
		-10, -10, -10,
		-10, -10, -10,
		-10, -10, -10
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
TEMPER_PARAMETRIC( Test_int3x3_not_prefix, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	int3x3 xlocal = (int3x3) x;
	int3x3 actualAnswer = ~xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_not_prefix,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		-2, -2, -2,
		-2, -2, -2,
		-2, -2, -2
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif

TEMPER_PARAMETRIC( Test_int3x3_cands, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs & rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cands,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	0,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cands,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	1,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cands,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	0,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cands,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cors, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs | rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cors,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	0,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cors,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	1,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cors,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	0,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cors,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cxors, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs ^ rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxors,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	0,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxors,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	1,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxors,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	0,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxors,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cshift_lefts, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs << rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_lefts,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	0,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_lefts,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	1,
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_lefts,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	0,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_lefts,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cshift_rights, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int32_t& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs >> rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rights,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	0,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rights,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	1,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rights,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	0,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rights,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	1,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_PARAMETRIC( Test_int3x3_candm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs & rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_candm,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_candm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_candm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_candm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_PARAMETRIC( Test_int3x3_corm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs | rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_corm,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_corm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_corm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_corm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cxorm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs ^ rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxorm,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxorm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxorm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cxorm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cshift_leftm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs << rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_leftm,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_leftm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_leftm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_leftm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_PARAMETRIC( Test_int3x3_cshift_rightm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = lhs >> rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rightm,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rightm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rightm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_cshift_rightm,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_PARAMETRIC( Test_int3x3_min, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = min( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_min,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_min,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_min,
	int3x3(
		420, 420, 420,
		420, 420, 420,
		420, 420, 420
	),
	int3x3(
		69, 69, 69,
		69, 69, 69,
		69, 69, 69
	),
	int3x3(
		69, 69, 69,
		69, 69, 69,
		69, 69, 69
	)
);

TEMPER_PARAMETRIC( Test_int3x3_max, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = max( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_max,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_max,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_max,
	int3x3(
		69, 69, 69,
		69, 69, 69,
		69, 69, 69
	),
	int3x3(
		420, 420, 420,
		420, 420, 420,
		420, 420, 420
	),
	int3x3(
		420, 420, 420,
		420, 420, 420,
		420, 420, 420
	)
);

TEMPER_PARAMETRIC( Test_int3x3_saturate, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	int3x3 actualResult = saturate( x );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_saturate,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_saturate,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_saturate,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_saturate,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_saturate,
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_PARAMETRIC( Test_int3x3_sign, TEMPER_FLAG_SHOULD_RUN, const int3x3& x, const int3x3& expectedAnswer )
{
	int3x3 actualResult = sign( x );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_sign,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_sign,
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_sign,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_sign,
	int3x3(
		3, 3, 3,
		3, 3, 3,
		3, 3, 3
	),
	int3x3(
		1, 1, 1,
		1, 1, 1,
		1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_sign,
	int3x3(
		-1, -1, -1,
		-1, -1, -1,
		-1, -1, -1
	),
	int3x3(
		-1, -1, -1,
		-1, -1, -1,
		-1, -1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_sign,
	int3x3(
		-2, -2, -2,
		-2, -2, -2,
		-2, -2, -2
	),
	int3x3(
		-1, -1, -1,
		-1, -1, -1,
		-1, -1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_sign,
	int3x3(
		-3, -3, -3,
		-3, -3, -3,
		-3, -3, -3
	),
	int3x3(
		-1, -1, -1,
		-1, -1, -1,
		-1, -1, -1
	)
);

TEMPER_PARAMETRIC( Test_int3x3_int3x3, TEMPER_FLAG_SHOULD_RUN, const int3x3& convertFrom, const int3x3& expectedAnswer )
{
	int3x3 actualAnswer = int3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_int3x3,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_int3x3,
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	),
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_int3x3,
	int3x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110
	),
	int3x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_int3x3,
	int3x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60
	),
	int3x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60
	)
);

TEMPER_PARAMETRIC( Test_int3x3_uint3x3, TEMPER_FLAG_SHOULD_RUN, const uint3x3& convertFrom, const int3x3& expectedAnswer )
{
	int3x3 actualAnswer = int3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_uint3x3,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_uint3x3,
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	),
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_uint3x3,
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	),
	int3x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_uint3x3,
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	),
	int3x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60
	)
);

TEMPER_PARAMETRIC( Test_int3x3_float3x3, TEMPER_FLAG_SHOULD_RUN, const float3x3& convertFrom, const int3x3& expectedAnswer )
{
	int3x3 actualAnswer = int3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_float3x3,
	float3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_float3x3,
	float3x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_float3x3,
	float3x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f
	),
	int3x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_float3x3,
	float3x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f
	),
	int3x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60
	)
);

TEMPER_PARAMETRIC( Test_int3x3_double3x3, TEMPER_FLAG_SHOULD_RUN, const double3x3& convertFrom, const int3x3& expectedAnswer )
{
	int3x3 actualAnswer = int3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_double3x3,
	double3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_double3x3,
	double3x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_double3x3,
	double3x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f
	),
	int3x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_double3x3,
	double3x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f
	),
	int3x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60
	)
);

TEMPER_PARAMETRIC( Test_int3x3_identity, TEMPER_FLAG_SHOULD_RUN, const int3x3& matrix, const bool expectedAnswer )
{
	int3x3 identityMat;
	identity( identityMat );
	bool isMatrixIdentity = ( identityMat == matrix );
	TEMPER_CHECK_TRUE( isMatrixIdentity == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_identity,
	int3x3(
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
	),
	true
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_identity,
	int3x3(
		1, 1, 0,
		0, 1, 0,
		0, 0, 1
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_identity,
	int3x3(
		1, 0, 0,
		1, 1, 0,
		0, 0, 1
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_identity,
	int3x3(
		1, 1, 0,
		1, 1, 0,
		0, 0, 1
	),
	false
);

TEMPER_PARAMETRIC( Test_int3x3_transpose, TEMPER_FLAG_SHOULD_RUN, const int3x3& matrix, const int3x3& expectedAnswer )
{
	int3x3 actualResult = transpose( matrix );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_transpose,
	int3x3(
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
	),
	int3x3(
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_transpose,
	int3x3(
		0, 1, 2,
		4, 5, 6,
		8, 9, 10
	),
	int3x3(
		0, 4, 8,
		1, 5, 9,
		2, 6, 10
	)
);

TEMPER_PARAMETRIC( Test_int3x3_mulm, TEMPER_FLAG_SHOULD_RUN, const int3x3& lhs, const int3x3& rhs, const int3x3& expectedAnswer )
{
	int3x3 actualResult = mul( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_mulm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		4, 4, 4,
		4, 4, 4,
		4, 4, 4
	),
	int3x3(
		24, 24, 24,
		24, 24, 24,
		24, 24, 24
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_mulm,
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	),
	int3x3(
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
	),
	int3x3(
		2, 2, 2,
		2, 2, 2,
		2, 2, 2
	)
);

TEMPER_PARAMETRIC( Test_int3x3_mulv, TEMPER_FLAG_SHOULD_RUN, const int3& vec, const int3x3& mat, const int3& expectedAnswer )
{
	int3 actualResult = mul( vec, mat );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_mulv,
	int3( 0, 0, 0 ),
	int3x3(
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
	),
	int3(
		0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_mulv,
	int3( 2, 1, 4 ),
	int3x3(
		1, 2, 3,
		5, 6, 7,
		9, 10, 11
	),
	int3(
		43, 50, 57
	)
);

TEMPER_PARAMETRIC( Test_int3x3_determinant, TEMPER_FLAG_SHOULD_RUN, const int3x3& matrix, const int32_t expectedAnswer )
{
	int32_t actualResult = determinant( matrix );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int3x3_determinant,
	int3x3(
		6, 2, 3,
		2, 7, 5,
		3, 5, 7
	),
	113
);

