/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_int2_Swizzle_rr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int2& expectedAnswer )
{
	int2 vecSwizzled = vec.rr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rr,
	int2( 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rr,
	int2( 0, 1 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rr,
	int2( 3, 2 ),
	int2( 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rr,
	int2( 10, 10 ),
	int2( 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rr,
	int2( 20, 20 ),
	int2( 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rr,
	int2( -2147483648, 100 ),
	int2( -2147483648, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_gr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int2& expectedAnswer )
{
	int2 vecSwizzled = vec.gr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gr,
	int2( 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gr,
	int2( 0, 1 ),
	int2( 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gr,
	int2( 3, 2 ),
	int2( 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gr,
	int2( 10, 10 ),
	int2( 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gr,
	int2( 20, 20 ),
	int2( 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gr,
	int2( -2147483648, 100 ),
	int2( 100, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int2& expectedAnswer )
{
	int2 vecSwizzled = vec.rg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rg,
	int2( 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rg,
	int2( 0, 1 ),
	int2( 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rg,
	int2( 3, 2 ),
	int2( 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rg,
	int2( 10, 10 ),
	int2( 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rg,
	int2( 20, 20 ),
	int2( 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rg,
	int2( -2147483648, 100 ),
	int2( -2147483648, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_gg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int2& expectedAnswer )
{
	int2 vecSwizzled = vec.gg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gg,
	int2( 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gg,
	int2( 0, 1 ),
	int2( 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gg,
	int2( 3, 2 ),
	int2( 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gg,
	int2( 10, 10 ),
	int2( 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gg,
	int2( 20, 20 ),
	int2( 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gg,
	int2( -2147483648, 100 ),
	int2( 100, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rrr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.rrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrr,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrr,
	int2( 0, 1 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrr,
	int2( 3, 2 ),
	int3( 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrr,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrr,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrr,
	int2( -2147483648, 100 ),
	int3( -2147483648, -2147483648, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_grr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.grr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grr,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grr,
	int2( 0, 1 ),
	int3( 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grr,
	int2( 3, 2 ),
	int3( 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grr,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grr,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grr,
	int2( -2147483648, 100 ),
	int3( 100, -2147483648, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rgr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.rgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgr,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgr,
	int2( 0, 1 ),
	int3( 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgr,
	int2( 3, 2 ),
	int3( 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgr,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgr,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgr,
	int2( -2147483648, 100 ),
	int3( -2147483648, 100, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_ggr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.ggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggr,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggr,
	int2( 0, 1 ),
	int3( 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggr,
	int2( 3, 2 ),
	int3( 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggr,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggr,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggr,
	int2( -2147483648, 100 ),
	int3( 100, 100, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rrg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.rrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrg,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrg,
	int2( 0, 1 ),
	int3( 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrg,
	int2( 3, 2 ),
	int3( 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrg,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrg,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrg,
	int2( -2147483648, 100 ),
	int3( -2147483648, -2147483648, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_grg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.grg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grg,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grg,
	int2( 0, 1 ),
	int3( 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grg,
	int2( 3, 2 ),
	int3( 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grg,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grg,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grg,
	int2( -2147483648, 100 ),
	int3( 100, -2147483648, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rgg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.rgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgg,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgg,
	int2( 0, 1 ),
	int3( 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgg,
	int2( 3, 2 ),
	int3( 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgg,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgg,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgg,
	int2( -2147483648, 100 ),
	int3( -2147483648, 100, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_ggg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int3& expectedAnswer )
{
	int3 vecSwizzled = vec.ggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggg,
	int2( 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggg,
	int2( 0, 1 ),
	int3( 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggg,
	int2( 3, 2 ),
	int3( 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggg,
	int2( 10, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggg,
	int2( 20, 20 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggg,
	int2( -2147483648, 100 ),
	int3( 100, 100, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rrrr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rrrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrr,
	int2( 0, 1 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrr,
	int2( 3, 2 ),
	int4( 3, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrr,
	int2( -2147483648, 100 ),
	int4( -2147483648, -2147483648, -2147483648, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_grrr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.grrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrr,
	int2( 0, 1 ),
	int4( 1, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrr,
	int2( 3, 2 ),
	int4( 2, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrr,
	int2( -2147483648, 100 ),
	int4( 100, -2147483648, -2147483648, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rgrr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrr,
	int2( 0, 1 ),
	int4( 0, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrr,
	int2( 3, 2 ),
	int4( 3, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrr,
	int2( -2147483648, 100 ),
	int4( -2147483648, 100, -2147483648, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_ggrr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.ggrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrr,
	int2( 0, 1 ),
	int4( 1, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrr,
	int2( 3, 2 ),
	int4( 2, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrr,
	int2( -2147483648, 100 ),
	int4( 100, 100, -2147483648, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rrgr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rrgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgr,
	int2( 0, 1 ),
	int4( 0, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgr,
	int2( 3, 2 ),
	int4( 3, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgr,
	int2( -2147483648, 100 ),
	int4( -2147483648, -2147483648, 100, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_grgr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.grgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgr,
	int2( 0, 1 ),
	int4( 1, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgr,
	int2( 3, 2 ),
	int4( 2, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgr,
	int2( -2147483648, 100 ),
	int4( 100, -2147483648, 100, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rggr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggr,
	int2( 0, 1 ),
	int4( 0, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggr,
	int2( 3, 2 ),
	int4( 3, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggr,
	int2( -2147483648, 100 ),
	int4( -2147483648, 100, 100, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_gggr, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.gggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggr,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggr,
	int2( 0, 1 ),
	int4( 1, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggr,
	int2( 3, 2 ),
	int4( 2, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggr,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggr,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggr,
	int2( -2147483648, 100 ),
	int4( 100, 100, 100, -2147483648 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rrrg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rrrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrg,
	int2( 0, 1 ),
	int4( 0, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrg,
	int2( 3, 2 ),
	int4( 3, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrrg,
	int2( -2147483648, 100 ),
	int4( -2147483648, -2147483648, -2147483648, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_grrg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.grrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrg,
	int2( 0, 1 ),
	int4( 1, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrg,
	int2( 3, 2 ),
	int4( 2, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grrg,
	int2( -2147483648, 100 ),
	int4( 100, -2147483648, -2147483648, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rgrg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrg,
	int2( 0, 1 ),
	int4( 0, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrg,
	int2( 3, 2 ),
	int4( 3, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rgrg,
	int2( -2147483648, 100 ),
	int4( -2147483648, 100, -2147483648, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_ggrg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.ggrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrg,
	int2( 0, 1 ),
	int4( 1, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrg,
	int2( 3, 2 ),
	int4( 2, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_ggrg,
	int2( -2147483648, 100 ),
	int4( 100, 100, -2147483648, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rrgg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rrgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgg,
	int2( 0, 1 ),
	int4( 0, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgg,
	int2( 3, 2 ),
	int4( 3, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rrgg,
	int2( -2147483648, 100 ),
	int4( -2147483648, -2147483648, 100, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_grgg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.grgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgg,
	int2( 0, 1 ),
	int4( 1, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgg,
	int2( 3, 2 ),
	int4( 2, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_grgg,
	int2( -2147483648, 100 ),
	int4( 100, -2147483648, 100, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_rggg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.rggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggg,
	int2( 0, 1 ),
	int4( 0, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggg,
	int2( 3, 2 ),
	int4( 3, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_rggg,
	int2( -2147483648, 100 ),
	int4( -2147483648, 100, 100, 100 )
);

TEMPER_PARAMETRIC( Test_int2_Swizzle_gggg, TEMPER_FLAG_SHOULD_RUN, const int2& vec, const int4& expectedAnswer )
{
	int4 vecSwizzled = vec.gggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggg,
	int2( 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggg,
	int2( 0, 1 ),
	int4( 1, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggg,
	int2( 3, 2 ),
	int4( 2, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggg,
	int2( 10, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggg,
	int2( 20, 20 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int2_Swizzle_gggg,
	int2( -2147483648, 100 ),
	int4( 100, 100, 100, 100 )
);

