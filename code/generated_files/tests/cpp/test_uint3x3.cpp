/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_uint3x3_less_than, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs < rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_less_than_equal, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs <= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than_equal,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than_equal,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than_equal,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_less_than_equal,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_greater_than, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs > rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_greater_than_equal, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const bool3x3& expectedAnswer )
{
	bool3x3 actualResult = lhs >= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than_equal,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than_equal,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		false, false, false,
		false, false, false,
		false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than_equal,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_greater_than_equal,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	bool3x3(
		true, true, true,
		true, true, true,
		true, true, true
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cadds, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cadds,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cadds,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	2U,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cadds,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	2U,
	uint3x3(
		6U, 6U, 6U,
		6U, 6U, 6U,
		6U, 6U, 6U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cadds,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	4U,
	uint3x3(
		12U, 12U, 12U,
		12U, 12U, 12U,
		12U, 12U, 12U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_csubs, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubs,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubs,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	2U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubs,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	2U,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubs,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	4U,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cmuls, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmuls,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmuls,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	2U,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmuls,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	2U,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmuls,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	4U,
	uint3x3(
		32U, 32U, 32U,
		32U, 32U, 32U,
		32U, 32U, 32U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cdivs, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivs,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivs,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	2U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivs,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	2U,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivs,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	4U,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_caddm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_caddm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_caddm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_caddm,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		6U, 6U, 6U,
		6U, 6U, 6U,
		6U, 6U, 6U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_caddm,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		12U, 12U, 12U,
		12U, 12U, 12U,
		12U, 12U, 12U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_csubm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubm,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_csubm,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cmulm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmulm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmulm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmulm,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cmulm,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		32U, 32U, 32U,
		32U, 32U, 32U,
		32U, 32U, 32U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cdivm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivm,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cdivm,
	uint3x3(
		8U, 8U, 8U,
		8U, 8U, 8U,
		8U, 8U, 8U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif

TEMPER_PARAMETRIC( Test_uint3x3_increment_prefix, TEMPER_FLAG_SHOULD_RUN, const uint3x3& x, const uint3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	uint3x3 xlocal = (uint3x3) x;
	uint3x3 actualAnswer = ++xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_prefix,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_prefix,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_prefix,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_prefix,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		5U, 5U, 5U,
		5U, 5U, 5U,
		5U, 5U, 5U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_increment_postfix, TEMPER_FLAG_SHOULD_RUN, const uint3x3& x, const uint3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	uint3x3 xlocal = (uint3x3) x;
	uint3x3 actualAnswer = xlocal++;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_postfix,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_postfix,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_postfix,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_increment_postfix,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		5U, 5U, 5U,
		5U, 5U, 5U,
		5U, 5U, 5U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_decrement_prefix, TEMPER_FLAG_SHOULD_RUN, const uint3x3& x, const uint3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	uint3x3 xlocal = (uint3x3) x;
	uint3x3 actualAnswer = --xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_prefix,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_prefix,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_prefix,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_prefix,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_decrement_postfix, TEMPER_FLAG_SHOULD_RUN, const uint3x3& x, const uint3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	uint3x3 xlocal = (uint3x3) x;
	uint3x3 actualAnswer = xlocal--;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_postfix,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_postfix,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_postfix,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_decrement_postfix,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif
#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
TEMPER_PARAMETRIC( Test_uint3x3_negate_prefix, TEMPER_FLAG_SHOULD_RUN, const uint3x3& x, const uint3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	uint3x3 xlocal = (uint3x3) x;
	uint3x3 actualAnswer = -xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_negate_prefix,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_negate_prefix,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		4294967295U, 4294967295U, 4294967295U,
		4294967295U, 4294967295U, 4294967295U,
		4294967295U, 4294967295U, 4294967295U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_negate_prefix,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		4294967294U, 4294967294U, 4294967294U,
		4294967294U, 4294967294U, 4294967294U,
		4294967294U, 4294967294U, 4294967294U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_negate_prefix,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	),
	uint3x3(
		4294967293U, 4294967293U, 4294967293U,
		4294967293U, 4294967293U, 4294967293U,
		4294967293U, 4294967293U, 4294967293U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_negate_prefix,
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	),
	uint3x3(
		4294967286U, 4294967286U, 4294967286U,
		4294967286U, 4294967286U, 4294967286U,
		4294967286U, 4294967286U, 4294967286U
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
TEMPER_PARAMETRIC( Test_uint3x3_not_prefix, TEMPER_FLAG_SHOULD_RUN, const uint3x3& x, const uint3x3& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	uint3x3 xlocal = (uint3x3) x;
	uint3x3 actualAnswer = ~xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_not_prefix,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		4294967294U, 4294967294U, 4294967294U,
		4294967294U, 4294967294U, 4294967294U,
		4294967294U, 4294967294U, 4294967294U
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif

TEMPER_PARAMETRIC( Test_uint3x3_cands, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs & rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cands,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	0U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cands,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	1U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cands,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	0U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cands,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cors, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs | rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cors,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	0U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cors,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	1U,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cors,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	0U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cors,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cxors, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs ^ rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxors,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	0U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxors,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	1U,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxors,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	0U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxors,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cshift_lefts, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs << rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_lefts,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	0U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_lefts,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	1U,
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_lefts,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	0U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_lefts,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cshift_rights, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint32_t& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs >> rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rights,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	0U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rights,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	1U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rights,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	0U,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rights,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	1U,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_candm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs & rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_candm,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_candm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_candm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_candm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_corm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs | rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_corm,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_corm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_corm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_corm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cxorm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs ^ rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxorm,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxorm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxorm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cxorm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cshift_leftm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs << rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_leftm,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_leftm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_leftm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_leftm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_cshift_rightm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = lhs >> rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rightm,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rightm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rightm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_cshift_rightm,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_min, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = min( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_min,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_min,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_min,
	uint3x3(
		420U, 420U, 420U,
		420U, 420U, 420U,
		420U, 420U, 420U
	),
	uint3x3(
		69U, 69U, 69U,
		69U, 69U, 69U,
		69U, 69U, 69U
	),
	uint3x3(
		69U, 69U, 69U,
		69U, 69U, 69U,
		69U, 69U, 69U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_max, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = max( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_max,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_max,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_max,
	uint3x3(
		69U, 69U, 69U,
		69U, 69U, 69U,
		69U, 69U, 69U
	),
	uint3x3(
		420U, 420U, 420U,
		420U, 420U, 420U,
		420U, 420U, 420U
	),
	uint3x3(
		420U, 420U, 420U,
		420U, 420U, 420U,
		420U, 420U, 420U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_saturate, TEMPER_FLAG_SHOULD_RUN, const uint3x3& x, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = saturate( x );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_saturate,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_saturate,
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_saturate,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_saturate,
	uint3x3(
		3U, 3U, 3U,
		3U, 3U, 3U,
		3U, 3U, 3U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_saturate,
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	),
	uint3x3(
		1U, 1U, 1U,
		1U, 1U, 1U,
		1U, 1U, 1U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_int3x2, TEMPER_FLAG_SHOULD_RUN, const int3x2& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x2,
	int3x2(
		0, 0,
		0, 0,
		0, 0
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x2,
	int3x2(
		10, 10,
		10, 10,
		10, 10
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x2,
	int3x2(
		10, 20,
		50, 60,
		90, 100
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x2,
	int3x2(
		160, 150,
		120, 110,
		80, 70
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_int3x3, TEMPER_FLAG_SHOULD_RUN, const int3x3& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x3,
	int3x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x3,
	int3x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x3,
	int3x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x3,
	int3x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_int3x4, TEMPER_FLAG_SHOULD_RUN, const int3x4& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x4,
	int3x4(
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x4,
	int3x4(
		10, 10, 10, 10,
		10, 10, 10, 10,
		10, 10, 10, 10
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x4,
	int3x4(
		10, 20, 30, 40,
		50, 60, 70, 80,
		90, 100, 110, 120
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_int3x4,
	int3x4(
		160, 150, 140, 130,
		120, 110, 100, 90,
		80, 70, 60, 50
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_uint3x2, TEMPER_FLAG_SHOULD_RUN, const uint3x2& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x2,
	uint3x2(
		0U, 0U,
		0U, 0U,
		0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x2,
	uint3x2(
		10U, 10U,
		10U, 10U,
		10U, 10U
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x2,
	uint3x2(
		10U, 20U,
		50U, 60U,
		90U, 100U
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x2,
	uint3x2(
		160U, 150U,
		120U, 110U,
		80U, 70U
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_uint3x3, TEMPER_FLAG_SHOULD_RUN, const uint3x3& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x3,
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x3,
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x3,
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x3,
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_uint3x4, TEMPER_FLAG_SHOULD_RUN, const uint3x4& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x4,
	uint3x4(
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x4,
	uint3x4(
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x4,
	uint3x4(
		10U, 20U, 30U, 40U,
		50U, 60U, 70U, 80U,
		90U, 100U, 110U, 120U
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_uint3x4,
	uint3x4(
		160U, 150U, 140U, 130U,
		120U, 110U, 100U, 90U,
		80U, 70U, 60U, 50U
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_float3x2, TEMPER_FLAG_SHOULD_RUN, const float3x2& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x2,
	float3x2(
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x2,
	float3x2(
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x2,
	float3x2(
		10.000000f, 20.000000f,
		50.000000f, 60.000000f,
		90.000000f, 100.000000f
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x2,
	float3x2(
		160.000000f, 150.000000f,
		120.000000f, 110.000000f,
		80.000000f, 70.000000f
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_float3x3, TEMPER_FLAG_SHOULD_RUN, const float3x3& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x3,
	float3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x3,
	float3x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x3,
	float3x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x3,
	float3x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_float3x4, TEMPER_FLAG_SHOULD_RUN, const float3x4& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x4,
	float3x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x4,
	float3x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x4,
	float3x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_float3x4,
	float3x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_double3x2, TEMPER_FLAG_SHOULD_RUN, const double3x2& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x2,
	double3x2(
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x2,
	double3x2(
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x2,
	double3x2(
		10.000000f, 20.000000f,
		50.000000f, 60.000000f,
		90.000000f, 100.000000f
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x2,
	double3x2(
		160.000000f, 150.000000f,
		120.000000f, 110.000000f,
		80.000000f, 70.000000f
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_double3x3, TEMPER_FLAG_SHOULD_RUN, const double3x3& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x3,
	double3x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x3,
	double3x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x3,
	double3x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x3,
	double3x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_double3x4, TEMPER_FLAG_SHOULD_RUN, const double3x4& convertFrom, const uint3x3& expectedAnswer )
{
	uint3x3 actualAnswer = uint3x3( convertFrom );

	TEMPER_CHECK_TRUE( expectedAnswer[0][0] == actualAnswer[0][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][1] == actualAnswer[0][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[0][2] == actualAnswer[0][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[1][0] == actualAnswer[1][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][1] == actualAnswer[1][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[1][2] == actualAnswer[1][2] );

	TEMPER_CHECK_TRUE( expectedAnswer[2][0] == actualAnswer[2][0] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][1] == actualAnswer[2][1] );
	TEMPER_CHECK_TRUE( expectedAnswer[2][2] == actualAnswer[2][2] );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x4,
	double3x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	uint3x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x4,
	double3x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	uint3x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x4,
	double3x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f
	),
	uint3x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_double3x4,
	double3x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f
	),
	uint3x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_identity, TEMPER_FLAG_SHOULD_RUN, const uint3x3& matrix, const bool expectedAnswer )
{
	uint3x3 identityMat;
	identity( identityMat );
	bool isMatrixIdentity = ( identityMat == matrix );
	TEMPER_CHECK_TRUE( isMatrixIdentity == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_identity,
	uint3x3(
		1U, 0U, 0U,
		0U, 1U, 0U,
		0U, 0U, 1U
	),
	true
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_identity,
	uint3x3(
		1U, 1U, 0U,
		0U, 1U, 0U,
		0U, 0U, 1U
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_identity,
	uint3x3(
		1U, 0U, 0U,
		1U, 1U, 0U,
		0U, 0U, 1U
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_identity,
	uint3x3(
		1U, 1U, 0U,
		1U, 1U, 0U,
		0U, 0U, 1U
	),
	false
);

TEMPER_PARAMETRIC( Test_uint3x3_transpose, TEMPER_FLAG_SHOULD_RUN, const uint3x3& matrix, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = transpose( matrix );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_transpose,
	uint3x3(
		1U, 0U, 0U,
		0U, 1U, 0U,
		0U, 0U, 1U
	),
	uint3x3(
		1U, 0U, 0U,
		0U, 1U, 0U,
		0U, 0U, 1U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_transpose,
	uint3x3(
		0U, 1U, 2U,
		4U, 5U, 6U,
		8U, 9U, 10U
	),
	uint3x3(
		0U, 4U, 8U,
		1U, 5U, 9U,
		2U, 6U, 10U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_mulm, TEMPER_FLAG_SHOULD_RUN, const uint3x3& lhs, const uint3x3& rhs, const uint3x3& expectedAnswer )
{
	uint3x3 actualResult = mul( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_mulm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		4U, 4U, 4U,
		4U, 4U, 4U,
		4U, 4U, 4U
	),
	uint3x3(
		24U, 24U, 24U,
		24U, 24U, 24U,
		24U, 24U, 24U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_mulm,
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	),
	uint3x3(
		1U, 0U, 0U,
		0U, 1U, 0U,
		0U, 0U, 1U
	),
	uint3x3(
		2U, 2U, 2U,
		2U, 2U, 2U,
		2U, 2U, 2U
	)
);

TEMPER_PARAMETRIC( Test_uint3x3_mulv, TEMPER_FLAG_SHOULD_RUN, const uint3& vec, const uint3x3& mat, const uint3& expectedAnswer )
{
	uint3 actualResult = mul( vec, mat );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_mulv,
	uint3( 0U, 0U, 0U ),
	uint3x3(
		1U, 0U, 0U,
		0U, 1U, 0U,
		0U, 0U, 1U
	),
	uint3(
		0U, 0U, 0U
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint3x3_mulv,
	uint3( 2U, 1U, 4U ),
	uint3x3(
		1U, 2U, 3U,
		5U, 6U, 7U,
		9U, 10U, 11U
	),
	uint3(
		43U, 50U, 57U
	)
);

