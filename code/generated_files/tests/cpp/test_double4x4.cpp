/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_double4x4_less_than, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const bool4x4& expectedAnswer )
{
	bool4x4 actualResult = lhs < rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_PARAMETRIC( Test_double4x4_less_than_equal, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const bool4x4& expectedAnswer )
{
	bool4x4 actualResult = lhs <= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than_equal,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than_equal,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than_equal,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_less_than_equal,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_PARAMETRIC( Test_double4x4_greater_than, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const bool4x4& expectedAnswer )
{
	bool4x4 actualResult = lhs > rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_PARAMETRIC( Test_double4x4_greater_than_equal, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const bool4x4& expectedAnswer )
{
	bool4x4 actualResult = lhs >= rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than_equal,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than_equal,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		false, false, false, false,
		false, false, false, false,
		false, false, false, false,
		false, false, false, false
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than_equal,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_greater_than_equal,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	bool4x4(
		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
	)
);

TEMPER_PARAMETRIC( Test_double4x4_cadds, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cadds,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	1.000000f,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cadds,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	2.000000f,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cadds,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	2.000000f,
	double4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cadds,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	4.000000f,
	double4x4(
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_csubs, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubs,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	1.000000f,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubs,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	2.000000f,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubs,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	2.000000f,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubs,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	4.000000f,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_cmuls, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmuls,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	1.000000f,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmuls,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	2.000000f,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmuls,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	2.000000f,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmuls,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	4.000000f,
	double4x4(
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_cdivs, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivs,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	1.000000f,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivs,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	2.000000f,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivs,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	2.000000f,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivs,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	4.000000f,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_caddm, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs + rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_caddm,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_caddm,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_caddm,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_caddm,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_csubm, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs - rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubm,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubm,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubm,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_csubm,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_cmulm, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs * rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmulm,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmulm,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmulm,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cmulm,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_cdivm, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lhs / rhs;
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivm,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivm,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivm,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_cdivm,
	double4x4(
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif

TEMPER_PARAMETRIC( Test_double4x4_increment_prefix, TEMPER_FLAG_SHOULD_RUN, const double4x4& x, const double4x4& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	double4x4 xlocal = (double4x4) x;
	double4x4 actualAnswer = ++xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_prefix,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_prefix,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_prefix,
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_prefix,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		5.000000f, 5.000000f, 5.000000f, 5.000000f,
		5.000000f, 5.000000f, 5.000000f, 5.000000f,
		5.000000f, 5.000000f, 5.000000f, 5.000000f,
		5.000000f, 5.000000f, 5.000000f, 5.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_increment_postfix, TEMPER_FLAG_SHOULD_RUN, const double4x4& x, const double4x4& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	double4x4 xlocal = (double4x4) x;
	double4x4 actualAnswer = xlocal++;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_postfix,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_postfix,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_postfix,
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_increment_postfix,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		5.000000f, 5.000000f, 5.000000f, 5.000000f,
		5.000000f, 5.000000f, 5.000000f, 5.000000f,
		5.000000f, 5.000000f, 5.000000f, 5.000000f,
		5.000000f, 5.000000f, 5.000000f, 5.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_decrement_prefix, TEMPER_FLAG_SHOULD_RUN, const double4x4& x, const double4x4& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	double4x4 xlocal = (double4x4) x;
	double4x4 actualAnswer = --xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_prefix,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_prefix,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_prefix,
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_prefix,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_decrement_postfix, TEMPER_FLAG_SHOULD_RUN, const double4x4& x, const double4x4& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	double4x4 xlocal = (double4x4) x;
	double4x4 actualAnswer = xlocal--;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_postfix,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_postfix,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_postfix,
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_decrement_postfix,
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif
#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
TEMPER_PARAMETRIC( Test_double4x4_negate_prefix, TEMPER_FLAG_SHOULD_RUN, const double4x4& x, const double4x4& expectedAnswer )
{
	// make local copy of x and use that because we cant do increment or decrement operations on a const reference
	// and MSVC throws warnings if we just make the parameter a non-const reference
	double4x4 xlocal = (double4x4) x;
	double4x4 actualAnswer = -xlocal;
	TEMPER_CHECK_TRUE( actualAnswer == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_negate_prefix,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		-0.000000f, -0.000000f, -0.000000f, -0.000000f,
		-0.000000f, -0.000000f, -0.000000f, -0.000000f,
		-0.000000f, -0.000000f, -0.000000f, -0.000000f,
		-0.000000f, -0.000000f, -0.000000f, -0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_negate_prefix,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		-1.000000f, -1.000000f, -1.000000f, -1.000000f,
		-1.000000f, -1.000000f, -1.000000f, -1.000000f,
		-1.000000f, -1.000000f, -1.000000f, -1.000000f,
		-1.000000f, -1.000000f, -1.000000f, -1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_negate_prefix,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		-2.000000f, -2.000000f, -2.000000f, -2.000000f,
		-2.000000f, -2.000000f, -2.000000f, -2.000000f,
		-2.000000f, -2.000000f, -2.000000f, -2.000000f,
		-2.000000f, -2.000000f, -2.000000f, -2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_negate_prefix,
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	double4x4(
		-3.000000f, -3.000000f, -3.000000f, -3.000000f,
		-3.000000f, -3.000000f, -3.000000f, -3.000000f,
		-3.000000f, -3.000000f, -3.000000f, -3.000000f,
		-3.000000f, -3.000000f, -3.000000f, -3.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_negate_prefix,
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	double4x4(
		-10.000000f, -10.000000f, -10.000000f, -10.000000f,
		-10.000000f, -10.000000f, -10.000000f, -10.000000f,
		-10.000000f, -10.000000f, -10.000000f, -10.000000f,
		-10.000000f, -10.000000f, -10.000000f, -10.000000f
	)
);

#if defined( __GNUC__ ) || defined( __clang__ )
#pragma GCC diagnostic pop
#endif

TEMPER_PARAMETRIC( Test_double4x4_min, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = min( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_min,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_min,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_min,
	double4x4(
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f
	),
	double4x4(
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f
	),
	double4x4(
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_max, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = max( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_max,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_max,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_max,
	double4x4(
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f,
		69.000000f, 69.000000f, 69.000000f, 69.000000f
	),
	double4x4(
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f
	),
	double4x4(
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f,
		420.000000f, 420.000000f, 420.000000f, 420.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_saturate, TEMPER_FLAG_SHOULD_RUN, const double4x4& x, const double4x4& expectedAnswer )
{
	double4x4 actualResult = saturate( x );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_saturate,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_saturate,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_saturate,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_saturate,
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_saturate,
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_sign, TEMPER_FLAG_SHOULD_RUN, const double4x4& x, const int4x4& expectedAnswer )
{
	int4x4 actualResult = sign( x );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_sign,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	int4x4(
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_sign,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	int4x4(
		1, 1, 1, 1,
		1, 1, 1, 1,
		1, 1, 1, 1,
		1, 1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_sign,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	int4x4(
		1, 1, 1, 1,
		1, 1, 1, 1,
		1, 1, 1, 1,
		1, 1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_sign,
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	int4x4(
		1, 1, 1, 1,
		1, 1, 1, 1,
		1, 1, 1, 1,
		1, 1, 1, 1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_sign,
	double4x4(
		-1.000000f, -1.000000f, -1.000000f, -1.000000f,
		-1.000000f, -1.000000f, -1.000000f, -1.000000f,
		-1.000000f, -1.000000f, -1.000000f, -1.000000f,
		-1.000000f, -1.000000f, -1.000000f, -1.000000f
	),
	int4x4(
		-1, -1, -1, -1,
		-1, -1, -1, -1,
		-1, -1, -1, -1,
		-1, -1, -1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_sign,
	double4x4(
		-2.000000f, -2.000000f, -2.000000f, -2.000000f,
		-2.000000f, -2.000000f, -2.000000f, -2.000000f,
		-2.000000f, -2.000000f, -2.000000f, -2.000000f,
		-2.000000f, -2.000000f, -2.000000f, -2.000000f
	),
	int4x4(
		-1, -1, -1, -1,
		-1, -1, -1, -1,
		-1, -1, -1, -1,
		-1, -1, -1, -1
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_sign,
	double4x4(
		-3.000000f, -3.000000f, -3.000000f, -3.000000f,
		-3.000000f, -3.000000f, -3.000000f, -3.000000f,
		-3.000000f, -3.000000f, -3.000000f, -3.000000f,
		-3.000000f, -3.000000f, -3.000000f, -3.000000f
	),
	int4x4(
		-1, -1, -1, -1,
		-1, -1, -1, -1,
		-1, -1, -1, -1,
		-1, -1, -1, -1
	)
);

TEMPER_PARAMETRIC( Test_double4x4_lerp, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double t, const double4x4& expectedAnswer )
{
	double4x4 actualResult = lerp( lhs, rhs, t );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_lerp,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	0.500000f,
	double4x4(
		0.500000f, 0.500000f, 0.500000f, 0.500000f,
		0.500000f, 0.500000f, 0.500000f, 0.500000f,
		0.500000f, 0.500000f, 0.500000f, 0.500000f,
		0.500000f, 0.500000f, 0.500000f, 0.500000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_lerp,
	double4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	),
	double4x4(
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	),
	0.500000f,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_int4x2, TEMPER_FLAG_SHOULD_RUN, const int4x2& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x2,
	int4x2(
		0, 0,
		0, 0,
		0, 0,
		0, 0
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x2,
	int4x2(
		10, 10,
		10, 10,
		10, 10,
		10, 10
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x2,
	int4x2(
		10, 20,
		50, 60,
		90, 100,
		130, 140
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x2,
	int4x2(
		160, 150,
		120, 110,
		80, 70,
		40, 30
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_int4x3, TEMPER_FLAG_SHOULD_RUN, const int4x3& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x3,
	int4x3(
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x3,
	int4x3(
		10, 10, 10,
		10, 10, 10,
		10, 10, 10,
		10, 10, 10
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x3,
	int4x3(
		10, 20, 30,
		50, 60, 70,
		90, 100, 110,
		130, 140, 150
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x3,
	int4x3(
		160, 150, 140,
		120, 110, 100,
		80, 70, 60,
		40, 30, 20
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_int4x4, TEMPER_FLAG_SHOULD_RUN, const int4x4& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][3], actualAnswer[0][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][3], actualAnswer[1][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][3], actualAnswer[2][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][3], actualAnswer[3][3] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x4,
	int4x4(
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x4,
	int4x4(
		10, 10, 10, 10,
		10, 10, 10, 10,
		10, 10, 10, 10,
		10, 10, 10, 10
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x4,
	int4x4(
		10, 20, 30, 40,
		50, 60, 70, 80,
		90, 100, 110, 120,
		130, 140, 150, 160
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_int4x4,
	int4x4(
		160, 150, 140, 130,
		120, 110, 100, 90,
		80, 70, 60, 50,
		40, 30, 20, 10
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_uint4x2, TEMPER_FLAG_SHOULD_RUN, const uint4x2& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x2,
	uint4x2(
		0U, 0U,
		0U, 0U,
		0U, 0U,
		0U, 0U
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x2,
	uint4x2(
		10U, 10U,
		10U, 10U,
		10U, 10U,
		10U, 10U
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x2,
	uint4x2(
		10U, 20U,
		50U, 60U,
		90U, 100U,
		130U, 140U
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x2,
	uint4x2(
		160U, 150U,
		120U, 110U,
		80U, 70U,
		40U, 30U
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_uint4x3, TEMPER_FLAG_SHOULD_RUN, const uint4x3& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x3,
	uint4x3(
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U,
		0U, 0U, 0U
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x3,
	uint4x3(
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U,
		10U, 10U, 10U
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x3,
	uint4x3(
		10U, 20U, 30U,
		50U, 60U, 70U,
		90U, 100U, 110U,
		130U, 140U, 150U
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x3,
	uint4x3(
		160U, 150U, 140U,
		120U, 110U, 100U,
		80U, 70U, 60U,
		40U, 30U, 20U
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_uint4x4, TEMPER_FLAG_SHOULD_RUN, const uint4x4& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][3], actualAnswer[0][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][3], actualAnswer[1][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][3], actualAnswer[2][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][3], actualAnswer[3][3] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x4,
	uint4x4(
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U,
		0U, 0U, 0U, 0U
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x4,
	uint4x4(
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U,
		10U, 10U, 10U, 10U
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x4,
	uint4x4(
		10U, 20U, 30U, 40U,
		50U, 60U, 70U, 80U,
		90U, 100U, 110U, 120U,
		130U, 140U, 150U, 160U
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_uint4x4,
	uint4x4(
		160U, 150U, 140U, 130U,
		120U, 110U, 100U, 90U,
		80U, 70U, 60U, 50U,
		40U, 30U, 20U, 10U
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_float4x2, TEMPER_FLAG_SHOULD_RUN, const float4x2& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x2,
	float4x2(
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x2,
	float4x2(
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x2,
	float4x2(
		10.000000f, 20.000000f,
		50.000000f, 60.000000f,
		90.000000f, 100.000000f,
		130.000000f, 140.000000f
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x2,
	float4x2(
		160.000000f, 150.000000f,
		120.000000f, 110.000000f,
		80.000000f, 70.000000f,
		40.000000f, 30.000000f
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_float4x3, TEMPER_FLAG_SHOULD_RUN, const float4x3& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x3,
	float4x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x3,
	float4x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x3,
	float4x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f,
		130.000000f, 140.000000f, 150.000000f
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x3,
	float4x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f,
		40.000000f, 30.000000f, 20.000000f
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_float4x4, TEMPER_FLAG_SHOULD_RUN, const float4x4& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][3], actualAnswer[0][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][3], actualAnswer[1][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][3], actualAnswer[2][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][3], actualAnswer[3][3] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x4,
	float4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x4,
	float4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x4,
	float4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_float4x4,
	float4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_double4x2, TEMPER_FLAG_SHOULD_RUN, const double4x2& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x2,
	double4x2(
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f,
		0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x2,
	double4x2(
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f,
		10.000000f, 10.000000f
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x2,
	double4x2(
		10.000000f, 20.000000f,
		50.000000f, 60.000000f,
		90.000000f, 100.000000f,
		130.000000f, 140.000000f
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x2,
	double4x2(
		160.000000f, 150.000000f,
		120.000000f, 110.000000f,
		80.000000f, 70.000000f,
		40.000000f, 30.000000f
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_double4x3, TEMPER_FLAG_SHOULD_RUN, const double4x3& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x3,
	double4x3(
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x3,
	double4x3(
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x3,
	double4x3(
		10.000000f, 20.000000f, 30.000000f,
		50.000000f, 60.000000f, 70.000000f,
		90.000000f, 100.000000f, 110.000000f,
		130.000000f, 140.000000f, 150.000000f
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x3,
	double4x3(
		160.000000f, 150.000000f, 140.000000f,
		120.000000f, 110.000000f, 100.000000f,
		80.000000f, 70.000000f, 60.000000f,
		40.000000f, 30.000000f, 20.000000f
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_double4x4, TEMPER_FLAG_SHOULD_RUN, const double4x4& convertFrom, const double4x4& expectedAnswer )
{
	double4x4 actualAnswer = double4x4( convertFrom );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][0], actualAnswer[0][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][1], actualAnswer[0][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][2], actualAnswer[0][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[0][3], actualAnswer[0][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][0], actualAnswer[1][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][1], actualAnswer[1][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][2], actualAnswer[1][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[1][3], actualAnswer[1][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][0], actualAnswer[2][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][1], actualAnswer[2][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][2], actualAnswer[2][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[2][3], actualAnswer[2][3] ) );

	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][0], actualAnswer[3][0] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][1], actualAnswer[3][1] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][2], actualAnswer[3][2] ) );
	TEMPER_CHECK_TRUE( doubleeq( expectedAnswer[3][3], actualAnswer[3][3] ) );

}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x4,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x4,
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	),
	double4x4(
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f,
		10.000000f, 10.000000f, 10.000000f, 10.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x4,
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	),
	double4x4(
		10.000000f, 20.000000f, 30.000000f, 40.000000f,
		50.000000f, 60.000000f, 70.000000f, 80.000000f,
		90.000000f, 100.000000f, 110.000000f, 120.000000f,
		130.000000f, 140.000000f, 150.000000f, 160.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_double4x4,
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	),
	double4x4(
		160.000000f, 150.000000f, 140.000000f, 130.000000f,
		120.000000f, 110.000000f, 100.000000f, 90.000000f,
		80.000000f, 70.000000f, 60.000000f, 50.000000f,
		40.000000f, 30.000000f, 20.000000f, 10.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_identity, TEMPER_FLAG_SHOULD_RUN, const double4x4& matrix, const bool expectedAnswer )
{
	double4x4 identityMat;
	identity( identityMat );
	bool isMatrixIdentity = ( identityMat == matrix );
	TEMPER_CHECK_TRUE( isMatrixIdentity == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_identity,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	true
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_identity,
	double4x4(
		1.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_identity,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		1.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	false
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_identity,
	double4x4(
		1.000000f, 1.000000f, 0.000000f, 0.000000f,
		1.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	false
);

TEMPER_PARAMETRIC( Test_double4x4_transpose, TEMPER_FLAG_SHOULD_RUN, const double4x4& matrix, const double4x4& expectedAnswer )
{
	double4x4 actualResult = transpose( matrix );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_transpose,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_transpose,
	double4x4(
		0.000000f, 1.000000f, 2.000000f, 3.000000f,
		4.000000f, 5.000000f, 6.000000f, 7.000000f,
		8.000000f, 9.000000f, 10.000000f, 11.000000f,
		12.000000f, 13.000000f, 14.000000f, 15.000000f
	),
	double4x4(
		0.000000f, 4.000000f, 8.000000f, 12.000000f,
		1.000000f, 5.000000f, 9.000000f, 13.000000f,
		2.000000f, 6.000000f, 10.000000f, 14.000000f,
		3.000000f, 7.000000f, 11.000000f, 15.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_mulm, TEMPER_FLAG_SHOULD_RUN, const double4x4& lhs, const double4x4& rhs, const double4x4& expectedAnswer )
{
	double4x4 actualResult = mul( lhs, rhs );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_mulm,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
	),
	double4x4(
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f,
		32.000000f, 32.000000f, 32.000000f, 32.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_mulm,
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double4x4(
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_mulv, TEMPER_FLAG_SHOULD_RUN, const double4& vec, const double4x4& mat, const double4& expectedAnswer )
{
	double4 actualResult = mul( vec, mat );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_mulv,
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f ),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_mulv,
	double4( 2.000000f, 1.000000f, 4.000000f, 3.000000f ),
	double4x4(
		1.000000f, 2.000000f, 3.000000f, 4.000000f,
		5.000000f, 6.000000f, 7.000000f, 8.000000f,
		9.000000f, 10.000000f, 11.000000f, 12.000000f,
		13.000000f, 14.000000f, 15.000000f, 16.000000f
	),
	double4(
		82.000000f, 92.000000f, 102.000000f, 112.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_determinant, TEMPER_FLAG_SHOULD_RUN, const double4x4& matrix, const double expectedAnswer )
{
	double actualResult = determinant( matrix );
	TEMPER_CHECK_TRUE( doubleeq( actualResult, expectedAnswer ) );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_determinant,
	double4x4(
		6.000000f, 2.000000f, 3.000000f, 4.000000f,
		2.000000f, 7.000000f, 5.000000f, 3.000000f,
		3.000000f, 5.000000f, 7.000000f, 2.000000f,
		4.000000f, 3.000000f, 2.000000f, 6.000000f
	),
	285.000000f
);

TEMPER_PARAMETRIC( Test_double4x4_inverse, TEMPER_FLAG_SHOULD_RUN, const double4x4& mat, const double4x4& expectedAnswer )
{
	double4x4 inversed = inverse( mat );
	TEMPER_CHECK_TRUE( inversed == expectedAnswer );

	// test inversed matrix multiplied by the original equals identity
	double4x4 identityMat;
	identity( identityMat );

	double4x4 matMultipliedByItsInverse = mul( mat, inversed );
	TEMPER_CHECK_TRUE( matMultipliedByItsInverse == identityMat );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_inverse,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 3.000000f,
		0.000000f, 1.000000f, 0.000000f, 2.000000f,
		0.000000f, 0.000000f, 1.000000f, 1.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, -3.000000f,
		0.000000f, 1.000000f, 0.000000f, -2.000000f,
		0.000000f, 0.000000f, 1.000000f, -1.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_inverse,
	double4x4(
		6.000000f, 2.000000f, 3.000000f, 4.000000f,
		2.000000f, 7.000000f, 5.000000f, 3.000000f,
		3.000000f, 5.000000f, 7.000000f, 2.000000f,
		4.000000f, 3.000000f, 2.000000f, 6.000000f
	),
	double4x4(
		0.396491f, 0.140351f, -0.192982f, -0.270175f,
		0.140351f, 0.385965f, -0.280702f, -0.192982f,
		-0.192982f, -0.280702f, 0.385965f, 0.140351f,
		-0.270175f, -0.192982f, 0.140351f, 0.396491f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_translate, TEMPER_FLAG_SHOULD_RUN, const double4x4& startMatrix, const double3& translateVec, const double4x4& expectedAnswer )
{
	double4x4 actualResult = translate( startMatrix, translateVec );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_translate,
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	),
	double3( 1.000000f, 0.000000f, 0.000000f ),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_translate,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 3.000000f,
		0.000000f, 1.000000f, 0.000000f, 2.000000f,
		0.000000f, 0.000000f, 1.000000f, 1.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_translate,
	double4x4(
		0.000000f, 1.000000f, 2.000000f, 3.000000f,
		4.000000f, 5.000000f, 6.000000f, 7.000000f,
		8.000000f, 9.000000f, 10.000000f, 11.000000f,
		12.000000f, 13.000000f, 14.000000f, 15.000000f
	),
	double3( 10.000000f, 20.000000f, 30.000000f ),
	double4x4(
		0.000000f, 1.000000f, 2.000000f, 13.000000f,
		4.000000f, 5.000000f, 6.000000f, 27.000000f,
		8.000000f, 9.000000f, 10.000000f, 41.000000f,
		12.000000f, 13.000000f, 14.000000f, 15.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_rotate, TEMPER_FLAG_SHOULD_RUN, const double4x4& startMatrix, const double rotationDegrees, const double3& axisAngle, const double4x4& expectedAnswer )
{
	double4x4 actualResult = rotate( startMatrix, rotationDegrees, axisAngle );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_rotate,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	0.785398f,
	double3( 1.000000f, 0.000000f, 0.000000f ),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.707107f, -0.707107f, 0.000000f,
		0.000000f, 0.707107f, 0.707107f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_rotate,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	0.785398f,
	double3( 0.000000f, 1.000000f, 0.000000f ),
	double4x4(
		0.707107f, 0.000000f, 0.707107f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.707107f, 0.000000f, 0.707107f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_rotate,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	0.785398f,
	double3( 0.000000f, 0.000000f, 1.000000f ),
	double4x4(
		0.707107f, -0.707107f, 0.000000f, 0.000000f,
		0.707107f, 0.707107f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_scale, TEMPER_FLAG_SHOULD_RUN, const double4x4& startMatrix, const double3& scaleVec, const double4x4& expectedAnswer )
{
	double4x4 actualResult = scale( startMatrix, scaleVec );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_scale,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_scale,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double3( 1.000000f, 1.000000f, 1.000000f ),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_scale,
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	),
	double3( 2.000000f, 2.000000f, 2.000000f ),
	double4x4(
		2.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 2.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 2.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_scale,
	double4x4(
		1.000000f, 2.000000f, 3.000000f, 4.000000f,
		5.000000f, 6.000000f, 7.000000f, 8.000000f,
		9.000000f, 10.000000f, 11.000000f, 12.000000f,
		13.000000f, 14.000000f, 15.000000f, 16.000000f
	),
	double3( 1.000000f, 2.000000f, 3.000000f ),
	double4x4(
		1.000000f, 2.000000f, 3.000000f, 4.000000f,
		5.000000f, 12.000000f, 7.000000f, 8.000000f,
		9.000000f, 10.000000f, 33.000000f, 12.000000f,
		13.000000f, 14.000000f, 15.000000f, 16.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_ortho_lh_zo, TEMPER_FLAG_SHOULD_RUN, const double left, const double right, const double top, const double bottom, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = ortho_lh_zo( left, right, top, bottom, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_ortho_lh_zo,
	-8.888889f,
	8.888889f,
	-5.000000f,
	5.000000f,
	-1.000000f,
	100.000000f,
	double4x4(
		0.112500f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.009901f, 0.009901f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_ortho_lh_no, TEMPER_FLAG_SHOULD_RUN, const double left, const double right, const double top, const double bottom, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = ortho_lh_no( left, right, top, bottom, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_ortho_lh_no,
	-8.888889f,
	8.888889f,
	-5.000000f,
	5.000000f,
	-1.000000f,
	100.000000f,
	double4x4(
		0.112500f, 0.000000f, 0.000000f, -0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.019802f, -0.980198f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_ortho_rh_zo, TEMPER_FLAG_SHOULD_RUN, const double left, const double right, const double top, const double bottom, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = ortho_rh_zo( left, right, top, bottom, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_ortho_rh_zo,
	-8.888889f,
	8.888889f,
	-5.000000f,
	5.000000f,
	-1.000000f,
	100.000000f,
	double4x4(
		0.112500f, 0.000000f, 0.000000f, -0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.009901f, 0.009901f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_ortho_rh_no, TEMPER_FLAG_SHOULD_RUN, const double left, const double right, const double top, const double bottom, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = ortho_rh_no( left, right, top, bottom, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_ortho_rh_no,
	-8.888889f,
	8.888889f,
	-5.000000f,
	5.000000f,
	-1.000000f,
	100.000000f,
	double4x4(
		0.112500f, 0.000000f, 0.000000f, -0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.019802f, -0.980198f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_perspective_lh_zo, TEMPER_FLAG_SHOULD_RUN, const double fov, const double aspect, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = perspective_lh_zo( fov, aspect, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_perspective_lh_zo,
	90.000000f,
	1.777778f,
	0.100000f,
	100.000000f,
	double4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.001001f, -0.100100f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_perspective_lh_no, TEMPER_FLAG_SHOULD_RUN, const double fov, const double aspect, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = perspective_lh_no( fov, aspect, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_perspective_lh_no,
	90.000000f,
	1.777778f,
	0.100000f,
	100.000000f,
	double4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.002002f, -0.200200f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_perspective_rh_zo, TEMPER_FLAG_SHOULD_RUN, const double fov, const double aspect, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = perspective_rh_zo( fov, aspect, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_perspective_rh_zo,
	90.000000f,
	1.777778f,
	0.100000f,
	100.000000f,
	double4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.001001f, -0.100100f,
		0.000000f, 0.000000f, -1.000000f, 0.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_perspective_rh_no, TEMPER_FLAG_SHOULD_RUN, const double fov, const double aspect, const double znear, const double zfar, const double4x4& expectedAnswer )
{
	double4x4 actualResult = perspective_rh_no( fov, aspect, znear, zfar );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_perspective_rh_no,
	90.000000f,
	1.777778f,
	0.100000f,
	100.000000f,
	double4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.002002f, -0.200200f,
		0.000000f, 0.000000f, -1.000000f, 0.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_look_at_lh, TEMPER_FLAG_SHOULD_RUN, const double3& eye, const double3& target, const double3& up, const double4x4& expectedAnswer )
{
	double4x4 actualResult = look_at_lh( eye, target, up );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_look_at_lh,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 1.000000f ),
	double3( 0.000000f, 1.000000f, 0.000000f ),
	double4x4(
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

TEMPER_PARAMETRIC( Test_double4x4_look_at_rh, TEMPER_FLAG_SHOULD_RUN, const double3& eye, const double3& target, const double3& up, const double4x4& expectedAnswer )
{
	double4x4 actualResult = look_at_rh( eye, target, up );
	TEMPER_CHECK_TRUE( actualResult == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double4x4_look_at_rh,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 1.000000f ),
	double3( 0.000000f, 1.000000f, 0.000000f ),
	double4x4(
		-1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	)
);

