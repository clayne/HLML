/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.rr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rr,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rr,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rr,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rr,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rr,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rr,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.gr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gr,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gr,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gr,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gr,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gr,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gr,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_br, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.br;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_br,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_br,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_br,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_br,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_br,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_br,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.ar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ar,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ar,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ar,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ar,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ar,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ar,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.rg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rg,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rg,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rg,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rg,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rg,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rg,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.gg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gg,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gg,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gg,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gg,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gg,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gg,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.bg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bg,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bg,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bg,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bg,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bg,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bg,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.ag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ag,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ag,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ag,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ag,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ag,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ag,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.rb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rb,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rb,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rb,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rb,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rb,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rb,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.gb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gb,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gb,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gb,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gb,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gb,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gb,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.bb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bb,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bb,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bb,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bb,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bb,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bb,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.ab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ab,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ab,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ab,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ab,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ab,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ab,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.ra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ra,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ra,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ra,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ra,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ra,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ra,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.ga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ga,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ga,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ga,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ga,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ga,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ga,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.ba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ba,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ba,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ba,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ba,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ba,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ba,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint2& expectedAnswer )
{
	uint2 vecSwizzled = vec.aa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aa,
	uint4( 0U, 0U, 0U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aa,
	uint4( 0U, 1U, 2U, 3U ),
	uint2( 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aa,
	uint4( 3U, 2U, 1U, 0U ),
	uint2( 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aa,
	uint4( 10U, 10U, 20U, 20U ),
	uint2( 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aa,
	uint4( 20U, 20U, 10U, 10U ),
	uint2( 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aa,
	uint4( 0U, 100U, 666U, 616U ),
	uint2( 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.grr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.brr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.arr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.ggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.agr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.abr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abr,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abr,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abr,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abr,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abr,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abr,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rar,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rar,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rar,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rar,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rar,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rar,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gar,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gar,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gar,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gar,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gar,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gar,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bar,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bar,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bar,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bar,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bar,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bar,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.aar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aar,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aar,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aar,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aar,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aar,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aar,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.grg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.brg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.arg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.ggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.agg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.abg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abg,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abg,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abg,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abg,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abg,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abg,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rag,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rag,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rag,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rag,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rag,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rag,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gag,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gag,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gag,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gag,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gag,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gag,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bag,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bag,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bag,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bag,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bag,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bag,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.aag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aag,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aag,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aag,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aag,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aag,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aag,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.grb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.brb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.arb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.ggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.agb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.abb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abb,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abb,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abb,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abb,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abb,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abb,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rab,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rab,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rab,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rab,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rab,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rab,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gab,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gab,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gab,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gab,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gab,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gab,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bab,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bab,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bab,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bab,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bab,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bab,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.aab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aab,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aab,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aab,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aab,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aab,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aab,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rra,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rra,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rra,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rra,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rra,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rra,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gra,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gra,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gra,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gra,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gra,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gra,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bra,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bra,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bra,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bra,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bra,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bra,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ara, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.ara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ara,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ara,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ara,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ara,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ara,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ara,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rga,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rga,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rga,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rga,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rga,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rga,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gga,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gga,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gga,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gga,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gga,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gga,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bga,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bga,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bga,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bga,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bga,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bga,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.aga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aga,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aga,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aga,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aga,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aga,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aga,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.rba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rba,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rba,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rba,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rba,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rba,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rba,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gba,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gba,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gba,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gba,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gba,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gba,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.bba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bba,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bba,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bba,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bba,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bba,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bba,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.aba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aba,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aba,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aba,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aba,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aba,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aba,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_raa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.raa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raa,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raa,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raa,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raa,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raa,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raa,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 0U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.gaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 100U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_baa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.baa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baa,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baa,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baa,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baa,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baa,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baa,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 666U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint3& expectedAnswer )
{
	uint3 vecSwizzled = vec.aaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint3( 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint3( 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint3( 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint3( 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint3( 616U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abrr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rarr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rarr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_garr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.garr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_barr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.barr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aarr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aarr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 0U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_argr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.argr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rggr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gggr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bggr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aggr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abgr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ragr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ragr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gagr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gagr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bagr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bagr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aagr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aagr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 100U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abbr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rabr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rabr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gabr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gabr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_babr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.babr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aabr, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aabr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabr,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabr,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabr,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabr,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabr,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabr,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 666U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_raar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.raar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gaar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gaar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_baar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.baar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aaar, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aaar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaar,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaar,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaar,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaar,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaar,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaar,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 616U, 0U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abrg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rarg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rarg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_garg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.garg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_barg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.barg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aarg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aarg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 0U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_argg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.argg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rggg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gggg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bggg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aggg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abgg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ragg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ragg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gagg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gagg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bagg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bagg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aagg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aagg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 100U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abbg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rabg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rabg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gabg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gabg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_babg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.babg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aabg, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aabg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabg,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabg,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabg,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabg,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabg,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabg,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 666U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_raag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.raag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gaag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gaag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_baag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.baag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aaag, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aaag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaag,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaag,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaag,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaag,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaag,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaag,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 616U, 100U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abrb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abrb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rarb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rarb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rarb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_garb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.garb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_garb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_barb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.barb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_barb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aarb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aarb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 0U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 3U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aarb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 0U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_argb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.argb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_argb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rggb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rggb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gggb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gggb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bggb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bggb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aggb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aggb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abgb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abgb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ragb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ragb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ragb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gagb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gagb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gagb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bagb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bagb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bagb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aagb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aagb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 1U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 2U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aagb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 100U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abbb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abbb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rabb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rabb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rabb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gabb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gabb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gabb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_babb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.babb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_babb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aabb, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aabb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabb,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabb,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 2U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabb,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 1U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabb,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabb,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aabb,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 666U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_raab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.raab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gaab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gaab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_baab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.baab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aaab, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aaab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaab,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaab,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 3U, 2U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaab,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 0U, 1U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaab,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaab,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaab,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 616U, 666U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abra, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abra,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abra,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abra,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abra,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abra,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abra,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rara, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rara,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rara,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rara,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rara,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rara,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rara,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gara, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gara,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gara,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gara,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gara,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gara,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gara,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bara, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bara,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bara,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bara,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bara,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bara,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bara,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aara, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aara,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aara,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 0U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aara,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 3U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aara,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aara,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aara,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 0U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_raga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.raga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gaga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gaga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_baga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.baga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aaga, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aaga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaga,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaga,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 1U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaga,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 2U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaga,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 10U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaga,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 20U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaga,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 100U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rrba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rrba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rrba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_grba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.grba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_grba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_brba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.brba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_brba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_arba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.arba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_arba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_raba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.raba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gaba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gaba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_baba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.baba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aaba, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aaba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaba,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaba,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 2U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaba,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 1U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaba,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaba,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaba,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 666U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rraa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rraa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rraa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rraa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rraa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rraa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rraa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rraa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 0U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_graa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.graa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_graa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_graa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_graa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_graa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_graa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_graa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 0U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_braa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.braa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_braa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_braa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_braa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_braa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_braa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_braa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 0U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_araa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.araa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_araa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_araa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 0U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_araa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 3U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_araa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_araa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_araa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 0U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rgaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rgaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rgaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 100U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_ggaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.ggaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_ggaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 100U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bgaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bgaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bgaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 100U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_agaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.agaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 1U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 2U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 10U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 20U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_agaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 100U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_rbaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.rbaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_rbaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 666U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gbaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gbaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gbaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 666U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_bbaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.bbaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_bbaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 666U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_abaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.abaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 2U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 1U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_abaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 666U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_raaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.raaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 0U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 3U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_raaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 0U, 616U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_gaaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.gaaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 1U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 2U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 10U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 20U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_gaaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 100U, 616U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_baaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.baaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 2U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 1U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_baaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 666U, 616U, 616U, 616U )
);

TEMPER_PARAMETRIC( Test_uint4_Swizzle_aaaa, TEMPER_FLAG_SHOULD_RUN, const uint4& vec, const uint4& expectedAnswer )
{
	uint4 vecSwizzled = vec.aaaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaaa,
	uint4( 0U, 0U, 0U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaaa,
	uint4( 0U, 1U, 2U, 3U ),
	uint4( 3U, 3U, 3U, 3U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaaa,
	uint4( 3U, 2U, 1U, 0U ),
	uint4( 0U, 0U, 0U, 0U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaaa,
	uint4( 10U, 10U, 20U, 20U ),
	uint4( 20U, 20U, 20U, 20U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaaa,
	uint4( 20U, 20U, 10U, 10U ),
	uint4( 10U, 10U, 10U, 10U )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_uint4_Swizzle_aaaa,
	uint4( 0U, 100U, 666U, 616U ),
	uint4( 616U, 616U, 616U, 616U )
);

