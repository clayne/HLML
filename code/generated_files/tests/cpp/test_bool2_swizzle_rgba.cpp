/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool2& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool2 vecSwizzled = vecCopy.rr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rr,
	bool2( false, false ),
	bool2( false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rr,
	bool2( false, true ),
	bool2( false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_gr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool2& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool2 vecSwizzled = vecCopy.gr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		bool32_t old_g = vecCopy.g;
		bool32_t old_r = vecCopy.r;

		vecCopy.gr = vecCopy.rg;

		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gr,
	bool2( false, false ),
	bool2( false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gr,
	bool2( false, true ),
	bool2( true, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gr,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool2& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool2 vecSwizzled = vecCopy.rg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		bool32_t old_r = vecCopy.r;
		bool32_t old_g = vecCopy.g;

		vecCopy.rg = vecCopy.gr;

		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rg,
	bool2( false, false ),
	bool2( false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rg,
	bool2( false, true ),
	bool2( false, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_gg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool2& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool2 vecSwizzled = vecCopy.gg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gg,
	bool2( false, false ),
	bool2( false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gg,
	bool2( false, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gg,
	bool2( true, true ),
	bool2( true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rrr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.rrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrr,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrr,
	bool2( false, true ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_grr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.grr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grr,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grr,
	bool2( false, true ),
	bool3( true, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rgr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.rgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgr,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgr,
	bool2( false, true ),
	bool3( false, true, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_ggr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.ggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggr,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggr,
	bool2( false, true ),
	bool3( true, true, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggr,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rrg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.rrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrg,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrg,
	bool2( false, true ),
	bool3( false, false, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_grg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.grg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grg,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grg,
	bool2( false, true ),
	bool3( true, false, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rgg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.rgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgg,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgg,
	bool2( false, true ),
	bool3( false, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_ggg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool3& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool3 vecSwizzled = vecCopy.ggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggg,
	bool2( false, false ),
	bool3( false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggg,
	bool2( false, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggg,
	bool2( true, true ),
	bool3( true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rrrr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rrrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrr,
	bool2( false, true ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_grrr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.grrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrr,
	bool2( false, true ),
	bool4( true, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rgrr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrr,
	bool2( false, true ),
	bool4( false, true, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_ggrr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.ggrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrr,
	bool2( false, true ),
	bool4( true, true, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rrgr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rrgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgr,
	bool2( false, true ),
	bool4( false, false, true, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_grgr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.grgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgr,
	bool2( false, true ),
	bool4( true, false, true, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rggr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggr,
	bool2( false, true ),
	bool4( false, true, true, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_gggr, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.gggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggr,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggr,
	bool2( false, true ),
	bool4( true, true, true, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggr,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rrrg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rrrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrg,
	bool2( false, true ),
	bool4( false, false, false, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_grrg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.grrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrg,
	bool2( false, true ),
	bool4( true, false, false, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rgrg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrg,
	bool2( false, true ),
	bool4( false, true, false, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rgrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_ggrg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.ggrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrg,
	bool2( false, true ),
	bool4( true, true, false, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_ggrg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rrgg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rrgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgg,
	bool2( false, true ),
	bool4( false, false, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rrgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_grgg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.grgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgg,
	bool2( false, true ),
	bool4( true, false, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_grgg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_rggg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.rggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggg,
	bool2( false, true ),
	bool4( false, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_rggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_TEST_PARAMETRIC( Test_bool2_Swizzle_gggg, TEMPER_FLAG_SHOULD_RUN, const bool2& vec, const bool4& expectedAnswer )
{
	bool2 vecCopy = vec;

	bool4 vecSwizzled = vecCopy.gggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggg,
	bool2( false, false ),
	bool4( false, false, false, false )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggg,
	bool2( false, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_bool2_Swizzle_gggg,
	bool2( true, true ),
	bool4( true, true, true, true )
);

