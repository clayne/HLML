/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_int4_Swizzle_rr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.rr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rr,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rr,
	int4( 0, 1, 2, 3 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rr,
	int4( 3, 2, 1, 0 ),
	int2( 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rr,
	int4( 10, 20, 30, 40 ),
	int2( 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rr,
	int4( 40, 30, 20, 10 ),
	int2( 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rr,
	int4( 69, 420, 666, 616 ),
	int2( 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.gr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;

		vecCopy.gr = vecCopy.rg;

		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gr,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gr,
	int4( 0, 1, 2, 3 ),
	int2( 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gr,
	int4( 3, 2, 1, 0 ),
	int2( 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gr,
	int4( 10, 20, 30, 40 ),
	int2( 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gr,
	int4( 40, 30, 20, 10 ),
	int2( 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gr,
	int4( 69, 420, 666, 616 ),
	int2( 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_br, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.br;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;

		vecCopy.br = vecCopy.rb;

		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_br,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_br,
	int4( 0, 1, 2, 3 ),
	int2( 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_br,
	int4( 3, 2, 1, 0 ),
	int2( 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_br,
	int4( 10, 20, 30, 40 ),
	int2( 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_br,
	int4( 40, 30, 20, 10 ),
	int2( 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_br,
	int4( 69, 420, 666, 616 ),
	int2( 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.ar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;

		vecCopy.ar = vecCopy.ra;

		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ar,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ar,
	int4( 0, 1, 2, 3 ),
	int2( 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ar,
	int4( 3, 2, 1, 0 ),
	int2( 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ar,
	int4( 10, 20, 30, 40 ),
	int2( 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ar,
	int4( 40, 30, 20, 10 ),
	int2( 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ar,
	int4( 69, 420, 666, 616 ),
	int2( 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.rg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;

		vecCopy.rg = vecCopy.gr;

		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rg,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rg,
	int4( 0, 1, 2, 3 ),
	int2( 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rg,
	int4( 3, 2, 1, 0 ),
	int2( 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rg,
	int4( 10, 20, 30, 40 ),
	int2( 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rg,
	int4( 40, 30, 20, 10 ),
	int2( 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rg,
	int4( 69, 420, 666, 616 ),
	int2( 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.gg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gg,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gg,
	int4( 0, 1, 2, 3 ),
	int2( 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gg,
	int4( 3, 2, 1, 0 ),
	int2( 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gg,
	int4( 10, 20, 30, 40 ),
	int2( 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gg,
	int4( 40, 30, 20, 10 ),
	int2( 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gg,
	int4( 69, 420, 666, 616 ),
	int2( 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.bg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;

		vecCopy.bg = vecCopy.gb;

		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bg,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bg,
	int4( 0, 1, 2, 3 ),
	int2( 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bg,
	int4( 3, 2, 1, 0 ),
	int2( 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bg,
	int4( 10, 20, 30, 40 ),
	int2( 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bg,
	int4( 40, 30, 20, 10 ),
	int2( 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bg,
	int4( 69, 420, 666, 616 ),
	int2( 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.ag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;

		vecCopy.ag = vecCopy.ga;

		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ag,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ag,
	int4( 0, 1, 2, 3 ),
	int2( 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ag,
	int4( 3, 2, 1, 0 ),
	int2( 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ag,
	int4( 10, 20, 30, 40 ),
	int2( 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ag,
	int4( 40, 30, 20, 10 ),
	int2( 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ag,
	int4( 69, 420, 666, 616 ),
	int2( 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.rb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;

		vecCopy.rb = vecCopy.br;

		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rb,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rb,
	int4( 0, 1, 2, 3 ),
	int2( 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rb,
	int4( 3, 2, 1, 0 ),
	int2( 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rb,
	int4( 10, 20, 30, 40 ),
	int2( 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rb,
	int4( 40, 30, 20, 10 ),
	int2( 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rb,
	int4( 69, 420, 666, 616 ),
	int2( 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.gb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;

		vecCopy.gb = vecCopy.bg;

		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gb,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gb,
	int4( 0, 1, 2, 3 ),
	int2( 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gb,
	int4( 3, 2, 1, 0 ),
	int2( 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gb,
	int4( 10, 20, 30, 40 ),
	int2( 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gb,
	int4( 40, 30, 20, 10 ),
	int2( 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gb,
	int4( 69, 420, 666, 616 ),
	int2( 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.bb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bb,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bb,
	int4( 0, 1, 2, 3 ),
	int2( 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bb,
	int4( 3, 2, 1, 0 ),
	int2( 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bb,
	int4( 10, 20, 30, 40 ),
	int2( 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bb,
	int4( 40, 30, 20, 10 ),
	int2( 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bb,
	int4( 69, 420, 666, 616 ),
	int2( 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.ab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;

		vecCopy.ab = vecCopy.ba;

		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ab,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ab,
	int4( 0, 1, 2, 3 ),
	int2( 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ab,
	int4( 3, 2, 1, 0 ),
	int2( 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ab,
	int4( 10, 20, 30, 40 ),
	int2( 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ab,
	int4( 40, 30, 20, 10 ),
	int2( 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ab,
	int4( 69, 420, 666, 616 ),
	int2( 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.ra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;

		vecCopy.ra = vecCopy.ar;

		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ra,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ra,
	int4( 0, 1, 2, 3 ),
	int2( 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ra,
	int4( 3, 2, 1, 0 ),
	int2( 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ra,
	int4( 10, 20, 30, 40 ),
	int2( 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ra,
	int4( 40, 30, 20, 10 ),
	int2( 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ra,
	int4( 69, 420, 666, 616 ),
	int2( 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.ga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;

		vecCopy.ga = vecCopy.ag;

		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ga,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ga,
	int4( 0, 1, 2, 3 ),
	int2( 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ga,
	int4( 3, 2, 1, 0 ),
	int2( 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ga,
	int4( 10, 20, 30, 40 ),
	int2( 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ga,
	int4( 40, 30, 20, 10 ),
	int2( 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ga,
	int4( 69, 420, 666, 616 ),
	int2( 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.ba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;

		vecCopy.ba = vecCopy.ab;

		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ba,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ba,
	int4( 0, 1, 2, 3 ),
	int2( 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ba,
	int4( 3, 2, 1, 0 ),
	int2( 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ba,
	int4( 10, 20, 30, 40 ),
	int2( 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ba,
	int4( 40, 30, 20, 10 ),
	int2( 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ba,
	int4( 69, 420, 666, 616 ),
	int2( 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int2& expectedAnswer )
{
	int4 vecCopy = vec;

	int2 vecSwizzled = vecCopy.aa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aa,
	int4( 0, 0, 0, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aa,
	int4( 0, 1, 2, 3 ),
	int2( 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aa,
	int4( 3, 2, 1, 0 ),
	int2( 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aa,
	int4( 10, 20, 30, 40 ),
	int2( 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aa,
	int4( 40, 30, 20, 10 ),
	int2( 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aa,
	int4( 69, 420, 666, 616 ),
	int2( 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrr,
	int4( 0, 1, 2, 3 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrr,
	int4( 3, 2, 1, 0 ),
	int3( 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrr,
	int4( 10, 20, 30, 40 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrr,
	int4( 40, 30, 20, 10 ),
	int3( 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrr,
	int4( 69, 420, 666, 616 ),
	int3( 69, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.grr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grr,
	int4( 0, 1, 2, 3 ),
	int3( 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grr,
	int4( 3, 2, 1, 0 ),
	int3( 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grr,
	int4( 10, 20, 30, 40 ),
	int3( 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grr,
	int4( 40, 30, 20, 10 ),
	int3( 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grr,
	int4( 69, 420, 666, 616 ),
	int3( 420, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.brr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brr,
	int4( 0, 1, 2, 3 ),
	int3( 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brr,
	int4( 3, 2, 1, 0 ),
	int3( 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brr,
	int4( 10, 20, 30, 40 ),
	int3( 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brr,
	int4( 40, 30, 20, 10 ),
	int3( 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brr,
	int4( 69, 420, 666, 616 ),
	int3( 666, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.arr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arr,
	int4( 0, 1, 2, 3 ),
	int3( 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arr,
	int4( 3, 2, 1, 0 ),
	int3( 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arr,
	int4( 10, 20, 30, 40 ),
	int3( 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arr,
	int4( 40, 30, 20, 10 ),
	int3( 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arr,
	int4( 69, 420, 666, 616 ),
	int3( 616, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgr,
	int4( 0, 1, 2, 3 ),
	int3( 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgr,
	int4( 3, 2, 1, 0 ),
	int3( 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgr,
	int4( 10, 20, 30, 40 ),
	int3( 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgr,
	int4( 40, 30, 20, 10 ),
	int3( 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgr,
	int4( 69, 420, 666, 616 ),
	int3( 69, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.ggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggr,
	int4( 0, 1, 2, 3 ),
	int3( 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggr,
	int4( 3, 2, 1, 0 ),
	int3( 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggr,
	int4( 10, 20, 30, 40 ),
	int3( 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggr,
	int4( 40, 30, 20, 10 ),
	int3( 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggr,
	int4( 69, 420, 666, 616 ),
	int3( 420, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;

		vecCopy.bgr = vecCopy.rgb;

		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgr,
	int4( 0, 1, 2, 3 ),
	int3( 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgr,
	int4( 3, 2, 1, 0 ),
	int3( 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgr,
	int4( 10, 20, 30, 40 ),
	int3( 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgr,
	int4( 40, 30, 20, 10 ),
	int3( 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgr,
	int4( 69, 420, 666, 616 ),
	int3( 666, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.agr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;

		vecCopy.agr = vecCopy.rga;

		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agr,
	int4( 0, 1, 2, 3 ),
	int3( 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agr,
	int4( 3, 2, 1, 0 ),
	int3( 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agr,
	int4( 10, 20, 30, 40 ),
	int3( 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agr,
	int4( 40, 30, 20, 10 ),
	int3( 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agr,
	int4( 69, 420, 666, 616 ),
	int3( 616, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbr,
	int4( 0, 1, 2, 3 ),
	int3( 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbr,
	int4( 3, 2, 1, 0 ),
	int3( 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbr,
	int4( 10, 20, 30, 40 ),
	int3( 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbr,
	int4( 40, 30, 20, 10 ),
	int3( 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbr,
	int4( 69, 420, 666, 616 ),
	int3( 69, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;

		vecCopy.gbr = vecCopy.rbg;

		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbr,
	int4( 0, 1, 2, 3 ),
	int3( 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbr,
	int4( 3, 2, 1, 0 ),
	int3( 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbr,
	int4( 10, 20, 30, 40 ),
	int3( 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbr,
	int4( 40, 30, 20, 10 ),
	int3( 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbr,
	int4( 69, 420, 666, 616 ),
	int3( 420, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbr,
	int4( 0, 1, 2, 3 ),
	int3( 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbr,
	int4( 3, 2, 1, 0 ),
	int3( 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbr,
	int4( 10, 20, 30, 40 ),
	int3( 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbr,
	int4( 40, 30, 20, 10 ),
	int3( 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbr,
	int4( 69, 420, 666, 616 ),
	int3( 666, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.abr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;

		vecCopy.abr = vecCopy.rba;

		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abr,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abr,
	int4( 0, 1, 2, 3 ),
	int3( 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abr,
	int4( 3, 2, 1, 0 ),
	int3( 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abr,
	int4( 10, 20, 30, 40 ),
	int3( 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abr,
	int4( 40, 30, 20, 10 ),
	int3( 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abr,
	int4( 69, 420, 666, 616 ),
	int3( 616, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rar,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rar,
	int4( 0, 1, 2, 3 ),
	int3( 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rar,
	int4( 3, 2, 1, 0 ),
	int3( 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rar,
	int4( 10, 20, 30, 40 ),
	int3( 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rar,
	int4( 40, 30, 20, 10 ),
	int3( 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rar,
	int4( 69, 420, 666, 616 ),
	int3( 69, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;

		vecCopy.gar = vecCopy.rag;

		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gar,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gar,
	int4( 0, 1, 2, 3 ),
	int3( 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gar,
	int4( 3, 2, 1, 0 ),
	int3( 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gar,
	int4( 10, 20, 30, 40 ),
	int3( 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gar,
	int4( 40, 30, 20, 10 ),
	int3( 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gar,
	int4( 69, 420, 666, 616 ),
	int3( 420, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;

		vecCopy.bar = vecCopy.rab;

		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bar,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bar,
	int4( 0, 1, 2, 3 ),
	int3( 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bar,
	int4( 3, 2, 1, 0 ),
	int3( 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bar,
	int4( 10, 20, 30, 40 ),
	int3( 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bar,
	int4( 40, 30, 20, 10 ),
	int3( 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bar,
	int4( 69, 420, 666, 616 ),
	int3( 666, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.aar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aar,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aar,
	int4( 0, 1, 2, 3 ),
	int3( 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aar,
	int4( 3, 2, 1, 0 ),
	int3( 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aar,
	int4( 10, 20, 30, 40 ),
	int3( 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aar,
	int4( 40, 30, 20, 10 ),
	int3( 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aar,
	int4( 69, 420, 666, 616 ),
	int3( 616, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrg,
	int4( 0, 1, 2, 3 ),
	int3( 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrg,
	int4( 3, 2, 1, 0 ),
	int3( 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrg,
	int4( 10, 20, 30, 40 ),
	int3( 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrg,
	int4( 40, 30, 20, 10 ),
	int3( 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrg,
	int4( 69, 420, 666, 616 ),
	int3( 69, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.grg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grg,
	int4( 0, 1, 2, 3 ),
	int3( 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grg,
	int4( 3, 2, 1, 0 ),
	int3( 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grg,
	int4( 10, 20, 30, 40 ),
	int3( 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grg,
	int4( 40, 30, 20, 10 ),
	int3( 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grg,
	int4( 69, 420, 666, 616 ),
	int3( 420, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.brg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;

		vecCopy.brg = vecCopy.grb;

		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brg,
	int4( 0, 1, 2, 3 ),
	int3( 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brg,
	int4( 3, 2, 1, 0 ),
	int3( 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brg,
	int4( 10, 20, 30, 40 ),
	int3( 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brg,
	int4( 40, 30, 20, 10 ),
	int3( 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brg,
	int4( 69, 420, 666, 616 ),
	int3( 666, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.arg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;

		vecCopy.arg = vecCopy.gra;

		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arg,
	int4( 0, 1, 2, 3 ),
	int3( 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arg,
	int4( 3, 2, 1, 0 ),
	int3( 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arg,
	int4( 10, 20, 30, 40 ),
	int3( 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arg,
	int4( 40, 30, 20, 10 ),
	int3( 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arg,
	int4( 69, 420, 666, 616 ),
	int3( 616, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgg,
	int4( 0, 1, 2, 3 ),
	int3( 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgg,
	int4( 3, 2, 1, 0 ),
	int3( 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgg,
	int4( 10, 20, 30, 40 ),
	int3( 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgg,
	int4( 40, 30, 20, 10 ),
	int3( 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgg,
	int4( 69, 420, 666, 616 ),
	int3( 69, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.ggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggg,
	int4( 0, 1, 2, 3 ),
	int3( 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggg,
	int4( 3, 2, 1, 0 ),
	int3( 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggg,
	int4( 10, 20, 30, 40 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggg,
	int4( 40, 30, 20, 10 ),
	int3( 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggg,
	int4( 69, 420, 666, 616 ),
	int3( 420, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgg,
	int4( 0, 1, 2, 3 ),
	int3( 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgg,
	int4( 3, 2, 1, 0 ),
	int3( 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgg,
	int4( 10, 20, 30, 40 ),
	int3( 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgg,
	int4( 40, 30, 20, 10 ),
	int3( 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgg,
	int4( 69, 420, 666, 616 ),
	int3( 666, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.agg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agg,
	int4( 0, 1, 2, 3 ),
	int3( 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agg,
	int4( 3, 2, 1, 0 ),
	int3( 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agg,
	int4( 10, 20, 30, 40 ),
	int3( 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agg,
	int4( 40, 30, 20, 10 ),
	int3( 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agg,
	int4( 69, 420, 666, 616 ),
	int3( 616, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;

		vecCopy.rbg = vecCopy.gbr;

		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbg,
	int4( 0, 1, 2, 3 ),
	int3( 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbg,
	int4( 3, 2, 1, 0 ),
	int3( 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbg,
	int4( 10, 20, 30, 40 ),
	int3( 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbg,
	int4( 40, 30, 20, 10 ),
	int3( 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbg,
	int4( 69, 420, 666, 616 ),
	int3( 69, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbg,
	int4( 0, 1, 2, 3 ),
	int3( 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbg,
	int4( 3, 2, 1, 0 ),
	int3( 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbg,
	int4( 10, 20, 30, 40 ),
	int3( 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbg,
	int4( 40, 30, 20, 10 ),
	int3( 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbg,
	int4( 69, 420, 666, 616 ),
	int3( 420, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbg,
	int4( 0, 1, 2, 3 ),
	int3( 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbg,
	int4( 3, 2, 1, 0 ),
	int3( 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbg,
	int4( 10, 20, 30, 40 ),
	int3( 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbg,
	int4( 40, 30, 20, 10 ),
	int3( 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbg,
	int4( 69, 420, 666, 616 ),
	int3( 666, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.abg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;

		vecCopy.abg = vecCopy.gba;

		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abg,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abg,
	int4( 0, 1, 2, 3 ),
	int3( 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abg,
	int4( 3, 2, 1, 0 ),
	int3( 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abg,
	int4( 10, 20, 30, 40 ),
	int3( 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abg,
	int4( 40, 30, 20, 10 ),
	int3( 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abg,
	int4( 69, 420, 666, 616 ),
	int3( 616, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;

		vecCopy.rag = vecCopy.gar;

		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rag,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rag,
	int4( 0, 1, 2, 3 ),
	int3( 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rag,
	int4( 3, 2, 1, 0 ),
	int3( 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rag,
	int4( 10, 20, 30, 40 ),
	int3( 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rag,
	int4( 40, 30, 20, 10 ),
	int3( 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rag,
	int4( 69, 420, 666, 616 ),
	int3( 69, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gag,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gag,
	int4( 0, 1, 2, 3 ),
	int3( 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gag,
	int4( 3, 2, 1, 0 ),
	int3( 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gag,
	int4( 10, 20, 30, 40 ),
	int3( 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gag,
	int4( 40, 30, 20, 10 ),
	int3( 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gag,
	int4( 69, 420, 666, 616 ),
	int3( 420, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;

		vecCopy.bag = vecCopy.gab;

		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bag,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bag,
	int4( 0, 1, 2, 3 ),
	int3( 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bag,
	int4( 3, 2, 1, 0 ),
	int3( 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bag,
	int4( 10, 20, 30, 40 ),
	int3( 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bag,
	int4( 40, 30, 20, 10 ),
	int3( 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bag,
	int4( 69, 420, 666, 616 ),
	int3( 666, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.aag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aag,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aag,
	int4( 0, 1, 2, 3 ),
	int3( 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aag,
	int4( 3, 2, 1, 0 ),
	int3( 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aag,
	int4( 10, 20, 30, 40 ),
	int3( 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aag,
	int4( 40, 30, 20, 10 ),
	int3( 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aag,
	int4( 69, 420, 666, 616 ),
	int3( 616, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrb,
	int4( 0, 1, 2, 3 ),
	int3( 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrb,
	int4( 3, 2, 1, 0 ),
	int3( 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrb,
	int4( 10, 20, 30, 40 ),
	int3( 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrb,
	int4( 40, 30, 20, 10 ),
	int3( 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrb,
	int4( 69, 420, 666, 616 ),
	int3( 69, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.grb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;

		vecCopy.grb = vecCopy.brg;

		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grb,
	int4( 0, 1, 2, 3 ),
	int3( 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grb,
	int4( 3, 2, 1, 0 ),
	int3( 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grb,
	int4( 10, 20, 30, 40 ),
	int3( 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grb,
	int4( 40, 30, 20, 10 ),
	int3( 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grb,
	int4( 69, 420, 666, 616 ),
	int3( 420, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.brb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brb,
	int4( 0, 1, 2, 3 ),
	int3( 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brb,
	int4( 3, 2, 1, 0 ),
	int3( 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brb,
	int4( 10, 20, 30, 40 ),
	int3( 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brb,
	int4( 40, 30, 20, 10 ),
	int3( 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brb,
	int4( 69, 420, 666, 616 ),
	int3( 666, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.arb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;

		vecCopy.arb = vecCopy.bra;

		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arb,
	int4( 0, 1, 2, 3 ),
	int3( 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arb,
	int4( 3, 2, 1, 0 ),
	int3( 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arb,
	int4( 10, 20, 30, 40 ),
	int3( 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arb,
	int4( 40, 30, 20, 10 ),
	int3( 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arb,
	int4( 69, 420, 666, 616 ),
	int3( 616, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;

		vecCopy.rgb = vecCopy.bgr;

		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgb,
	int4( 0, 1, 2, 3 ),
	int3( 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgb,
	int4( 3, 2, 1, 0 ),
	int3( 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgb,
	int4( 10, 20, 30, 40 ),
	int3( 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgb,
	int4( 40, 30, 20, 10 ),
	int3( 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgb,
	int4( 69, 420, 666, 616 ),
	int3( 69, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.ggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggb,
	int4( 0, 1, 2, 3 ),
	int3( 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggb,
	int4( 3, 2, 1, 0 ),
	int3( 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggb,
	int4( 10, 20, 30, 40 ),
	int3( 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggb,
	int4( 40, 30, 20, 10 ),
	int3( 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggb,
	int4( 69, 420, 666, 616 ),
	int3( 420, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgb,
	int4( 0, 1, 2, 3 ),
	int3( 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgb,
	int4( 3, 2, 1, 0 ),
	int3( 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgb,
	int4( 10, 20, 30, 40 ),
	int3( 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgb,
	int4( 40, 30, 20, 10 ),
	int3( 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgb,
	int4( 69, 420, 666, 616 ),
	int3( 666, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.agb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;

		vecCopy.agb = vecCopy.bga;

		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agb,
	int4( 0, 1, 2, 3 ),
	int3( 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agb,
	int4( 3, 2, 1, 0 ),
	int3( 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agb,
	int4( 10, 20, 30, 40 ),
	int3( 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agb,
	int4( 40, 30, 20, 10 ),
	int3( 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agb,
	int4( 69, 420, 666, 616 ),
	int3( 616, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbb,
	int4( 0, 1, 2, 3 ),
	int3( 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbb,
	int4( 3, 2, 1, 0 ),
	int3( 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbb,
	int4( 10, 20, 30, 40 ),
	int3( 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbb,
	int4( 40, 30, 20, 10 ),
	int3( 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbb,
	int4( 69, 420, 666, 616 ),
	int3( 69, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbb,
	int4( 0, 1, 2, 3 ),
	int3( 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbb,
	int4( 3, 2, 1, 0 ),
	int3( 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbb,
	int4( 10, 20, 30, 40 ),
	int3( 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbb,
	int4( 40, 30, 20, 10 ),
	int3( 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbb,
	int4( 69, 420, 666, 616 ),
	int3( 420, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbb,
	int4( 0, 1, 2, 3 ),
	int3( 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbb,
	int4( 3, 2, 1, 0 ),
	int3( 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbb,
	int4( 10, 20, 30, 40 ),
	int3( 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbb,
	int4( 40, 30, 20, 10 ),
	int3( 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbb,
	int4( 69, 420, 666, 616 ),
	int3( 666, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.abb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abb,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abb,
	int4( 0, 1, 2, 3 ),
	int3( 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abb,
	int4( 3, 2, 1, 0 ),
	int3( 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abb,
	int4( 10, 20, 30, 40 ),
	int3( 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abb,
	int4( 40, 30, 20, 10 ),
	int3( 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abb,
	int4( 69, 420, 666, 616 ),
	int3( 616, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;

		vecCopy.rab = vecCopy.bar;

		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rab,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rab,
	int4( 0, 1, 2, 3 ),
	int3( 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rab,
	int4( 3, 2, 1, 0 ),
	int3( 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rab,
	int4( 10, 20, 30, 40 ),
	int3( 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rab,
	int4( 40, 30, 20, 10 ),
	int3( 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rab,
	int4( 69, 420, 666, 616 ),
	int3( 69, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;

		vecCopy.gab = vecCopy.bag;

		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gab,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gab,
	int4( 0, 1, 2, 3 ),
	int3( 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gab,
	int4( 3, 2, 1, 0 ),
	int3( 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gab,
	int4( 10, 20, 30, 40 ),
	int3( 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gab,
	int4( 40, 30, 20, 10 ),
	int3( 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gab,
	int4( 69, 420, 666, 616 ),
	int3( 420, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bab,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bab,
	int4( 0, 1, 2, 3 ),
	int3( 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bab,
	int4( 3, 2, 1, 0 ),
	int3( 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bab,
	int4( 10, 20, 30, 40 ),
	int3( 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bab,
	int4( 40, 30, 20, 10 ),
	int3( 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bab,
	int4( 69, 420, 666, 616 ),
	int3( 666, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.aab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aab,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aab,
	int4( 0, 1, 2, 3 ),
	int3( 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aab,
	int4( 3, 2, 1, 0 ),
	int3( 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aab,
	int4( 10, 20, 30, 40 ),
	int3( 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aab,
	int4( 40, 30, 20, 10 ),
	int3( 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aab,
	int4( 69, 420, 666, 616 ),
	int3( 616, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rra,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rra,
	int4( 0, 1, 2, 3 ),
	int3( 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rra,
	int4( 3, 2, 1, 0 ),
	int3( 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rra,
	int4( 10, 20, 30, 40 ),
	int3( 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rra,
	int4( 40, 30, 20, 10 ),
	int3( 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rra,
	int4( 69, 420, 666, 616 ),
	int3( 69, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;

		vecCopy.gra = vecCopy.arg;

		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gra,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gra,
	int4( 0, 1, 2, 3 ),
	int3( 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gra,
	int4( 3, 2, 1, 0 ),
	int3( 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gra,
	int4( 10, 20, 30, 40 ),
	int3( 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gra,
	int4( 40, 30, 20, 10 ),
	int3( 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gra,
	int4( 69, 420, 666, 616 ),
	int3( 420, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;

		vecCopy.bra = vecCopy.arb;

		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bra,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bra,
	int4( 0, 1, 2, 3 ),
	int3( 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bra,
	int4( 3, 2, 1, 0 ),
	int3( 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bra,
	int4( 10, 20, 30, 40 ),
	int3( 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bra,
	int4( 40, 30, 20, 10 ),
	int3( 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bra,
	int4( 69, 420, 666, 616 ),
	int3( 666, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ara, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.ara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ara,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ara,
	int4( 0, 1, 2, 3 ),
	int3( 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ara,
	int4( 3, 2, 1, 0 ),
	int3( 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ara,
	int4( 10, 20, 30, 40 ),
	int3( 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ara,
	int4( 40, 30, 20, 10 ),
	int3( 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ara,
	int4( 69, 420, 666, 616 ),
	int3( 616, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;

		vecCopy.rga = vecCopy.agr;

		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rga,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rga,
	int4( 0, 1, 2, 3 ),
	int3( 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rga,
	int4( 3, 2, 1, 0 ),
	int3( 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rga,
	int4( 10, 20, 30, 40 ),
	int3( 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rga,
	int4( 40, 30, 20, 10 ),
	int3( 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rga,
	int4( 69, 420, 666, 616 ),
	int3( 69, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gga,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gga,
	int4( 0, 1, 2, 3 ),
	int3( 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gga,
	int4( 3, 2, 1, 0 ),
	int3( 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gga,
	int4( 10, 20, 30, 40 ),
	int3( 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gga,
	int4( 40, 30, 20, 10 ),
	int3( 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gga,
	int4( 69, 420, 666, 616 ),
	int3( 420, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;

		vecCopy.bga = vecCopy.agb;

		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bga,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bga,
	int4( 0, 1, 2, 3 ),
	int3( 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bga,
	int4( 3, 2, 1, 0 ),
	int3( 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bga,
	int4( 10, 20, 30, 40 ),
	int3( 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bga,
	int4( 40, 30, 20, 10 ),
	int3( 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bga,
	int4( 69, 420, 666, 616 ),
	int3( 666, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.aga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aga,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aga,
	int4( 0, 1, 2, 3 ),
	int3( 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aga,
	int4( 3, 2, 1, 0 ),
	int3( 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aga,
	int4( 10, 20, 30, 40 ),
	int3( 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aga,
	int4( 40, 30, 20, 10 ),
	int3( 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aga,
	int4( 69, 420, 666, 616 ),
	int3( 616, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.rba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;

		vecCopy.rba = vecCopy.abr;

		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rba,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rba,
	int4( 0, 1, 2, 3 ),
	int3( 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rba,
	int4( 3, 2, 1, 0 ),
	int3( 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rba,
	int4( 10, 20, 30, 40 ),
	int3( 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rba,
	int4( 40, 30, 20, 10 ),
	int3( 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rba,
	int4( 69, 420, 666, 616 ),
	int3( 69, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;

		vecCopy.gba = vecCopy.abg;

		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gba,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gba,
	int4( 0, 1, 2, 3 ),
	int3( 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gba,
	int4( 3, 2, 1, 0 ),
	int3( 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gba,
	int4( 10, 20, 30, 40 ),
	int3( 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gba,
	int4( 40, 30, 20, 10 ),
	int3( 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gba,
	int4( 69, 420, 666, 616 ),
	int3( 420, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.bba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bba,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bba,
	int4( 0, 1, 2, 3 ),
	int3( 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bba,
	int4( 3, 2, 1, 0 ),
	int3( 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bba,
	int4( 10, 20, 30, 40 ),
	int3( 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bba,
	int4( 40, 30, 20, 10 ),
	int3( 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bba,
	int4( 69, 420, 666, 616 ),
	int3( 666, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.aba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aba,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aba,
	int4( 0, 1, 2, 3 ),
	int3( 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aba,
	int4( 3, 2, 1, 0 ),
	int3( 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aba,
	int4( 10, 20, 30, 40 ),
	int3( 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aba,
	int4( 40, 30, 20, 10 ),
	int3( 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aba,
	int4( 69, 420, 666, 616 ),
	int3( 616, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_raa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.raa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raa,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raa,
	int4( 0, 1, 2, 3 ),
	int3( 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raa,
	int4( 3, 2, 1, 0 ),
	int3( 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raa,
	int4( 10, 20, 30, 40 ),
	int3( 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raa,
	int4( 40, 30, 20, 10 ),
	int3( 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raa,
	int4( 69, 420, 666, 616 ),
	int3( 69, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.gaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaa,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaa,
	int4( 0, 1, 2, 3 ),
	int3( 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaa,
	int4( 3, 2, 1, 0 ),
	int3( 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaa,
	int4( 10, 20, 30, 40 ),
	int3( 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaa,
	int4( 40, 30, 20, 10 ),
	int3( 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaa,
	int4( 69, 420, 666, 616 ),
	int3( 420, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_baa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.baa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baa,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baa,
	int4( 0, 1, 2, 3 ),
	int3( 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baa,
	int4( 3, 2, 1, 0 ),
	int3( 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baa,
	int4( 10, 20, 30, 40 ),
	int3( 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baa,
	int4( 40, 30, 20, 10 ),
	int3( 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baa,
	int4( 69, 420, 666, 616 ),
	int3( 666, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int3& expectedAnswer )
{
	int4 vecCopy = vec;

	int3 vecSwizzled = vecCopy.aaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaa,
	int4( 0, 0, 0, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaa,
	int4( 0, 1, 2, 3 ),
	int3( 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaa,
	int4( 3, 2, 1, 0 ),
	int3( 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaa,
	int4( 10, 20, 30, 40 ),
	int3( 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaa,
	int4( 40, 30, 20, 10 ),
	int3( 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaa,
	int4( 69, 420, 666, 616 ),
	int3( 616, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abrr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abrr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rarr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rarr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_garr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.garr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_barr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.barr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aarr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aarr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 69, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_argr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.argr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rggr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gggr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bggr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aggr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aggr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abgr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abgr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;

		vecCopy.abgr = vecCopy.rgba;

		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ragr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ragr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gagr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gagr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bagr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bagr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;

		vecCopy.bagr = vecCopy.rgab;

		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aagr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aagr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 420, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;

		vecCopy.agbr = vecCopy.rbga;

		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abbr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abbr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rabr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rabr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabr,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabr,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabr,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabr,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabr,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gabr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gabr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;

		vecCopy.gabr = vecCopy.rbag;

		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabr,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabr,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabr,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabr,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabr,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_babr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.babr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babr,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babr,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babr,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babr,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babr,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aabr, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aabr;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabr,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabr,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabr,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabr,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabr,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabr,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 666, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrar,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrar,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrar,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrar,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrar,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grar,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grar,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grar,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grar,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grar,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brar,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brar,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brar,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brar,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brar,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arar,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arar,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arar,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arar,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arar,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgar,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgar,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgar,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgar,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgar,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggar,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggar,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggar,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggar,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggar,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;

		vecCopy.bgar = vecCopy.ragb;

		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgar,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgar,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgar,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgar,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgar,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agar,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agar,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agar,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agar,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agar,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbar,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbar,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbar,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbar,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbar,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;

		vecCopy.gbar = vecCopy.rabg;

		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbar,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbar,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbar,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbar,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbar,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbar,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbar,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbar,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbar,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbar,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abar,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abar,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abar,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abar,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abar,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_raar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.raar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raar,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raar,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raar,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raar,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raar,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gaar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gaar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaar,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaar,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaar,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaar,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaar,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_baar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.baar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baar,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baar,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baar,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baar,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baar,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aaar, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aaar;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaar,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaar,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaar,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaar,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaar,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaar,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 616, 69 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abrg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abrg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;

		vecCopy.abrg = vecCopy.grba;

		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rarg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rarg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_garg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.garg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_barg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.barg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;

		vecCopy.barg = vecCopy.grab;

		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aarg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aarg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 69, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_argg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.argg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rggg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gggg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bggg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aggg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aggg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abgg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abgg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ragg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ragg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gagg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gagg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bagg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bagg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aagg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aagg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 420, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;

		vecCopy.arbg = vecCopy.gbra;

		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abbg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abbg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rabg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rabg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;

		vecCopy.rabg = vecCopy.gbar;

		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabg,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabg,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabg,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabg,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabg,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gabg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gabg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabg,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabg,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabg,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabg,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabg,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_babg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.babg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babg,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babg,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babg,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babg,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babg,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aabg, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aabg;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabg,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabg,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabg,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabg,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabg,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabg,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 666, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrag,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrag,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrag,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrag,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrag,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grag,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grag,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grag,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grag,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grag,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;

		vecCopy.brag = vecCopy.garb;

		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brag,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brag,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brag,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brag,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brag,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arag,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arag,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arag,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arag,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arag,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgag,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgag,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgag,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgag,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgag,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggag,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggag,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggag,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggag,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggag,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgag,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgag,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgag,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgag,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgag,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agag,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agag,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agag,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agag,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agag,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;

		vecCopy.rbag = vecCopy.gabr;

		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbag,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbag,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbag,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbag,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbag,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbag,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbag,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbag,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbag,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbag,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbag,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbag,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbag,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbag,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbag,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abag,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abag,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abag,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abag,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abag,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_raag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.raag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raag,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raag,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raag,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raag,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raag,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gaag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gaag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaag,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaag,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaag,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaag,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaag,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_baag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.baag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baag,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baag,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baag,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baag,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baag,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aaag, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aaag;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaag,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaag,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaag,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaag,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaag,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaag,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 616, 420 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrrb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grrb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brrb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arrb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgrb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggrb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgrb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;

		vecCopy.agrb = vecCopy.brga;

		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agrb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbrb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbrb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbrb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abrb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abrb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abrb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rarb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rarb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rarb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_garb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.garb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;

		vecCopy.garb = vecCopy.brag;

		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_garb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_barb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.barb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_barb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aarb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aarb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 0, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 3, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 10, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 40, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aarb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 69, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrgb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grgb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brgb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_argb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.argb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_a = vecCopy.a;
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;

		vecCopy.argb = vecCopy.bgra;

		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_argb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rggb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rggb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gggb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gggb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bggb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bggb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aggb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aggb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aggb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbgb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbgb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbgb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abgb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abgb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abgb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ragb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ragb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;

		vecCopy.ragb = vecCopy.bgar;

		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ragb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gagb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gagb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gagb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bagb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bagb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bagb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aagb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aagb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 1, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 2, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 20, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 30, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aagb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 420, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrbb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grbb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brbb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arbb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgbb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggbb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgbb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agbb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbbb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbbb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbbb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abbb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abbb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abbb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rabb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rabb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabb,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabb,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabb,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabb,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rabb,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gabb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gabb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabb,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabb,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabb,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabb,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gabb,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_babb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.babb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babb,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babb,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babb,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babb,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_babb,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aabb, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aabb;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabb,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabb,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 2, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabb,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 1, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabb,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 30, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabb,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 20, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aabb,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 666, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrab,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrab,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrab,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrab,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrab,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;

		vecCopy.grab = vecCopy.barg;

		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grab,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grab,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grab,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grab,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grab,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brab,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brab,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brab,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brab,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brab,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arab,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arab,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arab,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arab,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arab,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;
		int32_t old_b = vecCopy.b;

		vecCopy.rgab = vecCopy.bagr;

		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgab,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgab,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgab,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgab,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgab,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggab,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggab,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggab,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggab,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggab,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgab,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgab,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgab,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgab,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgab,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agab,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agab,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agab,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agab,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agab,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbab,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbab,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbab,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbab,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbab,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbab,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbab,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbab,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbab,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbab,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbab,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbab,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbab,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbab,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbab,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abab,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abab,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abab,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abab,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abab,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_raab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.raab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raab,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raab,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raab,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raab,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raab,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gaab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gaab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaab,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaab,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaab,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaab,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaab,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_baab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.baab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baab,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baab,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baab,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baab,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baab,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aaab, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aaab;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaab,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaab,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 3, 2 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaab,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 0, 1 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaab,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 40, 30 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaab,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 10, 20 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaab,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 616, 666 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrra,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrra,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrra,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrra,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrra,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grra,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grra,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grra,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grra,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grra,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brra,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brra,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brra,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brra,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brra,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arra,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arra,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arra,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arra,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arra,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgra,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgra,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgra,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgra,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgra,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggra,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggra,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggra,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggra,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggra,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;

		vecCopy.bgra = vecCopy.argb;

		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgra,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgra,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgra,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgra,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgra,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agra,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agra,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agra,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agra,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agra,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbra,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbra,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbra,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbra,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbra,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;
		int32_t old_a = vecCopy.a;

		vecCopy.gbra = vecCopy.arbg;

		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbra,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbra,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbra,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbra,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbra,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbra,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbra,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbra,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbra,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbra,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abra, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abra;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abra,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abra,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abra,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abra,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abra,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abra,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rara, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rara,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rara,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rara,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rara,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rara,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rara,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gara, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gara,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gara,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gara,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gara,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gara,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gara,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bara, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bara,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bara,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bara,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bara,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bara,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bara,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aara, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aara;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aara,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aara,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 0, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aara,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 3, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aara,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 10, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aara,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 40, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aara,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 69, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrga,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrga,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrga,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrga,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrga,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grga,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grga,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grga,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grga,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grga,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_b = vecCopy.b;
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;

		vecCopy.brga = vecCopy.agrb;

		TEMPER_CHECK_TRUE( vecCopy.a == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brga,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brga,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brga,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brga,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brga,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arga,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arga,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arga,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arga,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arga,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgga,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgga,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgga,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgga,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgga,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggga,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggga,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggga,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggga,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggga,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgga,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgga,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgga,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgga,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgga,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agga,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agga,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agga,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agga,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agga,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;
		int32_t old_g = vecCopy.g;
		int32_t old_a = vecCopy.a;

		vecCopy.rbga = vecCopy.agbr;

		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbga,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbga,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbga,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbga,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbga,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbga,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbga,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbga,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbga,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbga,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbga,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbga,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbga,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbga,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbga,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abga,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abga,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abga,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abga,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abga,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_raga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.raga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raga,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raga,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raga,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raga,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raga,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gaga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gaga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaga,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaga,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaga,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaga,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaga,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_baga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.baga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baga,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baga,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baga,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baga,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baga,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aaga, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aaga;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaga,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaga,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 1, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaga,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 2, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaga,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 20, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaga,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 30, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaga,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 420, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rrba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rrba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrba,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrba,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrba,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrba,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rrba,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_grba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.grba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_g = vecCopy.g;
		int32_t old_r = vecCopy.r;
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;

		vecCopy.grba = vecCopy.abrg;

		TEMPER_CHECK_TRUE( vecCopy.a == old_g );
		TEMPER_CHECK_TRUE( vecCopy.b == old_r );
		TEMPER_CHECK_TRUE( vecCopy.r == old_b );
		TEMPER_CHECK_TRUE( vecCopy.g == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grba,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grba,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grba,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grba,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_grba,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_brba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.brba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brba,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brba,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brba,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brba,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_brba,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_arba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.arba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arba,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arba,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arba,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arba,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_arba,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		int32_t old_r = vecCopy.r;
		int32_t old_g = vecCopy.g;
		int32_t old_b = vecCopy.b;
		int32_t old_a = vecCopy.a;

		vecCopy.rgba = vecCopy.abgr;

		TEMPER_CHECK_TRUE( vecCopy.a == old_r );
		TEMPER_CHECK_TRUE( vecCopy.b == old_g );
		TEMPER_CHECK_TRUE( vecCopy.g == old_b );
		TEMPER_CHECK_TRUE( vecCopy.r == old_a );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgba,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgba,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgba,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgba,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgba,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggba,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggba,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggba,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggba,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggba,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgba,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgba,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgba,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgba,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgba,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agba,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agba,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agba,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agba,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agba,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbba,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbba,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbba,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbba,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbba,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbba,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbba,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbba,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbba,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbba,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbba,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbba,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbba,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbba,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbba,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abba,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abba,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abba,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abba,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abba,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_raba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.raba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raba,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raba,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raba,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raba,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raba,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gaba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gaba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaba,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaba,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaba,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaba,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaba,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_baba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.baba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baba,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baba,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baba,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baba,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baba,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aaba, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aaba;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaba,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaba,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 2, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaba,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 1, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaba,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 30, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaba,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 20, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaba,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 666, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rraa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rraa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rraa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rraa,
	int4( 0, 1, 2, 3 ),
	int4( 0, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rraa,
	int4( 3, 2, 1, 0 ),
	int4( 3, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rraa,
	int4( 10, 20, 30, 40 ),
	int4( 10, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rraa,
	int4( 40, 30, 20, 10 ),
	int4( 40, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rraa,
	int4( 69, 420, 666, 616 ),
	int4( 69, 69, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_graa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.graa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_graa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_graa,
	int4( 0, 1, 2, 3 ),
	int4( 1, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_graa,
	int4( 3, 2, 1, 0 ),
	int4( 2, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_graa,
	int4( 10, 20, 30, 40 ),
	int4( 20, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_graa,
	int4( 40, 30, 20, 10 ),
	int4( 30, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_graa,
	int4( 69, 420, 666, 616 ),
	int4( 420, 69, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_braa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.braa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_braa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_braa,
	int4( 0, 1, 2, 3 ),
	int4( 2, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_braa,
	int4( 3, 2, 1, 0 ),
	int4( 1, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_braa,
	int4( 10, 20, 30, 40 ),
	int4( 30, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_braa,
	int4( 40, 30, 20, 10 ),
	int4( 20, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_braa,
	int4( 69, 420, 666, 616 ),
	int4( 666, 69, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_araa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.araa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_araa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_araa,
	int4( 0, 1, 2, 3 ),
	int4( 3, 0, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_araa,
	int4( 3, 2, 1, 0 ),
	int4( 0, 3, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_araa,
	int4( 10, 20, 30, 40 ),
	int4( 40, 10, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_araa,
	int4( 40, 30, 20, 10 ),
	int4( 10, 40, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_araa,
	int4( 69, 420, 666, 616 ),
	int4( 616, 69, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rgaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rgaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgaa,
	int4( 0, 1, 2, 3 ),
	int4( 0, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgaa,
	int4( 3, 2, 1, 0 ),
	int4( 3, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgaa,
	int4( 10, 20, 30, 40 ),
	int4( 10, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgaa,
	int4( 40, 30, 20, 10 ),
	int4( 40, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rgaa,
	int4( 69, 420, 666, 616 ),
	int4( 69, 420, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_ggaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.ggaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggaa,
	int4( 0, 1, 2, 3 ),
	int4( 1, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggaa,
	int4( 3, 2, 1, 0 ),
	int4( 2, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggaa,
	int4( 10, 20, 30, 40 ),
	int4( 20, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggaa,
	int4( 40, 30, 20, 10 ),
	int4( 30, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_ggaa,
	int4( 69, 420, 666, 616 ),
	int4( 420, 420, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bgaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bgaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgaa,
	int4( 0, 1, 2, 3 ),
	int4( 2, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgaa,
	int4( 3, 2, 1, 0 ),
	int4( 1, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgaa,
	int4( 10, 20, 30, 40 ),
	int4( 30, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgaa,
	int4( 40, 30, 20, 10 ),
	int4( 20, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bgaa,
	int4( 69, 420, 666, 616 ),
	int4( 666, 420, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_agaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.agaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agaa,
	int4( 0, 1, 2, 3 ),
	int4( 3, 1, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agaa,
	int4( 3, 2, 1, 0 ),
	int4( 0, 2, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agaa,
	int4( 10, 20, 30, 40 ),
	int4( 40, 20, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agaa,
	int4( 40, 30, 20, 10 ),
	int4( 10, 30, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_agaa,
	int4( 69, 420, 666, 616 ),
	int4( 616, 420, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_rbaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.rbaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbaa,
	int4( 0, 1, 2, 3 ),
	int4( 0, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbaa,
	int4( 3, 2, 1, 0 ),
	int4( 3, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbaa,
	int4( 10, 20, 30, 40 ),
	int4( 10, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbaa,
	int4( 40, 30, 20, 10 ),
	int4( 40, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_rbaa,
	int4( 69, 420, 666, 616 ),
	int4( 69, 666, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gbaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gbaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbaa,
	int4( 0, 1, 2, 3 ),
	int4( 1, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbaa,
	int4( 3, 2, 1, 0 ),
	int4( 2, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbaa,
	int4( 10, 20, 30, 40 ),
	int4( 20, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbaa,
	int4( 40, 30, 20, 10 ),
	int4( 30, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gbaa,
	int4( 69, 420, 666, 616 ),
	int4( 420, 666, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_bbaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.bbaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbaa,
	int4( 0, 1, 2, 3 ),
	int4( 2, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbaa,
	int4( 3, 2, 1, 0 ),
	int4( 1, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbaa,
	int4( 10, 20, 30, 40 ),
	int4( 30, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbaa,
	int4( 40, 30, 20, 10 ),
	int4( 20, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_bbaa,
	int4( 69, 420, 666, 616 ),
	int4( 666, 666, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_abaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.abaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abaa,
	int4( 0, 1, 2, 3 ),
	int4( 3, 2, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abaa,
	int4( 3, 2, 1, 0 ),
	int4( 0, 1, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abaa,
	int4( 10, 20, 30, 40 ),
	int4( 40, 30, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abaa,
	int4( 40, 30, 20, 10 ),
	int4( 10, 20, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_abaa,
	int4( 69, 420, 666, 616 ),
	int4( 616, 666, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_raaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.raaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raaa,
	int4( 0, 1, 2, 3 ),
	int4( 0, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raaa,
	int4( 3, 2, 1, 0 ),
	int4( 3, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raaa,
	int4( 10, 20, 30, 40 ),
	int4( 10, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raaa,
	int4( 40, 30, 20, 10 ),
	int4( 40, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_raaa,
	int4( 69, 420, 666, 616 ),
	int4( 69, 616, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_gaaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.gaaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaaa,
	int4( 0, 1, 2, 3 ),
	int4( 1, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaaa,
	int4( 3, 2, 1, 0 ),
	int4( 2, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaaa,
	int4( 10, 20, 30, 40 ),
	int4( 20, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaaa,
	int4( 40, 30, 20, 10 ),
	int4( 30, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_gaaa,
	int4( 69, 420, 666, 616 ),
	int4( 420, 616, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_baaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.baaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baaa,
	int4( 0, 1, 2, 3 ),
	int4( 2, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baaa,
	int4( 3, 2, 1, 0 ),
	int4( 1, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baaa,
	int4( 10, 20, 30, 40 ),
	int4( 30, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baaa,
	int4( 40, 30, 20, 10 ),
	int4( 20, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_baaa,
	int4( 69, 420, 666, 616 ),
	int4( 666, 616, 616, 616 )
);

TEMPER_PARAMETRIC( Test_int4_Swizzle_aaaa, TEMPER_FLAG_SHOULD_RUN, const int4& vec, const int4& expectedAnswer )
{
	int4 vecCopy = vec;

	int4 vecSwizzled = vecCopy.aaaa;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaaa,
	int4( 0, 0, 0, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaaa,
	int4( 0, 1, 2, 3 ),
	int4( 3, 3, 3, 3 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaaa,
	int4( 3, 2, 1, 0 ),
	int4( 0, 0, 0, 0 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaaa,
	int4( 10, 20, 30, 40 ),
	int4( 40, 40, 40, 40 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaaa,
	int4( 40, 30, 20, 10 ),
	int4( 10, 10, 10, 10 )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_int4_Swizzle_aaaa,
	int4( 69, 420, 666, 616 ),
	int4( 616, 616, 616, 616 )
);

