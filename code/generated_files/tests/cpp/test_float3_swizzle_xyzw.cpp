/*
===========================================================================

HLML
v2.2.0

MIT License:

Copyright (c) 2019 Dan Moody (daniel.guy.moody@gmail.com).

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.xx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.yx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;

		vecCopy.yx = vecCopy.xy;

		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_y ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_x ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.zx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;

		vecCopy.zx = vecCopy.xz;

		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_z ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_x ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.xy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;

		vecCopy.xy = vecCopy.yx;

		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_x ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_y ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.yy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.zy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;

		vecCopy.zy = vecCopy.yz;

		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_z ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_y ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.xz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;

		vecCopy.xz = vecCopy.zx;

		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_x ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_z ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.yz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;

		vecCopy.yz = vecCopy.zy;

		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_y ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_z ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float2& expectedAnswer )
{
	float3 vecCopy = vec;

	float2 vecSwizzled = vecCopy.zz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float2( 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float2( 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;

		vecCopy.zyx = vecCopy.xyz;

		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_z ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_y ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_x ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;

		vecCopy.yzx = vecCopy.xzy;

		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_y ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_z ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_x ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_z = vecCopy.z;
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;

		vecCopy.zxy = vecCopy.yxz;

		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_z ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_x ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_y ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;
		float old_y = vecCopy.y;

		vecCopy.xzy = vecCopy.yzx;

		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_x ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_z ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_y ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_y = vecCopy.y;
		float old_x = vecCopy.x;
		float old_z = vecCopy.z;

		vecCopy.yxz = vecCopy.zxy;

		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_y ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_x ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_z ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );

	// write swizzle test
	{
		float old_x = vecCopy.x;
		float old_y = vecCopy.y;
		float old_z = vecCopy.z;

		vecCopy.xyz = vecCopy.zyx;

		TEMPER_CHECK_TRUE( floateq( vecCopy.z, old_x ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.y, old_y ) );
		TEMPER_CHECK_TRUE( floateq( vecCopy.x, old_z ) );
	}
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.xzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.yzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float3& expectedAnswer )
{
	float3 vecCopy = vec;

	float3 vecSwizzled = vecCopy.zzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float3( 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float3( 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzxx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzyx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzzx, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzx,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzx,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzx,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzx,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzx,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 40.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzx,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzxy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzyy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzzy, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzy,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzy,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzy,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzy,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzy,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzy,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzxz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 10.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 40.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzxz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzyz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzyz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xxzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xxzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yxzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yxzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zxzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 10.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 40.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zxzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xyzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xyzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yyzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yyzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zyzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 20.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 30.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zyzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_xzzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.xzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 0.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 3.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 10.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 40.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_xzzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 69.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_yzzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.yzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 20.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 30.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_yzzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 420.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_TEST_PARAMETRIC( Test_float3_Swizzle_zzzz, TEMPER_FLAG_SHOULD_RUN, const float3& vec, const float4& expectedAnswer )
{
	float3 vecCopy = vec;

	float4 vecSwizzled = vecCopy.zzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzz,
	float3( 0.000000f, 0.000000f, 0.000000f ),
	float4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzz,
	float3( 0.000000f, 1.000000f, 2.000000f ),
	float4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzz,
	float3( 3.000000f, 2.000000f, 1.000000f ),
	float4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzz,
	float3( 10.000000f, 20.000000f, 30.000000f ),
	float4( 30.000000f, 30.000000f, 30.000000f, 30.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzz,
	float3( 40.000000f, 30.000000f, 20.000000f ),
	float4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_float3_Swizzle_zzzz,
	float3( 69.000000f, 420.000000f, 666.000000f ),
	float4( 666.000000f, 666.000000f, 666.000000f, 666.000000f )
);

