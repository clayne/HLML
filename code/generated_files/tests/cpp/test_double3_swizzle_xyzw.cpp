/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

TEMPER_PARAMETRIC( Test_double3_Swizzle_xx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.xx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.yx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.zx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.xy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.yy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.zy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.xz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.yz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double2& expectedAnswer )
{
	double2 vecSwizzled = vec.zz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double2( 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double2( 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double2( 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double2( 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double2( 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double2( 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.xzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.yzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double3& expectedAnswer )
{
	double3 vecSwizzled = vec.zzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double3( 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double3( 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double3( 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double3( 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double3( 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double3( 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzxx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzxx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 3.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 69.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzyx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzyx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 420.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzzx, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzzx;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzx,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzx,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzx,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 3.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzx,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzx,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzx,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 666.000000f, 69.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzxy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzxy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 0.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 3.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 69.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzyy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzyy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 420.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzzy, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzzy;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzy,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzy,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzy,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzy,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzy,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzy,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 666.000000f, 420.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzxz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzxz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 0.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 3.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzxz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 69.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzyz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzyz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzyz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 420.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xxzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xxzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yxzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yxzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zxzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zxzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 0.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 3.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zxzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 69.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xyzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xyzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yyzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yyzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zyzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zyzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 1.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 2.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 10.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 20.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zyzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 420.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_xzzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.xzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 0.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 3.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_xzzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 69.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_yzzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.yzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 1.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 2.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 10.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 20.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_yzzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 420.000000f, 666.000000f, 666.000000f, 666.000000f )
);

TEMPER_PARAMETRIC( Test_double3_Swizzle_zzzz, TEMPER_FLAG_SHOULD_RUN, const double3& vec, const double4& expectedAnswer )
{
	double4 vecSwizzled = vec.zzzz;
	TEMPER_CHECK_TRUE( vecSwizzled == expectedAnswer );
}

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzz,
	double3( 0.000000f, 0.000000f, 0.000000f ),
	double4( 0.000000f, 0.000000f, 0.000000f, 0.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzz,
	double3( 0.000000f, 1.000000f, 2.000000f ),
	double4( 2.000000f, 2.000000f, 2.000000f, 2.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzz,
	double3( 3.000000f, 2.000000f, 1.000000f ),
	double4( 1.000000f, 1.000000f, 1.000000f, 1.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzz,
	double3( 10.000000f, 10.000000f, 20.000000f ),
	double4( 20.000000f, 20.000000f, 20.000000f, 20.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzz,
	double3( 20.000000f, 20.000000f, 10.000000f ),
	double4( 10.000000f, 10.000000f, 10.000000f, 10.000000f )
);

TEMPER_INVOKE_PARAMETRIC_TEST( Test_double3_Swizzle_zzzz,
	double3( 69.000000f, 420.000000f, 666.000000f ),
	double4( 666.000000f, 666.000000f, 666.000000f, 666.000000f )
);

